This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where empty lines have been removed, content has been formatted for parsing in plain style, content has been compressed (code blocks are separated by ⋮---- delimiter), security check has been disabled.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
- Content has been formatted for parsing in plain style
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Security check has been disabled - content may contain sensitive information
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
.github/
  workflows/
    claude.yml
    lint.yml
    release-drafter.yml
    release.yml
    test.yml
  release-drafter-config.yml
examples/
  human_in_the_loop/
    breakpoints.ipynb
    dynamic_breakpoints.ipynb
    edit-graph-state.ipynb
    review-tool-calls-openai.ipynb
    review-tool-calls.ipynb
    time-travel.ipynb
    wait-user-input.ipynb
  memory/
    add-summary-conversation-history.ipynb
    delete-messages.ipynb
    manage-conversation-history.ipynb
    semantic-search.ipynb
  .gitignore
  create-react-agent-hitl.ipynb
  create-react-agent-manage-message-history.ipynb
  create-react-agent-memory.ipynb
  cross-thread-persistence-functional.ipynb
  cross-thread-persistence.ipynb
  docker-compose.yml
  Dockerfile.jupyter
  jupyter_notebook_config.py
  persistence-functional.ipynb
  README.md
  subgraph-persistence.ipynb
  subgraphs-manage-state.ipynb
langgraph/
  checkpoint/
    redis/
      __init__.py
      aio.py
      ashallow.py
      base.py
      jsonplus_redis.py
      shallow.py
      types.py
      util.py
      version.py
  store/
    redis/
      __init__.py
      aio.py
      base.py
      token_unescaper.py
      types.py
tests/
  conftest.py
  docker-compose.yml
  embed_test_utils.py
  test_async_aget_tuple_checkpoint_id.py
  test_async_cluster_mode.py
  test_async_search_limit.py
  test_async_store.py
  test_async.py
  test_checkpoint_ttl.py
  test_cluster_mode.py
  test_crossslot_integration.py
  test_decode_responses.py
  test_fix_verification.py
  test_interruption.py
  test_issue_51_adelete_thread.py
  test_key_parsing.py
  test_numeric_version_fix.py
  test_numeric_version_issue.py
  test_search_limit.py
  test_semantic_search_keys.py
  test_semantic_search_notebook.py
  test_shallow_async.py
  test_shallow_sync.py
  test_store.py
  test_streaming_modes.py
  test_streaming.py
  test_subgraph_key_parsing.py
  test_sync.py
.gitignore
CLAUDE.md
LICENSE
Makefile
pyproject.toml
README.md
scripts.py
test_key_parsing_focus.py
test_key_parsing_suite.py

================================================================
Files
================================================================

================
File: .github/workflows/claude.yml
================
name: Claude Code
on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]
jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

================
File: .github/workflows/lint.yml
================
name: Lint
on:
  pull_request:
  push:
    branches:
      - main
env:
  POETRY_VERSION: "1.8.3"
jobs:
  check:
    name: Style-check ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Only lint on the min and max supported Python versions.
        # It's extremely unlikely that there's a lint issue on any version in between
        # that doesn't show up on the min or max versions.
        #
        # GitHub rate-limits how many jobs can be running at any one time.
        # Starting new jobs is also relatively slow,
        # so linting on fewer versions makes CI faster.
        python-version:
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    - name: Install dependencies
      run: |
        poetry install --all-extras
    - name: lint
      run: |
        make lint

================
File: .github/workflows/release-drafter.yml
================
name: Release Drafter
on:
  push:
    # branches to consider in the event; optional, defaults to all
    branches:
      - main
permissions: {}
jobs:
  update_release_draft:
    permissions:
      pull-requests: write  #  to add label to PR (release-drafter/release-drafter)
      contents: write  #  to create a github release (release-drafter/release-drafter)
    runs-on: ubuntu-latest
    steps:
      # Drafts your next Release notes as Pull Requests are merged into "master"
      - uses: release-drafter/release-drafter@v5
        with:
          # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml
           config-name: release-drafter-config.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

================
File: .github/workflows/release.yml
================
name: Publish Release
on:
  release:
    types: [published]
env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.8.3"
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      - name: Build package
        run: poetry build
      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI }}
        run: poetry publish

================
File: .github/workflows/test.yml
================
name: Test Suite
on:
  pull_request:
  push:
    branches:
      - main
  schedule:
    - cron: "0 2 * * *"  # 2 AM UTC nightly
  workflow_dispatch:
env:
  POETRY_VERSION: "1.8.3"
jobs:
  test:
    name: Python ${{ matrix.python-version }} - [redis ${{ matrix.redis-version }}]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9, '3.10', 3.11, 3.12, 3.13]
        redis-version: ['6.2.6-v9', 'latest', '8.0.2']
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    - name: Install dependencies
      run: |
        pip wheel --no-cache-dir --use-pep517 ml-dtypes
        poetry install --all-extras
    - name: Set Redis image name
      run: |
        if [[ "${{ matrix.redis-version }}" == "8.0.2" ]]; then
          echo "REDIS_IMAGE=redis:${{ matrix.redis-version }}" >> $GITHUB_ENV
        else
          echo "REDIS_IMAGE=redis/redis-stack-server:${{ matrix.redis-version }}" >> $GITHUB_ENV
        fi
    - name: Run API tests
      if: matrix.redis-version == 'latest'
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        make test-all
    - name: Run tests
      if:  matrix.redis-version != 'latest'
      run: |
        make test

================
File: .github/release-drafter-config.yml
================
name-template: '$NEXT_MINOR_VERSION'
tag-template: 'v$NEXT_MINOR_VERSION'
autolabeler:
  - label: 'maintenance'
    files:
      - '*.md'
      - '.github/*'
  - label: 'bug'
    branch:
      - '/bug-.+'
  - label: 'maintenance'
    branch:
      - '/maintenance-.+'
  - label: 'feature'
    branch:
      - '/feature-.+'
categories:
  - title: 'Breaking Changes'
    labels:
      - 'breakingchange'
  - title: '🧪 Experimental Features'
    labels:
      - 'experimental'
  - title: '🚀 New Features'
    labels:
      - 'feature'
      - 'enhancement'
  - title: '🐛 Bug Fixes'
    labels:
      - 'fix'
      - 'bugfix'
      - 'bug'
      - 'BUG'
  - title: '🧰 Maintenance'
    label: 'maintenance'
change-template: '- $TITLE (#$NUMBER)'
exclude-labels:
  - 'skip-changelog'
template: |
  # Changes
  $CHANGES
  ## Contributors
  We'd like to thank all the contributors who worked on this release!
  $CONTRIBUTORS

================
File: examples/human_in_the_loop/breakpoints.ipynb
================
{
 "cells": [
  {
   "attachments": {
    "e47c6871-a603-43b7-a8b0-1c75d2348747.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "51466c8d-8ce4-4b3d-be4e-18fdbeda5f53",
   "metadata": {},
   "source": [
    "# How to add breakpoints\n",
    "\n",
    "!!! tip \"Prerequisites\"\n",
    "\n",
    "    This guide assumes familiarity with the following concepts:\n",
    "\n",
    "    * [Breakpoints](https://langchain-ai.github.io/langgraph/concepts/breakpoints)\n",
    "    * [LangGraph Glossary](https://langchain-ai.github.io/langgraph/concepts/low_level)\n",
    "    \n",
    "\n",
    "Human-in-the-loop (HIL) interactions are crucial for [agentic systems](https://langchain-ai.github.io/langgraph/concepts/agentic_concepts/#human-in-the-loop). [Breakpoints](https://langchain-ai.github.io/langgraph/concepts/low_level/#breakpoints) are a common HIL interaction pattern, allowing the graph to stop at specific steps and seek human approval before proceeding (e.g., for sensitive actions). \n",
    "\n",
    "Breakpoints are built on top of LangGraph [checkpoints](https://langchain-ai.github.io/langgraph/concepts/low_level/#checkpointer), which save the graph's state after each node execution. Checkpoints are saved in [threads](https://langchain-ai.github.io/langgraph/concepts/low_level/#threads) that preserve graph state and can be accessed after a graph has finished execution. This allows for graph execution to pause at specific points, await human approval, and then resume execution from the last checkpoint.\n",
    "\n",
    "![approval.png](attachment:e47c6871-a603-43b7-a8b0-1c75d2348747.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cbd446a-808f-4394-be92-d45ab818953c",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "First we need to install the packages required"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "af4ce0ba-7596-4e5f-8bf8-0b0bd6e62833",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture --no-stderr\n",
    "%pip install --quiet -U langgraph langchain_anthropic"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0abe11f4-62ed-4dc4-8875-3db21e260d1d",
   "metadata": {},
   "source": [
    "Next, we need to set API keys for Anthropic (the LLM we will use)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c903a1cf-2977-4e2d-ad7d-8b3946821d89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "ANTHROPIC_API_KEY:  ········\n"
     ]
    }
   ],
   "source": [
    "import getpass\n",
    "import os\n",
    "\n",
    "\n",
    "def _set_env(var: str):\n",
    "    if not os.environ.get(var):\n",
    "        os.environ[var] = getpass.getpass(f\"{var}: \")\n",
    "\n",
    "\n",
    "_set_env(\"ANTHROPIC_API_KEY\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0ed46a8-effe-4596-b0e1-a6a29ee16f5c",
   "metadata": {},
   "source": [
    "<div class=\"admonition tip\">\n",
    "    <p class=\"admonition-title\">Set up <a href=\"https://smith.langchain.com\">LangSmith</a> for LangGraph development</p>\n",
    "    <p style=\"padding-top: 5px;\">\n",
    "        Sign up for LangSmith to quickly spot issues and improve the performance of your LangGraph projects. LangSmith lets you use trace data to debug, test, and monitor your LLM apps built with LangGraph — read more about how to get started <a href=\"https://docs.smith.langchain.com\">here</a>. \n",
    "    </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "131fd44d-c0f8-473a-ae80-4b4668ad7f47",
   "metadata": {},
   "source": [
    "## Simple Usage\n",
    "\n",
    "Let's look at very basic usage of this.\n",
    "\n",
    "Below, we do two things:\n",
    "\n",
    "1) We specify the [breakpoint](https://langchain-ai.github.io/langgraph/concepts/low_level/#breakpoints) using `interrupt_before` the specified step.\n",
    "\n",
    "2) We set up a [checkpointer](https://langchain-ai.github.io/langgraph/concepts/low_level/#checkpointer) to save the state of the graph."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9b53f191-1e86-4881-a667-d46a3d66958b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from typing_extensions import TypedDict\n",
    "from langgraph.graph import StateGraph, START, END\n",
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "from IPython.display import Image, display\n",
    "\n",
    "\n",
    "class State(TypedDict):\n",
    "    input: str\n",
    "\n",
    "\n",
    "def step_1(state):\n",
    "    print(\"---Step 1---\")\n",
    "    pass\n",
    "\n",
    "\n",
    "def step_2(state):\n",
    "    print(\"---Step 2---\")\n",
    "    pass\n",
    "\n",
    "\n",
    "def step_3(state):\n",
    "    print(\"---Step 3---\")\n",
    "    pass\n",
    "\n",
    "\n",
    "builder = StateGraph(State)\n",
    "builder.add_node(\"step_1\", step_1)\n",
    "builder.add_node(\"step_2\", step_2)\n",
    "builder.add_node(\"step_3\", step_3)\n",
    "builder.add_edge(START, \"step_1\")\n",
    "builder.add_edge(\"step_1\", \"step_2\")\n",
    "builder.add_edge(\"step_2\", \"step_3\")\n",
    "builder.add_edge(\"step_3\", END)\n",
    "\n",
    "# Set up Redis connection for checkpointer\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "memory = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    memory = cp\n",
    "\n",
    "# Add\n",
    "graph = builder.compile(checkpointer=memory, interrupt_before=[\"step_3\"])\n",
    "\n",
    "# View\n",
    "display(Image(graph.get_graph().draw_mermaid_png()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7d5f80f-9d8c-4a39-b198-24fe94132b41",
   "metadata": {},
   "source": [
    "We create a [thread ID](https://langchain-ai.github.io/langgraph/concepts/low_level/#threads) for the checkpointer.\n",
    "\n",
    "We run until step 3, as defined with `interrupt_before`. \n",
    "\n",
    "After the user input / approval, [we resume execution](https://langchain-ai.github.io/langgraph/concepts/low_level/#breakpoints) by invoking the graph with `None`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "dfe04a7f-988e-4a36-8ce8-2c49fab0130a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'input': 'hello world'}\n",
      "---Step 1---\n",
      "---Step 2---\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Do you want to go to Step 3? (yes/no):  yes\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'input': 'hello world'}\n",
      "---Step 3---\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Do you want to go to Step 3? (yes/no):  yes\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---Step 3---\n"
     ]
    }
   ],
   "source": [
    "# Input\n",
    "initial_input = {\"input\": \"hello world\"}\n",
    "\n",
    "# Thread\n",
    "thread = {\"configurable\": {\"thread_id\": \"1\"}}\n",
    "\n",
    "# Run the graph until the first interruption\n",
    "for event in graph.stream(initial_input, thread, stream_mode=\"values\"):\n",
    "    print(event)\n",
    "\n",
    "try:\n",
    "    user_approval = input(\"Do you want to go to Step 3? (yes/no): \")\n",
    "except:\n",
    "    user_approval = \"yes\"\n",
    "\n",
    "if user_approval.lower() == \"yes\":\n",
    "    # If approved, continue the graph execution\n",
    "    for event in graph.stream(None, thread, stream_mode=\"values\"):\n",
    "        print(event)\n",
    "else:\n",
    "    print(\"Operation cancelled by user.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3333b771",
   "metadata": {},
   "source": [
    "## Agent\n",
    "\n",
    "In the context of agents, breakpoints are useful to manually approve certain agent actions.\n",
    " \n",
    "To show this, we will build a relatively simple ReAct-style agent that does tool calling. \n",
    "\n",
    "We'll add a breakpoint before the `action` node is called. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6098e5cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m20:10:34\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n",
      "\u001b[32m20:10:34\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n",
      "\u001b[32m20:10:34\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Set up the tool\n",
    "from langchain_anthropic import ChatAnthropic\n",
    "from langchain_core.tools import tool\n",
    "from langgraph.graph import MessagesState, START\n",
    "from langgraph.prebuilt import ToolNode\n",
    "from langgraph.graph import END, StateGraph\n",
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "\n",
    "\n",
    "@tool\n",
    "def search(query: str):\n",
    "    \"\"\"Call to surf the web.\"\"\"\n",
    "    # This is a placeholder for the actual implementation\n",
    "    # Don't let the LLM know this though 😊\n",
    "    return [\n",
    "        \"It's sunny in San Francisco, but you better look out if you're a Gemini 😈.\"\n",
    "    ]\n",
    "\n",
    "\n",
    "tools = [search]\n",
    "tool_node = ToolNode(tools)\n",
    "\n",
    "# Set up the model\n",
    "\n",
    "model = ChatAnthropic(model=\"claude-3-5-sonnet-20240620\")\n",
    "model = model.bind_tools(tools)\n",
    "\n",
    "\n",
    "# Define nodes and conditional edges\n",
    "\n",
    "\n",
    "# Define the function that determines whether to continue or not\n",
    "def should_continue(state):\n",
    "    messages = state[\"messages\"]\n",
    "    last_message = messages[-1]\n",
    "    # If there is no function call, then we finish\n",
    "    if not last_message.tool_calls:\n",
    "        return \"end\"\n",
    "    # Otherwise if there is, we continue\n",
    "    else:\n",
    "        return \"continue\"\n",
    "\n",
    "\n",
    "# Define the function that calls the model\n",
    "def call_model(state):\n",
    "    messages = state[\"messages\"]\n",
    "    response = model.invoke(messages)\n",
    "    # We return a list, because this will get added to the existing list\n",
    "    return {\"messages\": [response]}\n",
    "\n",
    "\n",
    "# Define a new graph\n",
    "workflow = StateGraph(MessagesState)\n",
    "\n",
    "# Define the two nodes we will cycle between\n",
    "workflow.add_node(\"agent\", call_model)\n",
    "workflow.add_node(\"action\", tool_node)\n",
    "\n",
    "# Set the entrypoint as `agent`\n",
    "# This means that this node is the first one called\n",
    "workflow.add_edge(START, \"agent\")\n",
    "\n",
    "# We now add a conditional edge\n",
    "workflow.add_conditional_edges(\n",
    "    # First, we define the start node. We use `agent`.\n",
    "    # This means these are the edges taken after the `agent` node is called.\n",
    "    \"agent\",\n",
    "    # Next, we pass in the function that will determine which node is called next.\n",
    "    should_continue,\n",
    "    # Finally we pass in a mapping.\n",
    "    # The keys are strings, and the values are other nodes.\n",
    "    # END is a special node marking that the graph should finish.\n",
    "    # What will happen is we will call `should_continue`, and then the output of that\n",
    "    # will be matched against the keys in this mapping.\n",
    "    # Based on which one it matches, that node will then be called.\n",
    "    {\n",
    "        # If `tools`, then we call the tool node.\n",
    "        \"continue\": \"action\",\n",
    "        # Otherwise we finish.\n",
    "        \"end\": END,\n",
    "    },\n",
    ")\n",
    "\n",
    "# We now add a normal edge from `tools` to `agent`.\n",
    "# This means that after `tools` is called, `agent` node is called next.\n",
    "workflow.add_edge(\"action\", \"agent\")\n",
    "\n",
    "# Set up Redis connection for checkpointer\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "memory = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    memory = cp\n",
    "\n",
    "# Finally, we compile it!\n",
    "# This compiles it into a LangChain Runnable,\n",
    "# meaning you can use it as you would any other runnable\n",
    "\n",
    "# We add in `interrupt_before=[\"action\"]`\n",
    "# This will add a breakpoint before the `action` node is called\n",
    "app = workflow.compile(checkpointer=memory, interrupt_before=[\"action\"])\n",
    "\n",
    "display(Image(app.get_graph().draw_mermaid_png()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a1b56c5-bd61-4192-8bdb-458a1e9f0159",
   "metadata": {},
   "source": [
    "## Interacting with the Agent\n",
    "\n",
    "We can now interact with the agent.\n",
    "\n",
    "We see that it stops before calling a tool, because `interrupt_before` is set before the `action` node."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cfd140f0-a5a6-4697-8115-322242f197b5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "search for the weather in sf now\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "[{'text': \"Certainly! I'll search for the current weather in San Francisco for you. Let me use the search function to find this information.\", 'type': 'text'}, {'id': 'toolu_01PKgmY3du7hFeLNPu2P3hMc', 'input': {'query': 'current weather in San Francisco'}, 'name': 'search', 'type': 'tool_use'}]\n",
      "Tool Calls:\n",
      "  search (toolu_01PKgmY3du7hFeLNPu2P3hMc)\n",
      " Call ID: toolu_01PKgmY3du7hFeLNPu2P3hMc\n",
      "  Args:\n",
      "    query: current weather in San Francisco\n"
     ]
    }
   ],
   "source": [
    "from langchain_core.messages import HumanMessage\n",
    "\n",
    "thread = {\"configurable\": {\"thread_id\": \"3\"}}\n",
    "inputs = [HumanMessage(content=\"search for the weather in sf now\")]\n",
    "for event in app.stream({\"messages\": inputs}, thread, stream_mode=\"values\"):\n",
    "    event[\"messages\"][-1].pretty_print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1bca3814-db08-4b0b-8c0c-95b6c5440c81",
   "metadata": {},
   "source": [
    "**Resume**\n",
    "\n",
    "We can now call the agent again with no inputs to continue.\n",
    "\n",
    "This will run the tool as requested.\n",
    "\n",
    "Running an interrupted graph with `None` in the inputs means to `proceed as if the interruption didn't occur.`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "51923913-20f7-4ee1-b9ba-d01f5fb2869b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "[{'text': \"Certainly! I'll search for the current weather in San Francisco for you. Let me use the search function to find this information.\", 'type': 'text'}, {'id': 'toolu_01PKgmY3du7hFeLNPu2P3hMc', 'input': {'query': 'current weather in San Francisco'}, 'name': 'search', 'type': 'tool_use'}]\n",
      "Tool Calls:\n",
      "  search (toolu_01PKgmY3du7hFeLNPu2P3hMc)\n",
      " Call ID: toolu_01PKgmY3du7hFeLNPu2P3hMc\n",
      "  Args:\n",
      "    query: current weather in San Francisco\n",
      "=================================\u001b[1m Tool Message \u001b[0m=================================\n",
      "Name: search\n",
      "\n",
      "[\"It's sunny in San Francisco, but you better look out if you're a Gemini 😈.\"]\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "Based on the search results, I can provide you with information about the current weather in San Francisco:\n",
      "\n",
      "The weather in San Francisco is currently sunny. This means it's a clear day with plenty of sunshine.\n",
      "\n",
      "However, I should note that the search result included an unusual comment about Gemini zodiac signs. This appears to be unrelated to the weather and might be a quirk of the search results or possibly a reference to some astrological forecast. For the purposes of your weather inquiry, we can focus on the fact that it's sunny in San Francisco right now.\n",
      "\n",
      "Is there anything else you'd like to know about the weather in San Francisco or any other location?\n"
     ]
    }
   ],
   "source": [
    "for event in app.stream(None, thread, stream_mode=\"values\"):\n",
    "    event[\"messages\"][-1].pretty_print()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

================
File: examples/human_in_the_loop/dynamic_breakpoints.ipynb
================
{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "b7d5f6a5-9e59-43e4-a4b6-8ada6dace691",
   "metadata": {},
   "source": [
    "# How to add dynamic breakpoints with `NodeInterrupt`\n",
    "\n",
    "!!! note\n",
    "\n",
    "    For **human-in-the-loop** workflows use the new [`interrupt()`](../../../reference/types/#langgraph.types.interrupt) function for **human-in-the-loop** workflows. Please review the [Human-in-the-loop conceptual guide](../../../concepts/human_in_the_loop) for more information about design patterns with `interrupt`.\n",
    "\n",
    "!!! tip \"Prerequisites\"\n",
    "\n",
    "    This guide assumes familiarity with the following concepts:\n",
    "\n",
    "    * [Breakpoints](../../../concepts/breakpoints)\n",
    "    * [LangGraph Glossary](../../../concepts/low_level)\n",
    "    \n",
    "\n",
    "Human-in-the-loop (HIL) interactions are crucial for [agentic systems](https://langchain-ai.github.io/langgraph/concepts/agentic_concepts/#human-in-the-loop). [Breakpoints](https://langchain-ai.github.io/langgraph/concepts/low_level/#breakpoints) are a common HIL interaction pattern, allowing the graph to stop at specific steps and seek human approval before proceeding (e.g., for sensitive actions).\n",
    "\n",
    "In LangGraph you can add breakpoints before / after a node is executed. But oftentimes it may be helpful to **dynamically** interrupt the graph from inside a given node based on some condition. When doing so, it may also be helpful to include information about **why** that interrupt was raised.\n",
    "\n",
    "This guide shows how you can dynamically interrupt the graph using `NodeInterrupt` -- a special exception that can be raised from inside a node. Let's see it in action!\n",
    "\n",
    "\n",
    "## Setup\n",
    "\n",
    "First, let's install the required packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2013d058-c245-498e-ba05-5af99b9b8a1b",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture --no-stderr\n",
    "%pip install -U langgraph"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9f9574b",
   "metadata": {},
   "source": [
    "<div class=\"admonition tip\">\n",
    "    <p class=\"admonition-title\">Set up <a href=\"https://smith.langchain.com\">LangSmith</a> for LangGraph development</p>\n",
    "    <p style=\"padding-top: 5px;\">\n",
    "        Sign up for LangSmith to quickly spot issues and improve the performance of your LangGraph projects. LangSmith lets you use trace data to debug, test, and monitor your LLM apps built with LangGraph — read more about how to get started <a href=\"https://docs.smith.langchain.com\">here</a>. \n",
    "    </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9aa244f-1dd9-450e-9526-b1a28b30f84f",
   "metadata": {},
   "source": [
    "## Define the graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9a14c8b2-5c25-4201-93ea-e5358ee99bcb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from typing_extensions import TypedDict\n",
    "from IPython.display import Image, display\n",
    "\n",
    "from langgraph.graph import StateGraph, START, END\n",
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "from langgraph.errors import NodeInterrupt\n",
    "\n",
    "# Set up Redis connection\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "memory = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    memory = cp\n",
    "\n",
    "class State(TypedDict):\n",
    "    input: str\n",
    "\n",
    "\n",
    "def step_1(state: State) -> State:\n",
    "    print(\"---Step 1---\")\n",
    "    return state\n",
    "\n",
    "\n",
    "def step_2(state: State) -> State:\n",
    "    # Let's optionally raise a NodeInterrupt\n",
    "    # if the length of the input is longer than 5 characters\n",
    "    if len(state[\"input\"]) > 5:\n",
    "        raise NodeInterrupt(\n",
    "            f\"Received input that is longer than 5 characters: {state['input']}\"\n",
    "        )\n",
    "\n",
    "    print(\"---Step 2---\")\n",
    "    return state\n",
    "\n",
    "\n",
    "def step_3(state: State) -> State:\n",
    "    print(\"---Step 3---\")\n",
    "    return state\n",
    "\n",
    "\n",
    "builder = StateGraph(State)\n",
    "builder.add_node(\"step_1\", step_1)\n",
    "builder.add_node(\"step_2\", step_2)\n",
    "builder.add_node(\"step_3\", step_3)\n",
    "builder.add_edge(START, \"step_1\")\n",
    "builder.add_edge(\"step_1\", \"step_2\")\n",
    "builder.add_edge(\"step_2\", \"step_3\")\n",
    "builder.add_edge(\"step_3\", END)\n",
    "\n",
    "# Compile the graph with memory\n",
    "graph = builder.compile(checkpointer=memory)\n",
    "\n",
    "# View\n",
    "display(Image(graph.get_graph().draw_mermaid_png()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad5521e1-0e58-42c5-9282-ff96f24ee6f6",
   "metadata": {},
   "source": [
    "## Run the graph with dynamic interrupt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83692c63-5c65-4562-9c65-5ad1935e339f",
   "metadata": {},
   "source": [
    "First, let's run the graph with an input that <= 5 characters long. This should safely ignore the interrupt condition we defined and return the original input at the end of the graph execution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b2d281f1-3349-4378-8918-7665fa7a7457",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'input': 'hello'}\n",
      "---Step 1---\n",
      "{'input': 'hello'}\n",
      "---Step 2---\n",
      "{'input': 'hello'}\n",
      "---Step 3---\n",
      "{'input': 'hello'}\n"
     ]
    }
   ],
   "source": [
    "initial_input = {\"input\": \"hello\"}\n",
    "thread_config = {\"configurable\": {\"thread_id\": \"1\"}}\n",
    "\n",
    "for event in graph.stream(initial_input, thread_config, stream_mode=\"values\"):\n",
    "    print(event)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b66b926-47eb-401b-b37b-d80269d7214c",
   "metadata": {},
   "source": [
    "If we inspect the graph at this point, we can see that there are no more tasks left to run and that the graph indeed finished execution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4eac1455-e7ef-4a32-8c14-0d5789409689",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "()\n",
      "()\n"
     ]
    }
   ],
   "source": [
    "state = graph.get_state(thread_config)\n",
    "print(state.next)\n",
    "print(state.tasks)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "f8e03817-2135-4fb3-b881-fd6d2c378ccf",
   "metadata": {},
   "source": [
    "Now, let's run the graph with an input that's longer than 5 characters. This should trigger the dynamic interrupt we defined via raising a `NodeInterrupt` error inside the `step_2` node."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c06192ad-13a4-4d2e-8e30-f1c08578fe77",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'input': 'hello world'}\n",
      "---Step 1---\n",
      "{'input': 'hello world'}\n",
      "{'__interrupt__': (Interrupt(value='Received input that is longer than 5 characters: hello world', resumable=False, ns=None),)}\n"
     ]
    }
   ],
   "source": [
    "initial_input = {\"input\": \"hello world\"}\n",
    "thread_config = {\"configurable\": {\"thread_id\": \"2\"}}\n",
    "\n",
    "# Run the graph until the first interruption\n",
    "for event in graph.stream(initial_input, thread_config, stream_mode=\"values\"):\n",
    "    print(event)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "173fd4f1-db97-44bb-a9e5-435ed042e3a3",
   "metadata": {},
   "source": [
    "We can see that the graph now stopped while executing `step_2`. If we inspect the graph state at this point, we can see the information on what node is set to execute next (`step_2`), as well as what node raised the interrupt (also `step_2`), and additional information about the interrupt."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2058593c-178e-4a23-a4c4-860d4a9c2198",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('step_2',)\n",
      "(PregelTask(id='35aff9f0-f802-eb95-9285-09849cdfd383', name='step_2', path=('__pregel_pull', 'step_2'), error=None, interrupts=(), state=None, result=None),)\n"
     ]
    }
   ],
   "source": [
    "state = graph.get_state(thread_config)\n",
    "print(state.next)\n",
    "print(state.tasks)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc36d1be-ae2e-49c8-a17f-2b27be09618a",
   "metadata": {},
   "source": [
    "If we try to resume the graph from the breakpoint, we will simply interrupt again as our inputs & graph state haven't changed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "872e7a69-9784-4f81-90c6-6b6af2fa6480",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'input': 'hello world'}\n",
      "{'__interrupt__': (Interrupt(value='Received input that is longer than 5 characters: hello world', resumable=False, ns=None),)}\n"
     ]
    }
   ],
   "source": [
    "# NOTE: to resume the graph from a dynamic interrupt we use the same syntax as with regular interrupts -- we pass None as the input\n",
    "for event in graph.stream(None, thread_config, stream_mode=\"values\"):\n",
    "    print(event)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3275f899-7039-4029-8814-0bb5c33fabfe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('step_2',)\n",
      "(PregelTask(id='35aff9f0-f802-eb95-9285-09849cdfd383', name='step_2', path=('__pregel_pull', 'step_2'), error=None, interrupts=(), state=None, result=None),)\n"
     ]
    }
   ],
   "source": [
    "state = graph.get_state(thread_config)\n",
    "print(state.next)\n",
    "print(state.tasks)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5862dea-2af2-48cb-9889-979b6c6af6aa",
   "metadata": {},
   "source": [
    "## Update the graph state"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8724ef6-877a-44b9-b96a-ae81efa2d9e4",
   "metadata": {},
   "source": [
    "To get around it, we can do several things. \n",
    "\n",
    "First, we could simply run the graph on a different thread with a shorter input, like we did in the beginning. Alternatively, if we want to resume the graph execution from the breakpoint, we can update the state to have an input that's shorter than 5 characters (the condition for our interrupt)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2ba8dc8d-b90e-45f5-92cd-2192fc66f270",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'input': 'foo'}\n",
      "---Step 2---\n",
      "{'input': 'foo'}\n",
      "---Step 3---\n",
      "{'input': 'foo'}\n",
      "()\n",
      "{'input': 'foo'}\n"
     ]
    }
   ],
   "source": [
    "# NOTE: this update will be applied as of the last successful node before the interrupt, i.e. `step_1`, right before the node with an interrupt\n",
    "graph.update_state(config=thread_config, values={\"input\": \"foo\"})\n",
    "for event in graph.stream(None, thread_config, stream_mode=\"values\"):\n",
    "    print(event)\n",
    "\n",
    "state = graph.get_state(thread_config)\n",
    "print(state.next)\n",
    "print(state.values)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f16980e-aef4-45c9-85eb-955568a93c5b",
   "metadata": {},
   "source": [
    "You can also update the state **as node `step_2`** (interrupted node) which would skip over that node altogether"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9a48e564-d979-4ac2-b815-c667345a9f07",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'input': 'hello world'}\n",
      "---Step 1---\n",
      "{'input': 'hello world'}\n",
      "{'__interrupt__': (Interrupt(value='Received input that is longer than 5 characters: hello world', resumable=False, ns=None),)}\n"
     ]
    }
   ],
   "source": [
    "initial_input = {\"input\": \"hello world\"}\n",
    "thread_config = {\"configurable\": {\"thread_id\": \"3\"}}\n",
    "\n",
    "# Run the graph until the first interruption\n",
    "for event in graph.stream(initial_input, thread_config, stream_mode=\"values\"):\n",
    "    print(event)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "17f973ab-00ce-4f16-a452-641e76625fde",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'input': 'hello world'}\n",
      "---Step 3---\n",
      "{'input': 'hello world'}\n",
      "()\n",
      "{'input': 'hello world'}\n"
     ]
    }
   ],
   "source": [
    "# NOTE: this update will skip the node `step_2` altogether\n",
    "graph.update_state(config=thread_config, values=None, as_node=\"step_2\")\n",
    "for event in graph.stream(None, thread_config, stream_mode=\"values\"):\n",
    "    print(event)\n",
    "\n",
    "state = graph.get_state(thread_config)\n",
    "print(state.next)\n",
    "print(state.values)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

================
File: examples/human_in_the_loop/edit-graph-state.ipynb
================
{
 "cells": [
  {
   "attachments": {
    "1a5388fe-fa93-4607-a009-d71fe2223f5a.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "51466c8d-8ce4-4b3d-be4e-18fdbeda5f53",
   "metadata": {},
   "source": [
    "# How to edit graph state\n",
    "\n",
    "!!! tip \"Prerequisites\"\n",
    "\n",
    "    * [Human-in-the-loop](../../../concepts/human_in_the_loop)\n",
    "    * [Breakpoints](../../../concepts/breakpoints)\n",
    "    * [LangGraph Glossary](../../../concepts/low_level)\n",
    "\n",
    "Human-in-the-loop (HIL) interactions are crucial for [agentic systems](https://langchain-ai.github.io/langgraph/concepts/agentic_concepts/#human-in-the-loop). Manually updating the graph state a common HIL interaction pattern, allowing the human to edit actions (e.g., what tool is being called or how it is being called).\n",
    "\n",
    "We can implement this in LangGraph using a [breakpoint](https://langchain-ai.github.io/langgraph/how-tos/human_in_the_loop/breakpoints/): breakpoints allow us to interrupt graph execution before a specific step. At this breakpoint, we can manually update the graph state and then resume from that spot to continue.  \n",
    "\n",
    "![edit_graph_state.png](attachment:1a5388fe-fa93-4607-a009-d71fe2223f5a.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cbd446a-808f-4394-be92-d45ab818953c",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "First we need to install the packages required"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "af4ce0ba-7596-4e5f-8bf8-0b0bd6e62833",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture --no-stderr\n",
    "%pip install --quiet -U langgraph langchain_anthropic"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0abe11f4-62ed-4dc4-8875-3db21e260d1d",
   "metadata": {},
   "source": [
    "Next, we need to set API keys for Anthropic (the LLM we will use)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c903a1cf-2977-4e2d-ad7d-8b3946821d89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "ANTHROPIC_API_KEY:  ········\n"
     ]
    }
   ],
   "source": [
    "import getpass\n",
    "import os\n",
    "\n",
    "\n",
    "def _set_env(var: str):\n",
    "    if not os.environ.get(var):\n",
    "        os.environ[var] = getpass.getpass(f\"{var}: \")\n",
    "\n",
    "\n",
    "_set_env(\"ANTHROPIC_API_KEY\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0ed46a8-effe-4596-b0e1-a6a29ee16f5c",
   "metadata": {},
   "source": [
    "<div class=\"admonition tip\">\n",
    "    <p class=\"admonition-title\">Set up <a href=\"https://smith.langchain.com\">LangSmith</a> for LangGraph development</p>\n",
    "    <p style=\"padding-top: 5px;\">\n",
    "        Sign up for LangSmith to quickly spot issues and improve the performance of your LangGraph projects. LangSmith lets you use trace data to debug, test, and monitor your LLM apps built with LangGraph — read more about how to get started <a href=\"https://docs.smith.langchain.com\">here</a>. \n",
    "    </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "035e567c-db5c-4085-ba4e-5b3814561c21",
   "metadata": {},
   "source": [
    "## Simple Usage\n",
    "\n",
    "Let's look at very basic usage of this.\n",
    "\n",
    "Below, we do three things:\n",
    "\n",
    "1) We specify the [breakpoint](https://langchain-ai.github.io/langgraph/concepts/low_level/#breakpoints) using `interrupt_before` a specified step (node).\n",
    "\n",
    "2) We set up a [checkpointer](https://langchain-ai.github.io/langgraph/concepts/low_level/#checkpointer) to save the state of the graph up until this node.\n",
    "\n",
    "3) We use `.update_state` to update the state of the graph."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "85e452f8-f33a-4ead-bb4d-7386cdba8edc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from typing_extensions import TypedDict\n",
    "from langgraph.graph import StateGraph, START, END\n",
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "from IPython.display import Image, display\n",
    "\n",
    "# Set up Redis connection\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "memory = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    memory = cp\n",
    "\n",
    "class State(TypedDict):\n",
    "    input: str\n",
    "\n",
    "\n",
    "def step_1(state):\n",
    "    print(\"---Step 1---\")\n",
    "    pass\n",
    "\n",
    "\n",
    "def step_2(state):\n",
    "    print(\"---Step 2---\")\n",
    "    pass\n",
    "\n",
    "\n",
    "def step_3(state):\n",
    "    print(\"---Step 3---\")\n",
    "    pass\n",
    "\n",
    "\n",
    "builder = StateGraph(State)\n",
    "builder.add_node(\"step_1\", step_1)\n",
    "builder.add_node(\"step_2\", step_2)\n",
    "builder.add_node(\"step_3\", step_3)\n",
    "builder.add_edge(START, \"step_1\")\n",
    "builder.add_edge(\"step_1\", \"step_2\")\n",
    "builder.add_edge(\"step_2\", \"step_3\")\n",
    "builder.add_edge(\"step_3\", END)\n",
    "\n",
    "# Add\n",
    "graph = builder.compile(checkpointer=memory, interrupt_before=[\"step_2\"])\n",
    "\n",
    "# View\n",
    "display(Image(graph.get_graph().draw_mermaid_png()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1b3aa6fc-c7fb-4819-8d7f-ba6057cc4edf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'input': 'hello world'}\n",
      "---Step 1---\n"
     ]
    }
   ],
   "source": [
    "# Input\n",
    "initial_input = {\"input\": \"hello world\"}\n",
    "\n",
    "# Thread\n",
    "thread = {\"configurable\": {\"thread_id\": \"1\"}}\n",
    "\n",
    "# Run the graph until the first interruption\n",
    "for event in graph.stream(initial_input, thread, stream_mode=\"values\"):\n",
    "    print(event)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ab27716-e861-4ba3-9d7d-90694013e3c4",
   "metadata": {},
   "source": [
    "Now, we can just manually update our graph state - "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "49d61230-e5dc-4272-b8ab-09b0af30f088",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current state!\n",
      "{'input': 'hello world'}\n",
      "---\n",
      "---\n",
      "Updated state!\n",
      "{'input': 'hello universe!'}\n"
     ]
    }
   ],
   "source": [
    "print(\"Current state!\")\n",
    "print(graph.get_state(thread).values)\n",
    "\n",
    "graph.update_state(thread, {\"input\": \"hello universe!\"})\n",
    "\n",
    "print(\"---\\n---\\nUpdated state!\")\n",
    "print(graph.get_state(thread).values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cf77f6eb-4cc0-4615-a095-eb5ae7027b7a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'input': 'hello universe!'}\n",
      "---Step 2---\n",
      "---Step 3---\n"
     ]
    }
   ],
   "source": [
    "# Continue the graph execution\n",
    "for event in graph.stream(None, thread, stream_mode=\"values\"):\n",
    "    print(event)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3333b771",
   "metadata": {},
   "source": [
    "## Agent\n",
    "\n",
    "In the context of agents, updating state is useful for things like editing tool calls.\n",
    " \n",
    "To show this, we will build a relatively simple ReAct-style agent that does tool calling. \n",
    "\n",
    "We will use Anthropic's models and a fake tool (just for demo purposes)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6098e5cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m20:11:49\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n",
      "\u001b[32m20:11:49\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n",
      "\u001b[32m20:11:49\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n"
     ]
    }
   ],
   "source": [
    "# Set up the tool\n",
    "from langchain_anthropic import ChatAnthropic\n",
    "from langchain_core.tools import tool\n",
    "from langgraph.graph import MessagesState, START, END, StateGraph\n",
    "from langgraph.prebuilt import ToolNode\n",
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "\n",
    "\n",
    "@tool\n",
    "def search(query: str):\n",
    "    \"\"\"Call to surf the web.\"\"\"\n",
    "    # This is a placeholder for the actual implementation\n",
    "    # Don't let the LLM know this though 😊\n",
    "    return [\n",
    "        \"It's sunny in San Francisco, but you better look out if you're a Gemini 😈.\"\n",
    "    ]\n",
    "\n",
    "\n",
    "tools = [search]\n",
    "tool_node = ToolNode(tools)\n",
    "\n",
    "# Set up the model\n",
    "\n",
    "model = ChatAnthropic(model=\"claude-3-5-sonnet-20240620\")\n",
    "model = model.bind_tools(tools)\n",
    "\n",
    "\n",
    "# Define nodes and conditional edges\n",
    "\n",
    "\n",
    "# Define the function that determines whether to continue or not\n",
    "def should_continue(state):\n",
    "    messages = state[\"messages\"]\n",
    "    last_message = messages[-1]\n",
    "    # If there is no function call, then we finish\n",
    "    if not last_message.tool_calls:\n",
    "        return \"end\"\n",
    "    # Otherwise if there is, we continue\n",
    "    else:\n",
    "        return \"continue\"\n",
    "\n",
    "\n",
    "# Define the function that calls the model\n",
    "def call_model(state):\n",
    "    messages = state[\"messages\"]\n",
    "    response = model.invoke(messages)\n",
    "    # We return a list, because this will get added to the existing list\n",
    "    return {\"messages\": [response]}\n",
    "\n",
    "\n",
    "# Define a new graph\n",
    "workflow = StateGraph(MessagesState)\n",
    "\n",
    "# Define the two nodes we will cycle between\n",
    "workflow.add_node(\"agent\", call_model)\n",
    "workflow.add_node(\"action\", tool_node)\n",
    "\n",
    "# Set the entrypoint as `agent`\n",
    "# This means that this node is the first one called\n",
    "workflow.add_edge(START, \"agent\")\n",
    "\n",
    "# We now add a conditional edge\n",
    "workflow.add_conditional_edges(\n",
    "    # First, we define the start node. We use `agent`.\n",
    "    # This means these are the edges taken after the `agent` node is called.\n",
    "    \"agent\",\n",
    "    # Next, we pass in the function that will determine which node is called next.\n",
    "    should_continue,\n",
    "    # Finally we pass in a mapping.\n",
    "    # The keys are strings, and the values are other nodes.\n",
    "    # END is a special node marking that the graph should finish.\n",
    "    # What will happen is we will call `should_continue`, and then the output of that\n",
    "    # will be matched against the keys in this mapping.\n",
    "    # Based on which one it matches, that node will then be called.\n",
    "    {\n",
    "        # If `tools`, then we call the tool node.\n",
    "        \"continue\": \"action\",\n",
    "        # Otherwise we finish.\n",
    "        \"end\": END,\n",
    "    },\n",
    ")\n",
    "\n",
    "# We now add a normal edge from `tools` to `agent`.\n",
    "# This means that after `tools` is called, `agent` node is called next.\n",
    "workflow.add_edge(\"action\", \"agent\")\n",
    "\n",
    "# Set up Redis connection\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "memory = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    memory = cp\n",
    "\n",
    "# Finally, we compile it!\n",
    "# This compiles it into a LangChain Runnable,\n",
    "# meaning you can use it as you would any other runnable\n",
    "\n",
    "# We add in `interrupt_before=[\"action\"]`\n",
    "# This will add a breakpoint before the `action` node is called\n",
    "app = workflow.compile(checkpointer=memory, interrupt_before=[\"action\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a1b56c5-bd61-4192-8bdb-458a1e9f0159",
   "metadata": {},
   "source": [
    "## Interacting with the Agent\n",
    "\n",
    "We can now interact with the agent and see that it stops before calling a tool.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cfd140f0-a5a6-4697-8115-322242f197b5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "search for the weather in sf now\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "[{'text': \"Certainly! I'll search for the current weather in San Francisco for you. Let me use the search function to find this information.\", 'type': 'text'}, {'id': 'toolu_014PLid9D7LESgu1CGXJ39Mu', 'input': {'query': 'current weather in San Francisco'}, 'name': 'search', 'type': 'tool_use'}]\n",
      "Tool Calls:\n",
      "  search (toolu_014PLid9D7LESgu1CGXJ39Mu)\n",
      " Call ID: toolu_014PLid9D7LESgu1CGXJ39Mu\n",
      "  Args:\n",
      "    query: current weather in San Francisco\n"
     ]
    }
   ],
   "source": [
    "from langchain_core.messages import HumanMessage\n",
    "\n",
    "thread = {\"configurable\": {\"thread_id\": \"3\"}}\n",
    "inputs = [HumanMessage(content=\"search for the weather in sf now\")]\n",
    "for event in app.stream({\"messages\": inputs}, thread, stream_mode=\"values\"):\n",
    "    event[\"messages\"][-1].pretty_print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78e3f5b9-9700-42b1-863f-c404861f8620",
   "metadata": {},
   "source": [
    "**Edit**\n",
    "\n",
    "We can now update the state accordingly. Let's modify the tool call to have the query `\"current weather in SF\"`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1aa7b1b9-9322-4815-bc0d-eb083870ac15",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'configurable': {'thread_id': '3',\n",
       "  'checkpoint_ns': '',\n",
       "  'checkpoint_id': '1f025362-f036-64d5-8000-22b48256a474'}}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# First, lets get the current state\n",
    "current_state = app.get_state(thread)\n",
    "\n",
    "# Let's now get the last message in the state\n",
    "# This is the one with the tool calls that we want to update\n",
    "last_message = current_state.values[\"messages\"][-1]\n",
    "\n",
    "# Let's now update the args for that tool call\n",
    "last_message.tool_calls[0][\"args\"] = {\"query\": \"current weather in SF\"}\n",
    "\n",
    "# Let's now call `update_state` to pass in this message in the `messages` key\n",
    "# This will get treated as any other update to the state\n",
    "# It will get passed to the reducer function for the `messages` key\n",
    "# That reducer function will use the ID of the message to update it\n",
    "# It's important that it has the right ID! Otherwise it would get appended\n",
    "# as a new message\n",
    "app.update_state(thread, {\"messages\": last_message})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0dcc5457-1ba1-4cba-ac41-da5c67cc67e5",
   "metadata": {},
   "source": [
    "Let's now check the current state of the app to make sure it got updated accordingly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a3fcf2bd-f881-49fe-b20e-ad16e6819bc6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'name': 'search',\n",
       "  'args': {'query': 'current weather in SF'},\n",
       "  'id': 'toolu_014PLid9D7LESgu1CGXJ39Mu',\n",
       "  'type': 'tool_call'}]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "current_state = app.get_state(thread).values[\"messages\"][-1].tool_calls\n",
    "current_state"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1bca3814-db08-4b0b-8c0c-95b6c5440c81",
   "metadata": {},
   "source": [
    "**Resume**\n",
    "\n",
    "We can now call the agent again with no inputs to continue, ie. run the tool as requested. We can see from the logs that it passes in the update args to the tool."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "51923913-20f7-4ee1-b9ba-d01f5fb2869b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "[{'text': \"Certainly! I'll search for the current weather in San Francisco for you. Let me use the search function to find this information.\", 'type': 'text'}, {'id': 'toolu_014PLid9D7LESgu1CGXJ39Mu', 'input': {'query': 'current weather in San Francisco'}, 'name': 'search', 'type': 'tool_use'}]\n",
      "Tool Calls:\n",
      "  search (toolu_014PLid9D7LESgu1CGXJ39Mu)\n",
      " Call ID: toolu_014PLid9D7LESgu1CGXJ39Mu\n",
      "  Args:\n",
      "    query: current weather in SF\n",
      "=================================\u001b[1m Tool Message \u001b[0m=================================\n",
      "Name: search\n",
      "\n",
      "[\"It's sunny in San Francisco, but you better look out if you're a Gemini 😈.\"]\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "Based on the search results, I can provide you with information about the current weather in San Francisco:\n",
      "\n",
      "The weather in San Francisco is currently sunny. This means it's a clear day with plenty of sunshine.\n",
      "\n",
      "It's worth noting that the search result included an unusual comment about Gemini, which seems unrelated to the weather. We'll focus on the weather information, which is what you asked about.\n",
      "\n",
      "Is there anything specific about the weather in San Francisco that you'd like to know more about, such as temperature, wind conditions, or forecast for later today?\n"
     ]
    }
   ],
   "source": [
    "for event in app.stream(None, thread, stream_mode=\"values\"):\n",
    "    event[\"messages\"][-1].pretty_print()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

================
File: examples/human_in_the_loop/review-tool-calls-openai.ipynb
================
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# How to Review Tool Calls (OpenAI Version)\n",
    "\n",
    "!!! tip \"Prerequisites\"\n",
    "\n",
    "    This guide assumes familiarity with the following concepts:\n",
    "\n",
    "    * [Tool calling](https://python.langchain.com/docs/concepts/tool_calling/)\n",
    "    * [Human-in-the-loop](../../../concepts/human_in_the_loop)\n",
    "    * [LangGraph Glossary](../../../concepts/low_level)      \n",
    "\n",
    "Human-in-the-loop (HIL) interactions are crucial for [agentic systems](../../../concepts/agentic_concepts). A common pattern is to add some human in the loop step after certain tool calls. These tool calls often lead to either a function call or saving of some information. Examples include:\n",
    "\n",
    "- A tool call to execute SQL, which will then be run by the tool\n",
    "- A tool call to generate a summary, which will then be saved to the State of the graph\n",
    "\n",
    "Note that using tool calls is common **whether actually calling tools or not**.\n",
    "\n",
    "There are typically a few different interactions you may want to do here:\n",
    "\n",
    "1. Approve the tool call and continue\n",
    "2. Modify the tool call manually and then continue\n",
    "3. Give natural language feedback, and then pass that back to the agent\n",
    "\n",
    "\n",
    "We can implement these in LangGraph using the [`interrupt()`][langgraph.types.interrupt] function. `interrupt` allows us to stop graph execution to collect input from a user and continue execution with collected input:\n",
    "\n",
    "\n",
    "```python\n",
    "def human_review_node(state) -> Command[Literal[\"call_llm\", \"run_tool\"]]:\n",
    "    # this is the value we'll be providing via Command(resume=<human_review>)\n",
    "    human_review = interrupt(\n",
    "        {\n",
    "            \"question\": \"Is this correct?\",\n",
    "            # Surface tool calls for review\n",
    "            \"tool_call\": tool_call\n",
    "        }\n",
    "    )\n",
    "    \n",
    "    review_action, review_data = human_review\n",
    "    \n",
    "    # Approve the tool call and continue\n",
    "    if review_action == \"continue\":\n",
    "        return Command(goto=\"run_tool\")\n",
    "    \n",
    "    # Modify the tool call manually and then continue\n",
    "    elif review_action == \"update\":\n",
    "        ...\n",
    "        updated_msg = get_updated_msg(review_data)\n",
    "        return Command(goto=\"run_tool\", update={\"messages\": [updated_message]})\n",
    "\n",
    "    # Give natural language feedback, and then pass that back to the agent\n",
    "    elif review_action == \"feedback\":\n",
    "        ...\n",
    "        feedback_msg = get_feedback_msg(review_data)\n",
    "        return Command(goto=\"call_llm\", update={\"messages\": [feedback_msg]})\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "First we need to install the packages required"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture --no-stderr\n",
    "%pip install --quiet -U langgraph langchain-openai \"httpx>=0.24.0,<1.0.0\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we need to set API keys for OpenAI (the LLM we will use in this notebook)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "OPENAI_API_KEY:  ········\n"
     ]
    }
   ],
   "source": [
    "import getpass\n",
    "import os\n",
    "\n",
    "\n",
    "def _set_env(var: str):\n",
    "    if not os.environ.get(var):\n",
    "        os.environ[var] = getpass.getpass(f\"{var}: \")\n",
    "\n",
    "\n",
    "_set_env(\"OPENAI_API_KEY\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"admonition tip\">\n",
    "    <p class=\"admonition-title\">Set up <a href=\"https://smith.langchain.com\">LangSmith</a> for LangGraph development</p>\n",
    "    <p style=\"padding-top: 5px;\">\n",
    "        Sign up for LangSmith to quickly spot issues and improve the performance of your LangGraph projects. LangSmith lets you use trace data to debug, test, and monitor your LLM apps built with LangGraph — read more about how to get started <a href=\"https://docs.smith.langchain.com\">here</a>. \n",
    "    </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simple Usage\n",
    "\n",
    "Let's set up a very simple graph that facilitates this.\n",
    "First, we will have an LLM call that decides what action to take.\n",
    "Then we go to a human node. This node actually doesn't do anything - the idea is that we interrupt before this node and then apply any updates to the state.\n",
    "After that, we check the state and either route back to the LLM or to the correct tool.\n",
    "\n",
    "Let's see this in action!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from typing_extensions import TypedDict, Literal\n",
    "from langgraph.graph import StateGraph, START, END, MessagesState\n",
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "from langgraph.types import Command, interrupt\n",
    "from langchain_openai import ChatOpenAI\n",
    "from langchain_core.tools import tool\n",
    "from langchain_core.messages import AIMessage\n",
    "from IPython.display import Image, display\n",
    "\n",
    "# Set up Redis connection\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "memory = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    memory = cp\n",
    "\n",
    "@tool\n",
    "def weather_search(city: str):\n",
    "    \"\"\"Search for the weather\"\"\"\n",
    "    print(\"----\")\n",
    "    print(f\"Searching for: {city}\")\n",
    "    print(\"----\")\n",
    "    return \"Sunny!\"\n",
    "\n",
    "# Use OpenAI with tool binding\n",
    "model = ChatOpenAI(model=\"gpt-4o\").bind_tools([weather_search])\n",
    "\n",
    "class State(MessagesState):\n",
    "    \"\"\"Simple state.\"\"\"\n",
    "\n",
    "\n",
    "def call_llm(state):\n",
    "    return {\"messages\": [model.invoke(state[\"messages\"])]}\n",
    "\n",
    "\n",
    "def human_review_node(state) -> Command[Literal[\"call_llm\", \"run_tool\"]]:\n",
    "    last_message = state[\"messages\"][-1]\n",
    "    \n",
    "    # Get the tool call from OpenAI format\n",
    "    tool_call = last_message.tool_calls[-1] if hasattr(last_message, \"tool_calls\") and last_message.tool_calls else None\n",
    "    \n",
    "    # this is the value we'll be providing via Command(resume=<human_review>)\n",
    "    human_review = interrupt(\n",
    "        {\n",
    "            \"question\": \"Is this correct?\",\n",
    "            # Surface tool calls for review\n",
    "            \"tool_call\": tool_call,\n",
    "        }\n",
    "    )\n",
    "\n",
    "    review_action = human_review[\"action\"]\n",
    "    review_data = human_review.get(\"data\")\n",
    "\n",
    "    # if approved, call the tool\n",
    "    if review_action == \"continue\":\n",
    "        return Command(goto=\"run_tool\")\n",
    "\n",
    "    # update the AI message AND call tools\n",
    "    elif review_action == \"update\":\n",
    "        # Handle OpenAI format\n",
    "        updated_message = {\n",
    "            \"role\": \"ai\",\n",
    "            \"content\": last_message.content,\n",
    "            \"tool_calls\": [\n",
    "                {\n",
    "                    \"id\": tool_call[\"id\"],\n",
    "                    \"name\": tool_call[\"name\"],\n",
    "                    # This the update provided by the human\n",
    "                    \"args\": review_data,\n",
    "                }\n",
    "            ],\n",
    "            # This is important - this needs to be the same as the message you replacing!\n",
    "            # Otherwise, it will show up as a separate message\n",
    "            \"id\": last_message.id,\n",
    "        }\n",
    "        \n",
    "        return Command(goto=\"run_tool\", update={\"messages\": [updated_message]})\n",
    "\n",
    "    # provide feedback to LLM\n",
    "    elif review_action == \"feedback\":\n",
    "        # NOTE: we're adding feedback message as a ToolMessage\n",
    "        # to preserve the correct order in the message history\n",
    "        # (AI messages with tool calls need to be followed by tool call messages)\n",
    "        tool_message = {\n",
    "            \"role\": \"tool\",\n",
    "            # This is our natural language feedback\n",
    "            \"content\": review_data,\n",
    "            \"name\": tool_call[\"name\"],\n",
    "            \"tool_call_id\": tool_call[\"id\"],\n",
    "        }\n",
    "        return Command(goto=\"call_llm\", update={\"messages\": [tool_message]})\n",
    "\n",
    "\n",
    "def run_tool(state):\n",
    "    new_messages = []\n",
    "    tools = {\"weather_search\": weather_search}\n",
    "    \n",
    "    # Get tool calls from OpenAI format\n",
    "    last_message = state[\"messages\"][-1]\n",
    "    tool_calls = last_message.tool_calls if hasattr(last_message, \"tool_calls\") else []\n",
    "    \n",
    "    for tool_call in tool_calls:\n",
    "        tool_name = tool_call[\"name\"]\n",
    "        if tool_name in tools:\n",
    "            tool = tools[tool_name]\n",
    "            result = tool.invoke(tool_call[\"args\"])\n",
    "            new_messages.append(\n",
    "                {\n",
    "                    \"role\": \"tool\",\n",
    "                    \"name\": tool_call[\"name\"],\n",
    "                    \"content\": result,\n",
    "                    \"tool_call_id\": tool_call[\"id\"],\n",
    "                }\n",
    "            )\n",
    "    return {\"messages\": new_messages}\n",
    "\n",
    "\n",
    "def route_after_llm(state) -> Literal[END, \"human_review_node\"]:\n",
    "    last_message = state[\"messages\"][-1]\n",
    "    \n",
    "    # Check for OpenAI tool calls\n",
    "    has_tool_calls = hasattr(last_message, \"tool_calls\") and len(last_message.tool_calls) > 0\n",
    "    \n",
    "    if has_tool_calls:\n",
    "        return \"human_review_node\"\n",
    "    else:\n",
    "        return END\n",
    "\n",
    "\n",
    "builder = StateGraph(State)\n",
    "builder.add_node(call_llm)\n",
    "builder.add_node(run_tool)\n",
    "builder.add_node(human_review_node)\n",
    "builder.add_edge(START, \"call_llm\")\n",
    "builder.add_conditional_edges(\"call_llm\", route_after_llm)\n",
    "builder.add_edge(\"run_tool\", \"call_llm\")\n",
    "\n",
    "# Add\n",
    "graph = builder.compile(checkpointer=memory)\n",
    "\n",
    "# View\n",
    "display(Image(graph.get_graph().draw_mermaid_png()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example with no review\n",
    "\n",
    "Let's look at an example when no review is required (because no tools are called)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'call_llm': {'messages': [AIMessage(content='Hello! How can I assist you today?', additional_kwargs={'refusal': None}, response_metadata={'token_usage': {'completion_tokens': 11, 'prompt_tokens': 44, 'total_tokens': 55, 'completion_tokens_details': {'accepted_prediction_tokens': 0, 'audio_tokens': 0, 'reasoning_tokens': 0, 'rejected_prediction_tokens': 0}, 'prompt_tokens_details': {'audio_tokens': 0, 'cached_tokens': 0}}, 'model_name': 'gpt-4o-2024-08-06', 'system_fingerprint': 'fp_90122d973c', 'id': 'chatcmpl-BRluSv7cMhtqsKGNfpuvpygg05aLl', 'finish_reason': 'stop', 'logprobs': None}, id='run-0b664c20-9e59-4c95-a77f-fdc585029ea4-0', usage_metadata={'input_tokens': 44, 'output_tokens': 11, 'total_tokens': 55, 'input_token_details': {'audio': 0, 'cache_read': 0}, 'output_token_details': {'audio': 0, 'reasoning': 0}})]}}\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Input\n",
    "initial_input = {\"messages\": [{\"role\": \"user\", \"content\": \"hi!\"}]}\n",
    "\n",
    "# Thread\n",
    "thread = {\"configurable\": {\"thread_id\": \"openai-1\"}}\n",
    "\n",
    "# Run the graph until the first interruption\n",
    "for event in graph.stream(initial_input, thread, stream_mode=\"updates\"):\n",
    "    print(event)\n",
    "    print(\"\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we check the state, we can see that it is finished"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example of approving tool\n",
    "\n",
    "Let's now look at what it looks like to approve a tool call"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'call_llm': {'messages': [AIMessage(content='', additional_kwargs={'tool_calls': [{'id': 'call_TwU0AILv55GWgEe9cKwKmQyK', 'function': {'arguments': '{\"city\":\"San Francisco\"}', 'name': 'weather_search'}, 'type': 'function'}], 'refusal': None}, response_metadata={'token_usage': {'completion_tokens': 16, 'prompt_tokens': 49, 'total_tokens': 65, 'completion_tokens_details': {'accepted_prediction_tokens': 0, 'audio_tokens': 0, 'reasoning_tokens': 0, 'rejected_prediction_tokens': 0}, 'prompt_tokens_details': {'audio_tokens': 0, 'cached_tokens': 0}}, 'model_name': 'gpt-4o-2024-08-06', 'system_fingerprint': 'fp_90122d973c', 'id': 'chatcmpl-BRluSoo0gyDHx1uB5SX2hBXH8d6vU', 'finish_reason': 'tool_calls', 'logprobs': None}, id='run-2929f867-5dac-463f-9cba-bce36f666f10-0', tool_calls=[{'name': 'weather_search', 'args': {'city': 'San Francisco'}, 'id': 'call_TwU0AILv55GWgEe9cKwKmQyK', 'type': 'tool_call'}], usage_metadata={'input_tokens': 49, 'output_tokens': 16, 'total_tokens': 65, 'input_token_details': {'audio': 0, 'cache_read': 0}, 'output_token_details': {'audio': 0, 'reasoning': 0}})]}}\n",
      "\n",
      "\n",
      "{'__interrupt__': (Interrupt(value={'question': 'Is this correct?', 'tool_call': {'name': 'weather_search', 'args': {'city': 'San Francisco'}, 'id': 'call_TwU0AILv55GWgEe9cKwKmQyK', 'type': 'tool_call'}}, resumable=True, ns=['human_review_node:c9df3a9e-497b-d78d-0759-90a1cad5c416']),)}\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Input\n",
    "initial_input = {\"messages\": [{\"role\": \"user\", \"content\": \"what's the weather in sf?\"}]}\n",
    "\n",
    "# Thread\n",
    "thread = {\"configurable\": {\"thread_id\": \"openai-2\"}}\n",
    "\n",
    "# Run the graph until the first interruption\n",
    "for event in graph.stream(initial_input, thread, stream_mode=\"updates\"):\n",
    "    print(event)\n",
    "    print(\"\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we now check, we can see that it is waiting on human review"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pending Executions!\n",
      "('human_review_node',)\n"
     ]
    }
   ],
   "source": [
    "print(\"Pending Executions!\")\n",
    "print(graph.get_state(thread).next)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To approve the tool call, we can just continue the thread with no edits. To do so, we need to let `human_review_node` know what value to use for the `human_review` variable we defined inside the node. We can provide this value by invoking the graph with a `Command(resume=<human_review>)` input.  Since we're approving the tool call, we'll provide `resume` value of `{\"action\": \"continue\"}` to navigate to `run_tool` node:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'human_review_node': None}\n",
      "\n",
      "\n",
      "----\n",
      "Searching for: San Francisco\n",
      "----\n",
      "{'run_tool': {'messages': [{'role': 'tool', 'name': 'weather_search', 'content': 'Sunny!', 'tool_call_id': 'call_TwU0AILv55GWgEe9cKwKmQyK'}]}}\n",
      "\n",
      "\n",
      "{'call_llm': {'messages': [AIMessage(content='The weather in San Francisco is currently sunny!', additional_kwargs={'refusal': None}, response_metadata={'token_usage': {'completion_tokens': 11, 'prompt_tokens': 74, 'total_tokens': 85, 'completion_tokens_details': {'accepted_prediction_tokens': 0, 'audio_tokens': 0, 'reasoning_tokens': 0, 'rejected_prediction_tokens': 0}, 'prompt_tokens_details': {'audio_tokens': 0, 'cached_tokens': 0}}, 'model_name': 'gpt-4o-2024-08-06', 'system_fingerprint': 'fp_f5bdcc3276', 'id': 'chatcmpl-BRluTeL16wIx1Q8gc6vQvm1fmfrPv', 'finish_reason': 'stop', 'logprobs': None}, id='run-26f957fa-6b0c-4652-9fe9-6392afe31aa8-0', usage_metadata={'input_tokens': 74, 'output_tokens': 11, 'total_tokens': 85, 'input_token_details': {'audio': 0, 'cache_read': 0}, 'output_token_details': {'audio': 0, 'reasoning': 0}})]}}\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for event in graph.stream(\n",
    "    # provide value\n",
    "    Command(resume={\"action\": \"continue\"}),\n",
    "    thread,\n",
    "    stream_mode=\"updates\",\n",
    "):\n",
    "    print(event)\n",
    "    print(\"\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Edit Tool Call\n",
    "\n",
    "Let's now say we want to edit the tool call. E.g. change some of the parameters (or even the tool called!) but then execute that tool."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'call_llm': {'messages': [AIMessage(content='', additional_kwargs={'tool_calls': [{'id': 'call_M6bzAiY3457k7fTVmmzoDq0N', 'function': {'arguments': '{\"city\":\"San Francisco\"}', 'name': 'weather_search'}, 'type': 'function'}], 'refusal': None}, response_metadata={'token_usage': {'completion_tokens': 16, 'prompt_tokens': 49, 'total_tokens': 65, 'completion_tokens_details': {'accepted_prediction_tokens': 0, 'audio_tokens': 0, 'reasoning_tokens': 0, 'rejected_prediction_tokens': 0}, 'prompt_tokens_details': {'audio_tokens': 0, 'cached_tokens': 0}}, 'model_name': 'gpt-4o-2024-08-06', 'system_fingerprint': 'fp_90122d973c', 'id': 'chatcmpl-BRluUKXq2iuemse8Jg7fHWYW2fhdG', 'finish_reason': 'tool_calls', 'logprobs': None}, id='run-bd72dd5e-247e-4d02-bc52-2e38168593b8-0', tool_calls=[{'name': 'weather_search', 'args': {'city': 'San Francisco'}, 'id': 'call_M6bzAiY3457k7fTVmmzoDq0N', 'type': 'tool_call'}], usage_metadata={'input_tokens': 49, 'output_tokens': 16, 'total_tokens': 65, 'input_token_details': {'audio': 0, 'cache_read': 0}, 'output_token_details': {'audio': 0, 'reasoning': 0}})]}}\n",
      "\n",
      "\n",
      "{'__interrupt__': (Interrupt(value={'question': 'Is this correct?', 'tool_call': {'name': 'weather_search', 'args': {'city': 'San Francisco'}, 'id': 'call_M6bzAiY3457k7fTVmmzoDq0N', 'type': 'tool_call'}}, resumable=True, ns=['human_review_node:8c914865-df8d-e5a6-46b6-2c18e91ef978']),)}\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Input\n",
    "initial_input = {\"messages\": [{\"role\": \"user\", \"content\": \"what's the weather in sf?\"}]}\n",
    "\n",
    "# Thread\n",
    "thread = {\"configurable\": {\"thread_id\": \"openai-3\"}}\n",
    "\n",
    "# Run the graph until the first interruption\n",
    "for event in graph.stream(initial_input, thread, stream_mode=\"updates\"):\n",
    "    print(event)\n",
    "    print(\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pending Executions!\n",
      "('human_review_node',)\n"
     ]
    }
   ],
   "source": [
    "print(\"Pending Executions!\")\n",
    "print(graph.get_state(thread).next)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To do this, we will use `Command` with a different resume value of `{\"action\": \"update\", \"data\": <tool call args>}`. This will do the following:\n",
    "\n",
    "* combine existing tool call with user-provided tool call arguments and update the existing AI message with the new tool call\n",
    "* navigate to `run_tool` node with the updated AI message and continue execution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'human_review_node': {'messages': [{'role': 'ai', 'content': '', 'tool_calls': [{'id': 'call_M6bzAiY3457k7fTVmmzoDq0N', 'name': 'weather_search', 'args': {'city': 'San Francisco, USA'}}], 'id': 'run-bd72dd5e-247e-4d02-bc52-2e38168593b8-0'}]}}\n",
      "\n",
      "\n",
      "----\n",
      "Searching for: San Francisco, USA\n",
      "----\n",
      "{'run_tool': {'messages': [{'role': 'tool', 'name': 'weather_search', 'content': 'Sunny!', 'tool_call_id': 'call_M6bzAiY3457k7fTVmmzoDq0N'}]}}\n",
      "\n",
      "\n",
      "{'call_llm': {'messages': [AIMessage(content='The weather in San Francisco is currently sunny. Enjoy the clear skies!', additional_kwargs={'refusal': None}, response_metadata={'token_usage': {'completion_tokens': 16, 'prompt_tokens': 76, 'total_tokens': 92, 'completion_tokens_details': {'accepted_prediction_tokens': 0, 'audio_tokens': 0, 'reasoning_tokens': 0, 'rejected_prediction_tokens': 0}, 'prompt_tokens_details': {'audio_tokens': 0, 'cached_tokens': 0}}, 'model_name': 'gpt-4o-2024-08-06', 'system_fingerprint': 'fp_f5bdcc3276', 'id': 'chatcmpl-BRluUJKUZobRoOCZYow4cRKNgmBgH', 'finish_reason': 'stop', 'logprobs': None}, id='run-bad4d994-3ac4-4d69-a032-8c22bbdf5385-0', usage_metadata={'input_tokens': 76, 'output_tokens': 16, 'total_tokens': 92, 'input_token_details': {'audio': 0, 'cache_read': 0}, 'output_token_details': {'audio': 0, 'reasoning': 0}})]}}\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Let's now continue executing from here\n",
    "for event in graph.stream(\n",
    "    Command(resume={\"action\": \"update\", \"data\": {\"city\": \"San Francisco, USA\"}}),\n",
    "    thread,\n",
    "    stream_mode=\"updates\",\n",
    "):\n",
    "    print(event)\n",
    "    print(\"\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Give feedback to a tool call\n",
    "\n",
    "Sometimes, you may not want to execute a tool call, but you also may not want to ask the user to manually modify the tool call. In that case it may be better to get natural language feedback from the user. You can then insert this feedback as a mock **RESULT** of the tool call.\n",
    "\n",
    "There are multiple ways to do this:\n",
    "\n",
    "1. You could add a new message to the state (representing the \"result\" of a tool call)\n",
    "2. You could add TWO new messages to the state - one representing an \"error\" from the tool call, other HumanMessage representing the feedback\n",
    "\n",
    "Both are similar in that they involve adding messages to the state. The main difference lies in the logic AFTER the `human_review_node` and how it handles different types of messages.\n",
    "\n",
    "For this example we will just add a single tool call representing the feedback (see `human_review_node` implementation). Let's see this in action!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'call_llm': {'messages': [AIMessage(content='', additional_kwargs={'tool_calls': [{'id': 'call_X2Ln7Su0gUyhyCcXy0QI7pnE', 'function': {'arguments': '{\"city\":\"sf\"}', 'name': 'weather_search'}, 'type': 'function'}], 'refusal': None}, response_metadata={'token_usage': {'completion_tokens': 15, 'prompt_tokens': 49, 'total_tokens': 64, 'completion_tokens_details': {'accepted_prediction_tokens': 0, 'audio_tokens': 0, 'reasoning_tokens': 0, 'rejected_prediction_tokens': 0}, 'prompt_tokens_details': {'audio_tokens': 0, 'cached_tokens': 0}}, 'model_name': 'gpt-4o-2024-08-06', 'system_fingerprint': 'fp_90122d973c', 'id': 'chatcmpl-BRluVOHc3x8uoIVSjXtHkcygfV9mO', 'finish_reason': 'tool_calls', 'logprobs': None}, id='run-f992c3ea-a4ec-408b-a2b5-d4804a3e802e-0', tool_calls=[{'name': 'weather_search', 'args': {'city': 'sf'}, 'id': 'call_X2Ln7Su0gUyhyCcXy0QI7pnE', 'type': 'tool_call'}], usage_metadata={'input_tokens': 49, 'output_tokens': 15, 'total_tokens': 64, 'input_token_details': {'audio': 0, 'cache_read': 0}, 'output_token_details': {'audio': 0, 'reasoning': 0}})]}}\n",
      "\n",
      "\n",
      "{'__interrupt__': (Interrupt(value={'question': 'Is this correct?', 'tool_call': {'name': 'weather_search', 'args': {'city': 'sf'}, 'id': 'call_X2Ln7Su0gUyhyCcXy0QI7pnE', 'type': 'tool_call'}}, resumable=True, ns=['human_review_node:04bb6708-e8d5-5353-491a-37ead2ba6eb8']),)}\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Input\n",
    "initial_input = {\"messages\": [{\"role\": \"user\", \"content\": \"what's the weather in sf?\"}]}\n",
    "\n",
    "# Thread\n",
    "thread = {\"configurable\": {\"thread_id\": \"openai-4\"}}\n",
    "\n",
    "# Run the graph until the first interruption\n",
    "for event in graph.stream(initial_input, thread, stream_mode=\"updates\"):\n",
    "    print(event)\n",
    "    print(\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pending Executions!\n",
      "('human_review_node',)\n"
     ]
    }
   ],
   "source": [
    "print(\"Pending Executions!\")\n",
    "print(graph.get_state(thread).next)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To do this, we will use `Command` with a different resume value of `{\"action\": \"feedback\", \"data\": <feedback string>}`. This will do the following:\n",
    "\n",
    "* create a new tool message that combines existing tool call from LLM with the with user-provided feedback as content\n",
    "* navigate to `call_llm` node with the updated tool message and continue execution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'human_review_node': {'messages': [{'role': 'tool', 'content': 'User requested changes: use <city, country> format for location', 'name': 'weather_search', 'tool_call_id': 'call_X2Ln7Su0gUyhyCcXy0QI7pnE'}]}}\n",
      "\n",
      "\n",
      "{'call_llm': {'messages': [AIMessage(content='', additional_kwargs={'tool_calls': [{'id': 'call_RpRf2VCPyatj9En9PMDlhvrV', 'function': {'arguments': '{\"city\":\"San Francisco, US\"}', 'name': 'weather_search'}, 'type': 'function'}], 'refusal': None}, response_metadata={'token_usage': {'completion_tokens': 18, 'prompt_tokens': 84, 'total_tokens': 102, 'completion_tokens_details': {'accepted_prediction_tokens': 0, 'audio_tokens': 0, 'reasoning_tokens': 0, 'rejected_prediction_tokens': 0}, 'prompt_tokens_details': {'audio_tokens': 0, 'cached_tokens': 0}}, 'model_name': 'gpt-4o-2024-08-06', 'system_fingerprint': 'fp_f5bdcc3276', 'id': 'chatcmpl-BRluWDATYYVxJ5wP9Hd2zhi4QzBjn', 'finish_reason': 'tool_calls', 'logprobs': None}, id='run-65564d88-a9c0-4831-9f8a-cf8ba95f5b81-0', tool_calls=[{'name': 'weather_search', 'args': {'city': 'San Francisco, US'}, 'id': 'call_RpRf2VCPyatj9En9PMDlhvrV', 'type': 'tool_call'}], usage_metadata={'input_tokens': 84, 'output_tokens': 18, 'total_tokens': 102, 'input_token_details': {'audio': 0, 'cache_read': 0}, 'output_token_details': {'audio': 0, 'reasoning': 0}})]}}\n",
      "\n",
      "\n",
      "{'__interrupt__': (Interrupt(value={'question': 'Is this correct?', 'tool_call': {'name': 'weather_search', 'args': {'city': 'San Francisco, US'}, 'id': 'call_RpRf2VCPyatj9En9PMDlhvrV', 'type': 'tool_call'}}, resumable=True, ns=['human_review_node:6a75aa82-8038-8160-0569-903cec06c197']),)}\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Let's now continue executing from here\n",
    "for event in graph.stream(\n",
    "    # provide our natural language feedback!\n",
    "    Command(\n",
    "        resume={\n",
    "            \"action\": \"feedback\",\n",
    "            \"data\": \"User requested changes: use <city, country> format for location\",\n",
    "        }\n",
    "    ),\n",
    "    thread,\n",
    "    stream_mode=\"updates\",\n",
    "):\n",
    "    print(event)\n",
    "    print(\"\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that we now get to another interrupt - because it went back to the model and got an entirely new prediction of what to call. Let's now approve this one and continue."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pending Executions!\n",
      "('human_review_node',)\n"
     ]
    }
   ],
   "source": [
    "print(\"Pending Executions!\")\n",
    "print(graph.get_state(thread).next)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'human_review_node': None}\n",
      "\n",
      "\n",
      "----\n",
      "Searching for: San Francisco, US\n",
      "----\n",
      "{'run_tool': {'messages': [{'role': 'tool', 'name': 'weather_search', 'content': 'Sunny!', 'tool_call_id': 'call_RpRf2VCPyatj9En9PMDlhvrV'}]}}\n",
      "\n",
      "\n",
      "{'call_llm': {'messages': [AIMessage(content='The weather in San Francisco, US is sunny!', additional_kwargs={'refusal': None}, response_metadata={'token_usage': {'completion_tokens': 12, 'prompt_tokens': 111, 'total_tokens': 123, 'completion_tokens_details': {'accepted_prediction_tokens': 0, 'audio_tokens': 0, 'reasoning_tokens': 0, 'rejected_prediction_tokens': 0}, 'prompt_tokens_details': {'audio_tokens': 0, 'cached_tokens': 0}}, 'model_name': 'gpt-4o-2024-08-06', 'system_fingerprint': 'fp_f5bdcc3276', 'id': 'chatcmpl-BRluXTlCd6rlHNrKWk1cVQ067FXVT', 'finish_reason': 'stop', 'logprobs': None}, id='run-dbc464a9-945c-45e8-8633-d4ed9e5f1f95-0', usage_metadata={'input_tokens': 111, 'output_tokens': 12, 'total_tokens': 123, 'input_token_details': {'audio': 0, 'cache_read': 0}, 'output_token_details': {'audio': 0, 'reasoning': 0}})]}}\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for event in graph.stream(\n",
    "    Command(resume={\"action\": \"continue\"}), thread, stream_mode=\"updates\"\n",
    "):\n",
    "    print(event)\n",
    "    print(\"\\n\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

================
File: examples/human_in_the_loop/review-tool-calls.ipynb
================
{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "51466c8d-8ce4-4b3d-be4e-18fdbeda5f53",
   "metadata": {},
   "source": [
    "# How to Review Tool Calls\n",
    "\n",
    "!!! tip \"Prerequisites\"\n",
    "\n",
    "    This guide assumes familiarity with the following concepts:\n",
    "\n",
    "    * [Tool calling](https://python.langchain.com/docs/concepts/tool_calling/)\n",
    "    * [Human-in-the-loop](../../../concepts/human_in_the_loop)\n",
    "    * [LangGraph Glossary](../../../concepts/low_level)      \n",
    "\n",
    "Human-in-the-loop (HIL) interactions are crucial for [agentic systems](../../../concepts/agentic_concepts). A common pattern is to add some human in the loop step after certain tool calls. These tool calls often lead to either a function call or saving of some information. Examples include:\n",
    "\n",
    "- A tool call to execute SQL, which will then be run by the tool\n",
    "- A tool call to generate a summary, which will then be saved to the State of the graph\n",
    "\n",
    "Note that using tool calls is common **whether actually calling tools or not**.\n",
    "\n",
    "There are typically a few different interactions you may want to do here:\n",
    "\n",
    "1. Approve the tool call and continue\n",
    "2. Modify the tool call manually and then continue\n",
    "3. Give natural language feedback, and then pass that back to the agent\n",
    "\n",
    "\n",
    "We can implement these in LangGraph using the [`interrupt()`][langgraph.types.interrupt] function. `interrupt` allows us to stop graph execution to collect input from a user and continue execution with collected input:\n",
    "\n",
    "\n",
    "```python\n",
    "def human_review_node(state) -> Command[Literal[\"call_llm\", \"run_tool\"]]:\n",
    "    # this is the value we'll be providing via Command(resume=<human_review>)\n",
    "    human_review = interrupt(\n",
    "        {\n",
    "            \"question\": \"Is this correct?\",\n",
    "            # Surface tool calls for review\n",
    "            \"tool_call\": tool_call\n",
    "        }\n",
    "    )\n",
    "    \n",
    "    review_action, review_data = human_review\n",
    "    \n",
    "    # Approve the tool call and continue\n",
    "    if review_action == \"continue\":\n",
    "        return Command(goto=\"run_tool\")\n",
    "    \n",
    "    # Modify the tool call manually and then continue\n",
    "    elif review_action == \"update\":\n",
    "        ...\n",
    "        updated_msg = get_updated_msg(review_data)\n",
    "        return Command(goto=\"run_tool\", update={\"messages\": [updated_message]})\n",
    "\n",
    "    # Give natural language feedback, and then pass that back to the agent\n",
    "    elif review_action == \"feedback\":\n",
    "        ...\n",
    "        feedback_msg = get_feedback_msg(review_data)\n",
    "        return Command(goto=\"call_llm\", update={\"messages\": [feedback_msg]})\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cbd446a-808f-4394-be92-d45ab818953c",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "First we need to install the packages required"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "af4ce0ba-7596-4e5f-8bf8-0b0bd6e62833",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture --no-stderr\n",
    "%pip install --quiet -U langgraph langchain_anthropic \"httpx>=0.24.0,<1.0.0\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0abe11f4-62ed-4dc4-8875-3db21e260d1d",
   "metadata": {},
   "source": [
    "Next, we need to set API keys for Anthropic (the LLM we will use)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c903a1cf-2977-4e2d-ad7d-8b3946821d89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "ANTHROPIC_API_KEY:  ········\n"
     ]
    }
   ],
   "source": [
    "import getpass\n",
    "import os\n",
    "\n",
    "\n",
    "def _set_env(var: str):\n",
    "    if not os.environ.get(var):\n",
    "        os.environ[var] = getpass.getpass(f\"{var}: \")\n",
    "\n",
    "\n",
    "_set_env(\"ANTHROPIC_API_KEY\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0ed46a8-effe-4596-b0e1-a6a29ee16f5c",
   "metadata": {},
   "source": [
    "<div class=\"admonition tip\">\n",
    "    <p class=\"admonition-title\">Set up <a href=\"https://smith.langchain.com\">LangSmith</a> for LangGraph development</p>\n",
    "    <p style=\"padding-top: 5px;\">\n",
    "        Sign up for LangSmith to quickly spot issues and improve the performance of your LangGraph projects. LangSmith lets you use trace data to debug, test, and monitor your LLM apps built with LangGraph — read more about how to get started <a href=\"https://docs.smith.langchain.com\">here</a>. \n",
    "    </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "035e567c-db5c-4085-ba4e-5b3814561c21",
   "metadata": {},
   "source": [
    "## Simple Usage\n",
    "\n",
    "Let's set up a very simple graph that facilitates this.\n",
    "First, we will have an LLM call that decides what action to take.\n",
    "Then we go to a human node. This node actually doesn't do anything - the idea is that we interrupt before this node and then apply any updates to the state.\n",
    "After that, we check the state and either route back to the LLM or to the correct tool.\n",
    "\n",
    "Let's see this in action!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "85e452f8-f33a-4ead-bb4d-7386cdba8edc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from typing_extensions import TypedDict, Literal\n",
    "from langgraph.graph import StateGraph, START, END, MessagesState\n",
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "from langgraph.types import Command, interrupt\n",
    "from langchain_anthropic import ChatAnthropic\n",
    "from langchain_core.tools import tool\n",
    "from langchain_core.messages import AIMessage\n",
    "from IPython.display import Image, display\n",
    "\n",
    "# Set up Redis connection\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "memory = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    memory = cp\n",
    "\n",
    "@tool\n",
    "def weather_search(city: str):\n",
    "    \"\"\"Search for the weather\"\"\"\n",
    "    print(\"----\")\n",
    "    print(f\"Searching for: {city}\")\n",
    "    print(\"----\")\n",
    "    return \"Sunny!\"\n",
    "\n",
    "\n",
    "model = ChatAnthropic(model_name=\"claude-3-5-sonnet-latest\").bind_tools([weather_search])\n",
    "\n",
    "\n",
    "class State(MessagesState):\n",
    "    \"\"\"Simple state.\"\"\"\n",
    "\n",
    "\n",
    "def call_llm(state):\n",
    "    return {\"messages\": [model.invoke(state[\"messages\"])]}\n",
    "\n",
    "\n",
    "def human_review_node(state) -> Command[Literal[\"call_llm\", \"run_tool\"]]:\n",
    "    last_message = state[\"messages\"][-1]\n",
    "    \n",
    "    # Handle Anthropic message format which uses content list with tool_use type\n",
    "    tool_call = None\n",
    "    if hasattr(last_message, \"content\") and isinstance(last_message.content, list):\n",
    "        for part in last_message.content:\n",
    "            if isinstance(part, dict) and part.get(\"type\") == \"tool_use\":\n",
    "                tool_call = {\n",
    "                    \"name\": part.get(\"name\"),\n",
    "                    \"args\": part.get(\"input\", {}),\n",
    "                    \"id\": part.get(\"id\"),\n",
    "                    \"type\": \"tool_call\"\n",
    "                }\n",
    "                break\n",
    "        \n",
    "    # this is the value we'll be providing via Command(resume=<human_review>)\n",
    "    human_review = interrupt(\n",
    "        {\n",
    "            \"question\": \"Is this correct?\",\n",
    "            # Surface tool calls for review\n",
    "            \"tool_call\": tool_call,\n",
    "        }\n",
    "    )\n",
    "\n",
    "    review_action = human_review[\"action\"]\n",
    "    review_data = human_review.get(\"data\")\n",
    "\n",
    "    # if approved, call the tool\n",
    "    if review_action == \"continue\":\n",
    "        return Command(goto=\"run_tool\")\n",
    "\n",
    "    # update the AI message AND call tools\n",
    "    elif review_action == \"update\":\n",
    "        # For Anthropic format\n",
    "        updated_content = []\n",
    "        for part in last_message.content:\n",
    "            if isinstance(part, dict) and part.get(\"type\") == \"tool_use\":\n",
    "                updated_part = part.copy()\n",
    "                updated_part[\"input\"] = review_data\n",
    "                updated_content.append(updated_part)\n",
    "            else:\n",
    "                updated_content.append(part)\n",
    "        \n",
    "        updated_message = {\n",
    "            \"role\": \"ai\",\n",
    "            \"content\": updated_content,\n",
    "            \"id\": last_message.id,\n",
    "        }\n",
    "            \n",
    "        return Command(goto=\"run_tool\", update={\"messages\": [updated_message]})\n",
    "\n",
    "    # provide feedback to LLM\n",
    "    elif review_action == \"feedback\":\n",
    "        # NOTE: we're adding feedback message as a ToolMessage\n",
    "        # to preserve the correct order in the message history\n",
    "        # (AI messages with tool calls need to be followed by tool call messages)\n",
    "        tool_message = {\n",
    "            \"role\": \"tool\",\n",
    "            # This is our natural language feedback\n",
    "            \"content\": review_data,\n",
    "            \"name\": tool_call[\"name\"],\n",
    "            \"tool_call_id\": tool_call[\"id\"],\n",
    "        }\n",
    "        return Command(goto=\"call_llm\", update={\"messages\": [tool_message]})\n",
    "\n",
    "\n",
    "def run_tool(state):\n",
    "    new_messages = []\n",
    "    tools = {\"weather_search\": weather_search}\n",
    "    \n",
    "    # Handle different message formats\n",
    "    last_message = state[\"messages\"][-1]\n",
    "    tool_calls = []\n",
    "    \n",
    "    # Handle Anthropic format\n",
    "    if hasattr(last_message, \"content\") and isinstance(last_message.content, list):\n",
    "        for part in last_message.content:\n",
    "            if isinstance(part, dict) and part.get(\"type\") == \"tool_use\":\n",
    "                tool_calls.append({\n",
    "                    \"name\": part.get(\"name\"),\n",
    "                    \"args\": part.get(\"input\", {}),\n",
    "                    \"id\": part.get(\"id\"),\n",
    "                })\n",
    "    \n",
    "    for tool_call in tool_calls:\n",
    "        tool_name = tool_call[\"name\"]\n",
    "        if tool_name in tools:\n",
    "            tool = tools[tool_name]\n",
    "            result = tool.invoke(tool_call[\"args\"])\n",
    "            new_messages.append(\n",
    "                {\n",
    "                    \"role\": \"tool\",\n",
    "                    \"name\": tool_call[\"name\"],\n",
    "                    \"content\": result,\n",
    "                    \"tool_call_id\": tool_call[\"id\"],\n",
    "                }\n",
    "            )\n",
    "    return {\"messages\": new_messages}\n",
    "\n",
    "\n",
    "def route_after_llm(state) -> Literal[END, \"human_review_node\"]:\n",
    "    last_message = state[\"messages\"][-1]\n",
    "    \n",
    "    # Check for Anthropic tool calls\n",
    "    has_tool_calls = False\n",
    "    if hasattr(last_message, \"content\") and isinstance(last_message.content, list):\n",
    "        for part in last_message.content:\n",
    "            if isinstance(part, dict) and part.get(\"type\") == \"tool_use\":\n",
    "                has_tool_calls = True\n",
    "                break\n",
    "    \n",
    "    if has_tool_calls:\n",
    "        return \"human_review_node\"\n",
    "    else:\n",
    "        return END\n",
    "\n",
    "\n",
    "builder = StateGraph(State)\n",
    "builder.add_node(call_llm)\n",
    "builder.add_node(run_tool)\n",
    "builder.add_node(human_review_node)\n",
    "builder.add_edge(START, \"call_llm\")\n",
    "builder.add_conditional_edges(\"call_llm\", route_after_llm)\n",
    "builder.add_edge(\"run_tool\", \"call_llm\")\n",
    "\n",
    "# Add\n",
    "graph = builder.compile(checkpointer=memory)\n",
    "\n",
    "# View\n",
    "display(Image(graph.get_graph().draw_mermaid_png()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d246d39f-4b36-459b-bd54-bf363753e590",
   "metadata": {},
   "source": [
    "## Example with no review\n",
    "\n",
    "Let's look at an example when no review is required (because no tools are called)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1b3aa6fc-c7fb-4819-8d7f-ba6057cc4edf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'call_llm': {'messages': [AIMessage(content=\"Hello! I can help you find weather information using the weather search tool. Would you like to know the weather for a specific city? Just let me know which city you're interested in and I'll look that up for you.\", additional_kwargs={}, response_metadata={'id': 'msg_011Uk3am3VPYPuUHAswbF5sb', 'model': 'claude-3-5-sonnet-20241022', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 374, 'output_tokens': 49}, 'model_name': 'claude-3-5-sonnet-20241022'}, id='run-7be06d70-058d-450f-b911-b9badd6ff906-0', usage_metadata={'input_tokens': 374, 'output_tokens': 49, 'total_tokens': 423, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}})]}}\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Input\n",
    "initial_input = {\"messages\": [{\"role\": \"user\", \"content\": \"hi!\"}]}\n",
    "\n",
    "# Thread\n",
    "thread = {\"configurable\": {\"thread_id\": \"1\"}}\n",
    "\n",
    "# Run the graph until the first interruption\n",
    "for event in graph.stream(initial_input, thread, stream_mode=\"updates\"):\n",
    "    print(event)\n",
    "    print(\"\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d59dc607-e70d-497b-aac9-78c847c27042",
   "metadata": {},
   "source": [
    "If we check the state, we can see that it is finished"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c1985f7-54f1-420f-a2b6-5e6154909966",
   "metadata": {},
   "source": [
    "## Example of approving tool\n",
    "\n",
    "Let's now look at what it looks like to approve a tool call"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2561a38f-edb5-4b44-b2d7-6a7b70d2e6b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'call_llm': {'messages': [AIMessage(content=[{'text': \"I'll help you check the weather in San Francisco.\", 'type': 'text'}, {'id': 'toolu_016TFh3JmzT9FEYs2MH9z7HH', 'input': {'city': 'San Francisco'}, 'name': 'weather_search', 'type': 'tool_use'}], additional_kwargs={}, response_metadata={'id': 'msg_01WcE3joeEa6tiwy2bP7ae5y', 'model': 'claude-3-5-sonnet-20241022', 'stop_reason': 'tool_use', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 379, 'output_tokens': 66}, 'model_name': 'claude-3-5-sonnet-20241022'}, id='run-b2b74408-e17e-44b5-9544-03fe0b99b4e6-0', tool_calls=[{'name': 'weather_search', 'args': {'city': 'San Francisco'}, 'id': 'toolu_016TFh3JmzT9FEYs2MH9z7HH', 'type': 'tool_call'}], usage_metadata={'input_tokens': 379, 'output_tokens': 66, 'total_tokens': 445, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}})]}}\n",
      "\n",
      "\n",
      "{'__interrupt__': (Interrupt(value={'question': 'Is this correct?', 'tool_call': {'name': 'weather_search', 'args': {'city': 'San Francisco'}, 'id': 'toolu_016TFh3JmzT9FEYs2MH9z7HH', 'type': 'tool_call'}}, resumable=True, ns=['human_review_node:37c4d941-77c1-361b-78b5-c0472fd06e6a']),)}\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Input\n",
    "initial_input = {\"messages\": [{\"role\": \"user\", \"content\": \"what's the weather in sf?\"}]}\n",
    "\n",
    "# Thread\n",
    "thread = {\"configurable\": {\"thread_id\": \"2\"}}\n",
    "\n",
    "# Run the graph until the first interruption\n",
    "for event in graph.stream(initial_input, thread, stream_mode=\"updates\"):\n",
    "    print(event)\n",
    "    print(\"\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ef6d51c-e2b6-4266-8de7-acf1a0b62a57",
   "metadata": {},
   "source": [
    "If we now check, we can see that it is waiting on human review"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "33d68f0f-d435-4dd1-8013-6a59186dc9f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pending Executions!\n",
      "('human_review_node',)\n"
     ]
    }
   ],
   "source": [
    "print(\"Pending Executions!\")\n",
    "print(graph.get_state(thread).next)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14c99fdd-4204-4c2d-b1af-02f38ab6ad57",
   "metadata": {},
   "source": [
    "To approve the tool call, we can just continue the thread with no edits. To do so, we need to let `human_review_node` know what value to use for the `human_review` variable we defined inside the node. We can provide this value by invoking the graph with a `Command(resume=<human_review>)` input.  Since we're approving the tool call, we'll provide `resume` value of `{\"action\": \"continue\"}` to navigate to `run_tool` node:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f9a0d5d4-52ff-49e0-a6f4-41f9a0e844d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'human_review_node': None}\n",
      "\n",
      "\n",
      "----\n",
      "Searching for: San Francisco\n",
      "----\n",
      "{'run_tool': {'messages': [{'role': 'tool', 'name': 'weather_search', 'content': 'Sunny!', 'tool_call_id': 'toolu_016TFh3JmzT9FEYs2MH9z7HH'}]}}\n",
      "\n",
      "\n",
      "{'call_llm': {'messages': [AIMessage(content=\"It's sunny in San Francisco right now!\", additional_kwargs={}, response_metadata={'id': 'msg_01Q329vWXkkkYEDD3UPKmEMG', 'model': 'claude-3-5-sonnet-20241022', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 458, 'output_tokens': 13}, 'model_name': 'claude-3-5-sonnet-20241022'}, id='run-9880cea1-d4b3-4dc3-9e00-dff54f322d21-0', usage_metadata={'input_tokens': 458, 'output_tokens': 13, 'total_tokens': 471, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}})]}}\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for event in graph.stream(\n",
    "    # provide value\n",
    "    Command(resume={\"action\": \"continue\"}),\n",
    "    thread,\n",
    "    stream_mode=\"updates\",\n",
    "):\n",
    "    print(event)\n",
    "    print(\"\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d30c4a7-b480-4ede-b2b4-8ec11de95e30",
   "metadata": {},
   "source": [
    "## Edit Tool Call\n",
    "\n",
    "Let's now say we want to edit the tool call. E.g. change some of the parameters (or even the tool called!) but then execute that tool."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ec77831c-e6b8-4903-9146-e098a4b2fda1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'call_llm': {'messages': [AIMessage(content=[{'text': \"I'll help you check the weather in San Francisco.\", 'type': 'text'}, {'id': 'toolu_01ApBN1kuKJk1tdNLXp14B1q', 'input': {'city': 'sf'}, 'name': 'weather_search', 'type': 'tool_use'}], additional_kwargs={}, response_metadata={'id': 'msg_01LcaF12XWCrwuTqKxFKyiRV', 'model': 'claude-3-5-sonnet-20241022', 'stop_reason': 'tool_use', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 379, 'output_tokens': 65}, 'model_name': 'claude-3-5-sonnet-20241022'}, id='run-05798f48-2626-47c5-a88c-71f7926354d0-0', tool_calls=[{'name': 'weather_search', 'args': {'city': 'sf'}, 'id': 'toolu_01ApBN1kuKJk1tdNLXp14B1q', 'type': 'tool_call'}], usage_metadata={'input_tokens': 379, 'output_tokens': 65, 'total_tokens': 444, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}})]}}\n",
      "\n",
      "\n",
      "{'__interrupt__': (Interrupt(value={'question': 'Is this correct?', 'tool_call': {'name': 'weather_search', 'args': {'city': 'sf'}, 'id': 'toolu_01ApBN1kuKJk1tdNLXp14B1q', 'type': 'tool_call'}}, resumable=True, ns=['human_review_node:ddd61db1-16d0-3595-e42b-4e2822740950']),)}\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Input\n",
    "initial_input = {\"messages\": [{\"role\": \"user\", \"content\": \"what's the weather in sf?\"}]}\n",
    "\n",
    "# Thread\n",
    "thread = {\"configurable\": {\"thread_id\": \"3\"}}\n",
    "\n",
    "# Run the graph until the first interruption\n",
    "for event in graph.stream(initial_input, thread, stream_mode=\"updates\"):\n",
    "    print(event)\n",
    "    print(\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "edcffbd7-829b-4d0c-88bf-cd531bc0e6b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pending Executions!\n",
      "('human_review_node',)\n"
     ]
    }
   ],
   "source": [
    "print(\"Pending Executions!\")\n",
    "print(graph.get_state(thread).next)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87358aca-9b8f-48c7-98d4-3d755f6b0104",
   "metadata": {},
   "source": [
    "To do this, we will use `Command` with a different resume value of `{\"action\": \"update\", \"data\": <tool call args>}`. This will do the following:\n",
    "\n",
    "* combine existing tool call with user-provided tool call arguments and update the existing AI message with the new tool call\n",
    "* navigate to `run_tool` node with the updated AI message and continue execution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b2f73998-baae-4c00-8a90-f4153e924941",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'human_review_node': {'messages': [{'role': 'ai', 'content': [{'text': \"I'll help you check the weather in San Francisco.\", 'type': 'text'}, {'id': 'toolu_01ApBN1kuKJk1tdNLXp14B1q', 'input': {'city': 'San Francisco, USA'}, 'name': 'weather_search', 'type': 'tool_use'}], 'id': 'run-05798f48-2626-47c5-a88c-71f7926354d0-0'}]}}\n",
      "\n",
      "\n",
      "----\n",
      "Searching for: San Francisco, USA\n",
      "----\n",
      "{'run_tool': {'messages': [{'role': 'tool', 'name': 'weather_search', 'content': 'Sunny!', 'tool_call_id': 'toolu_01ApBN1kuKJk1tdNLXp14B1q'}]}}\n",
      "\n",
      "\n",
      "{'call_llm': {'messages': [AIMessage(content=\"According to the search, it's sunny in San Francisco right now!\", additional_kwargs={}, response_metadata={'id': 'msg_01XjurtXyNPFbxbZ7NAuDvdm', 'model': 'claude-3-5-sonnet-20241022', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 460, 'output_tokens': 18}, 'model_name': 'claude-3-5-sonnet-20241022'}, id='run-442de8d9-e410-418a-aeba-94fb5cc13d95-0', usage_metadata={'input_tokens': 460, 'output_tokens': 18, 'total_tokens': 478, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}})]}}\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Let's now continue executing from here\n",
    "for event in graph.stream(\n",
    "    Command(resume={\"action\": \"update\", \"data\": {\"city\": \"San Francisco, USA\"}}),\n",
    "    thread,\n",
    "    stream_mode=\"updates\",\n",
    "):\n",
    "    print(event)\n",
    "    print(\"\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e14acc96-3d50-44b1-8616-b8d9131e46c4",
   "metadata": {},
   "source": [
    "## Give feedback to a tool call\n",
    "\n",
    "Sometimes, you may not want to execute a tool call, but you also may not want to ask the user to manually modify the tool call. In that case it may be better to get natural language feedback from the user. You can then insert this feedback as a mock **RESULT** of the tool call.\n",
    "\n",
    "There are multiple ways to do this:\n",
    "\n",
    "1. You could add a new message to the state (representing the \"result\" of a tool call)\n",
    "2. You could add TWO new messages to the state - one representing an \"error\" from the tool call, other HumanMessage representing the feedback\n",
    "\n",
    "Both are similar in that they involve adding messages to the state. The main difference lies in the logic AFTER the `human_review_node` and how it handles different types of messages.\n",
    "\n",
    "For this example we will just add a single tool call representing the feedback (see `human_review_node` implementation). Let's see this in action!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d57d5131-7912-4216-aa87-b7272507fa51",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'call_llm': {'messages': [AIMessage(content=[{'text': \"I'll help you check the weather in San Francisco.\", 'type': 'text'}, {'id': 'toolu_01B2fEU5quHZwJGhMguzwG3h', 'input': {'city': 'San Francisco'}, 'name': 'weather_search', 'type': 'tool_use'}], additional_kwargs={}, response_metadata={'id': 'msg_01B8oWNxNafoiR2YwEb8df4a', 'model': 'claude-3-5-sonnet-20241022', 'stop_reason': 'tool_use', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 379, 'output_tokens': 66}, 'model_name': 'claude-3-5-sonnet-20241022'}, id='run-90a9c3d3-d4fe-43a1-a2ec-f0966b5ddec8-0', tool_calls=[{'name': 'weather_search', 'args': {'city': 'San Francisco'}, 'id': 'toolu_01B2fEU5quHZwJGhMguzwG3h', 'type': 'tool_call'}], usage_metadata={'input_tokens': 379, 'output_tokens': 66, 'total_tokens': 445, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}})]}}\n",
      "\n",
      "\n",
      "{'__interrupt__': (Interrupt(value={'question': 'Is this correct?', 'tool_call': {'name': 'weather_search', 'args': {'city': 'San Francisco'}, 'id': 'toolu_01B2fEU5quHZwJGhMguzwG3h', 'type': 'tool_call'}}, resumable=True, ns=['human_review_node:52e176da-0f12-9ad1-70b7-94bb2268acd3']),)}\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Input\n",
    "initial_input = {\"messages\": [{\"role\": \"user\", \"content\": \"what's the weather in sf?\"}]}\n",
    "\n",
    "# Thread\n",
    "thread = {\"configurable\": {\"thread_id\": \"4\"}}\n",
    "\n",
    "# Run the graph until the first interruption\n",
    "for event in graph.stream(initial_input, thread, stream_mode=\"updates\"):\n",
    "    print(event)\n",
    "    print(\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e33ad664-0307-43c5-b85a-1e02eebceb5c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pending Executions!\n",
      "('human_review_node',)\n"
     ]
    }
   ],
   "source": [
    "print(\"Pending Executions!\")\n",
    "print(graph.get_state(thread).next)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "483d9455-8625-4c6a-9b98-f731403b2ed3",
   "metadata": {},
   "source": [
    "To do this, we will use `Command` with a different resume value of `{\"action\": \"feedback\", \"data\": <feedback string>}`. This will do the following:\n",
    "\n",
    "* create a new tool message that combines existing tool call from LLM with the with user-provided feedback as content\n",
    "* navigate to `call_llm` node with the updated tool message and continue execution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3f05f8b6-6128-4de5-8884-862fc93f1227",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'human_review_node': {'messages': [{'role': 'tool', 'content': 'User requested changes: use <city, country> format for location', 'name': 'weather_search', 'tool_call_id': 'toolu_01B2fEU5quHZwJGhMguzwG3h'}]}}\n",
      "\n",
      "\n",
      "{'call_llm': {'messages': [AIMessage(content=[{'text': 'Let me try that again with the correct format.', 'type': 'text'}, {'id': 'toolu_01WkQvzDBjWxo43RM1TUpG8W', 'input': {'city': 'San Francisco, USA'}, 'name': 'weather_search', 'type': 'tool_use'}], additional_kwargs={}, response_metadata={'id': 'msg_01JpNxKtF7idCm3hxBGcQGSV', 'model': 'claude-3-5-sonnet-20241022', 'stop_reason': 'tool_use', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 469, 'output_tokens': 68}, 'model_name': 'claude-3-5-sonnet-20241022'}, id='run-7e1a1bd8-96db-488a-95e4-e7c753983b47-0', tool_calls=[{'name': 'weather_search', 'args': {'city': 'San Francisco, USA'}, 'id': 'toolu_01WkQvzDBjWxo43RM1TUpG8W', 'type': 'tool_call'}], usage_metadata={'input_tokens': 469, 'output_tokens': 68, 'total_tokens': 537, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}})]}}\n",
      "\n",
      "\n",
      "{'__interrupt__': (Interrupt(value={'question': 'Is this correct?', 'tool_call': {'name': 'weather_search', 'args': {'city': 'San Francisco, USA'}, 'id': 'toolu_01WkQvzDBjWxo43RM1TUpG8W', 'type': 'tool_call'}}, resumable=True, ns=['human_review_node:07cc1657-faba-45ed-335b-59bc64a9c873']),)}\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Let's now continue executing from here\n",
    "for event in graph.stream(\n",
    "    # provide our natural language feedback!\n",
    "    Command(\n",
    "        resume={\n",
    "            \"action\": \"feedback\",\n",
    "            \"data\": \"User requested changes: use <city, country> format for location\",\n",
    "        }\n",
    "    ),\n",
    "    thread,\n",
    "    stream_mode=\"updates\",\n",
    "):\n",
    "    print(event)\n",
    "    print(\"\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d2e79ab-7cdb-42ce-b2ca-2932f8782c90",
   "metadata": {},
   "source": [
    "We can see that we now get to another interrupt - because it went back to the model and got an entirely new prediction of what to call. Let's now approve this one and continue."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ca558915-f4d9-4ff2-95b7-cdaf0c6db485",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pending Executions!\n",
      "('human_review_node',)\n"
     ]
    }
   ],
   "source": [
    "print(\"Pending Executions!\")\n",
    "print(graph.get_state(thread).next)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a30d40ad-611d-4ec3-84be-869ea05acb89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'human_review_node': None}\n",
      "\n",
      "\n",
      "----\n",
      "Searching for: San Francisco, USA\n",
      "----\n",
      "{'run_tool': {'messages': [{'role': 'tool', 'name': 'weather_search', 'content': 'Sunny!', 'tool_call_id': 'toolu_01WkQvzDBjWxo43RM1TUpG8W'}]}}\n",
      "\n",
      "\n",
      "{'call_llm': {'messages': [AIMessage(content=\"It's sunny in San Francisco right now!\", additional_kwargs={}, response_metadata={'id': 'msg_015ZtPA91x32qanJt3ybkndX', 'model': 'claude-3-5-sonnet-20241022', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 550, 'output_tokens': 13}, 'model_name': 'claude-3-5-sonnet-20241022'}, id='run-03b7df2b-4022-4dfb-afa1-b1a450569ba7-0', usage_metadata={'input_tokens': 550, 'output_tokens': 13, 'total_tokens': 563, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}})]}}\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for event in graph.stream(\n",
    "    Command(resume={\"action\": \"continue\"}), thread, stream_mode=\"updates\"\n",
    "):\n",
    "    print(event)\n",
    "    print(\"\\n\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

================
File: examples/human_in_the_loop/time-travel.ipynb
================
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "51466c8d-8ce4-4b3d-be4e-18fdbeda5f53",
   "metadata": {},
   "source": [
    "# How to view and update past graph state\n",
    "\n",
    "!!! tip \"Prerequisites\"\n",
    "\n",
    "    This guide assumes familiarity with the following concepts:\n",
    "\n",
    "    * [Time Travel](../../../concepts/time-travel)\n",
    "    * [Breakpoints](../../../concepts/breakpoints)\n",
    "    * [LangGraph Glossary](../../../concepts/low_level)\n",
    "\n",
    "\n",
    "Once you start [checkpointing](../../persistence) your graphs, you can easily **get** or **update** the state of the agent at any point in time. This permits a few things:\n",
    "\n",
    "1. You can surface a state during an interrupt to a user to let them accept an action.\n",
    "2. You can **rewind** the graph to reproduce or avoid issues.\n",
    "3. You can **modify** the state to embed your agent into a larger system, or to let the user better control its actions.\n",
    "\n",
    "The key methods used for this functionality are:\n",
    "\n",
    "- [get_state](https://langchain-ai.github.io/langgraph/reference/graphs/#langgraph.graph.graph.CompiledGraph.get_state): fetch the values from the target config\n",
    "- [update_state](https://langchain-ai.github.io/langgraph/reference/graphs/#langgraph.graph.graph.CompiledGraph.update_state): apply the given values to the target state\n",
    "\n",
    "**Note:** this requires passing in a checkpointer.\n",
    "\n",
    "Below is a quick example."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cbd446a-808f-4394-be92-d45ab818953c",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "First we need to install the packages required"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "af4ce0ba-7596-4e5f-8bf8-0b0bd6e62833",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture --no-stderr\n",
    "%pip install --quiet -U langgraph langchain_openai"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0abe11f4-62ed-4dc4-8875-3db21e260d1d",
   "metadata": {},
   "source": [
    "Next, we need to set API keys for OpenAI (the LLM we will use)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c903a1cf-2977-4e2d-ad7d-8b3946821d89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "OPENAI_API_KEY:  ········\n"
     ]
    }
   ],
   "source": [
    "import getpass\n",
    "import os\n",
    "\n",
    "\n",
    "def _set_env(var: str):\n",
    "    if not os.environ.get(var):\n",
    "        os.environ[var] = getpass.getpass(f\"{var}: \")\n",
    "\n",
    "\n",
    "_set_env(\"OPENAI_API_KEY\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0ed46a8-effe-4596-b0e1-a6a29ee16f5c",
   "metadata": {},
   "source": [
    "<div class=\"admonition tip\">\n",
    "    <p class=\"admonition-title\">Set up <a href=\"https://smith.langchain.com\">LangSmith</a> for LangGraph development</p>\n",
    "    <p style=\"padding-top: 5px;\">\n",
    "        Sign up for LangSmith to quickly spot issues and improve the performance of your LangGraph projects. LangSmith lets you use trace data to debug, test, and monitor your LLM apps built with LangGraph — read more about how to get started <a href=\"https://docs.smith.langchain.com\">here</a>. \n",
    "    </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e36f89e5",
   "metadata": {},
   "source": [
    "## Build the agent\n",
    "\n",
    "We can now build the agent. We will build a relatively simple ReAct-style agent that does tool calling. We will use Anthropic's models and fake tools (just for demo purposes)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f5319e01",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set up the tool\n",
    "from langchain_openai import ChatOpenAI\n",
    "from langchain_core.tools import tool\n",
    "from langgraph.graph import MessagesState, START\n",
    "from langgraph.prebuilt import ToolNode\n",
    "from langgraph.graph import END, StateGraph\n",
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "\n",
    "# Set up Redis connection\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "memory = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    memory = cp\n",
    "\n",
    "@tool\n",
    "def play_song_on_spotify(song: str):\n",
    "    \"\"\"Play a song on Spotify\"\"\"\n",
    "    # Call the spotify API ...\n",
    "    return f\"Successfully played {song} on Spotify!\"\n",
    "\n",
    "\n",
    "@tool\n",
    "def play_song_on_apple(song: str):\n",
    "    \"\"\"Play a song on Apple Music\"\"\"\n",
    "    # Call the apple music API ...\n",
    "    return f\"Successfully played {song} on Apple Music!\"\n",
    "\n",
    "\n",
    "tools = [play_song_on_apple, play_song_on_spotify]\n",
    "tool_node = ToolNode(tools)\n",
    "\n",
    "# Set up the model\n",
    "\n",
    "model = ChatOpenAI(model=\"gpt-4o-mini\")\n",
    "model = model.bind_tools(tools, parallel_tool_calls=False)\n",
    "\n",
    "\n",
    "# Define nodes and conditional edges\n",
    "\n",
    "\n",
    "# Define the function that determines whether to continue or not\n",
    "def should_continue(state):\n",
    "    messages = state[\"messages\"]\n",
    "    last_message = messages[-1]\n",
    "    # If there is no function call, then we finish\n",
    "    if not last_message.tool_calls:\n",
    "        return \"end\"\n",
    "    # Otherwise if there is, we continue\n",
    "    else:\n",
    "        return \"continue\"\n",
    "\n",
    "\n",
    "# Define the function that calls the model\n",
    "def call_model(state):\n",
    "    messages = state[\"messages\"]\n",
    "    response = model.invoke(messages)\n",
    "    # We return a list, because this will get added to the existing list\n",
    "    return {\"messages\": [response]}\n",
    "\n",
    "\n",
    "# Define a new graph\n",
    "workflow = StateGraph(MessagesState)\n",
    "\n",
    "# Define the two nodes we will cycle between\n",
    "workflow.add_node(\"agent\", call_model)\n",
    "workflow.add_node(\"action\", tool_node)\n",
    "\n",
    "# Set the entrypoint as `agent`\n",
    "# This means that this node is the first one called\n",
    "workflow.add_edge(START, \"agent\")\n",
    "\n",
    "# We now add a conditional edge\n",
    "workflow.add_conditional_edges(\n",
    "    # First, we define the start node. We use `agent`.\n",
    "    # This means these are the edges taken after the `agent` node is called.\n",
    "    \"agent\",\n",
    "    # Next, we pass in the function that will determine which node is called next.\n",
    "    should_continue,\n",
    "    # Finally we pass in a mapping.\n",
    "    # The keys are strings, and the values are other nodes.\n",
    "    # END is a special node marking that the graph should finish.\n",
    "    # What will happen is we will call `should_continue`, and then the output of that\n",
    "    # will be matched against the keys in this mapping.\n",
    "    # Based on which one it matches, that node will then be called.\n",
    "    {\n",
    "        # If `tools`, then we call the tool node.\n",
    "        \"continue\": \"action\",\n",
    "        # Otherwise we finish.\n",
    "        \"end\": END,\n",
    "    },\n",
    ")\n",
    "\n",
    "# We now add a normal edge from `tools` to `agent`.\n",
    "# This means that after `tools` is called, `agent` node is called next.\n",
    "workflow.add_edge(\"action\", \"agent\")\n",
    "\n",
    "# Finally, we compile it!\n",
    "# This compiles it into a LangChain Runnable,\n",
    "# meaning you can use it as you would any other runnable\n",
    "\n",
    "# We add in `interrupt_before=[\"action\"]`\n",
    "# This will add a breakpoint before the `action` node is called\n",
    "app = workflow.compile(checkpointer=memory)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a1b56c5-bd61-4192-8bdb-458a1e9f0159",
   "metadata": {},
   "source": [
    "## Interacting with the Agent\n",
    "\n",
    "We can now interact with the agent. Let's ask it to play Taylor Swift's most popular song:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "cfd140f0-a5a6-4697-8115-322242f197b5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "Can you play Taylor Swift's most popular song?\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "Tool Calls:\n",
      "  play_song_on_apple (call_SwbvKPaZxLnxuStPuXQkQg0Y)\n",
      " Call ID: call_SwbvKPaZxLnxuStPuXQkQg0Y\n",
      "  Args:\n",
      "    song: Anti-Hero by Taylor Swift\n",
      "=================================\u001b[1m Tool Message \u001b[0m=================================\n",
      "Name: play_song_on_apple\n",
      "\n",
      "Successfully played Anti-Hero by Taylor Swift on Apple Music!\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "I've started playing \"Anti-Hero\" by Taylor Swift on Apple Music! Enjoy the music!\n"
     ]
    }
   ],
   "source": [
    "from langchain_core.messages import HumanMessage\n",
    "\n",
    "config = {\"configurable\": {\"thread_id\": \"1\"}}\n",
    "input_message = HumanMessage(content=\"Can you play Taylor Swift's most popular song?\")\n",
    "for event in app.stream({\"messages\": [input_message]}, config, stream_mode=\"values\"):\n",
    "    event[\"messages\"][-1].pretty_print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c38c505-6cee-427f-9dcd-493a2ade7ebb",
   "metadata": {},
   "source": [
    "## Checking history\n",
    "\n",
    "Let's browse the history of this thread, from start to finish."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "777538a5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[HumanMessage(content=\"Can you play Taylor Swift's most popular song?\", additional_kwargs={}, response_metadata={}, id='ce9e880c-05a3-41cb-855c-e666c8f9cbd1'),\n",
       " AIMessage(content='', additional_kwargs={'tool_calls': [{'id': 'call_SwbvKPaZxLnxuStPuXQkQg0Y', 'function': {'arguments': '{\"song\":\"Anti-Hero by Taylor Swift\"}', 'name': 'play_song_on_apple'}, 'type': 'function'}], 'refusal': None}, response_metadata={'token_usage': {'completion_tokens': 23, 'prompt_tokens': 80, 'total_tokens': 103, 'completion_tokens_details': {'accepted_prediction_tokens': 0, 'audio_tokens': 0, 'reasoning_tokens': 0, 'rejected_prediction_tokens': 0}, 'prompt_tokens_details': {'audio_tokens': 0, 'cached_tokens': 0}}, 'model_name': 'gpt-4o-mini-2024-07-18', 'system_fingerprint': 'fp_0392822090', 'id': 'chatcmpl-BRm5GxWKro32HznmzffDPbKEDt32h', 'finish_reason': 'tool_calls', 'logprobs': None}, id='run-a43f1c2b-1e11-47c7-b60a-2469a55c82e9-0', tool_calls=[{'name': 'play_song_on_apple', 'args': {'song': 'Anti-Hero by Taylor Swift'}, 'id': 'call_SwbvKPaZxLnxuStPuXQkQg0Y', 'type': 'tool_call'}], usage_metadata={'input_tokens': 80, 'output_tokens': 23, 'total_tokens': 103, 'input_token_details': {'audio': 0, 'cache_read': 0}, 'output_token_details': {'audio': 0, 'reasoning': 0}}),\n",
       " ToolMessage(content='Successfully played Anti-Hero by Taylor Swift on Apple Music!', name='play_song_on_apple', id='aad71a5f-492b-48bc-a487-c620ec193d02', tool_call_id='call_SwbvKPaZxLnxuStPuXQkQg0Y'),\n",
       " AIMessage(content='I\\'ve started playing \"Anti-Hero\" by Taylor Swift on Apple Music! Enjoy the music!', additional_kwargs={'refusal': None}, response_metadata={'token_usage': {'completion_tokens': 21, 'prompt_tokens': 125, 'total_tokens': 146, 'completion_tokens_details': {'accepted_prediction_tokens': 0, 'audio_tokens': 0, 'reasoning_tokens': 0, 'rejected_prediction_tokens': 0}, 'prompt_tokens_details': {'audio_tokens': 0, 'cached_tokens': 0}}, 'model_name': 'gpt-4o-mini-2024-07-18', 'system_fingerprint': 'fp_0392822090', 'id': 'chatcmpl-BRm5HAeEb5fYyAV4IMdIABAwnqo0Z', 'finish_reason': 'stop', 'logprobs': None}, id='run-d45f3b55-528a-403b-9f0c-f10c814ff583-0', usage_metadata={'input_tokens': 125, 'output_tokens': 21, 'total_tokens': 146, 'input_token_details': {'audio': 0, 'cache_read': 0}, 'output_token_details': {'audio': 0, 'reasoning': 0}})]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "app.get_state(config).values[\"messages\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8578a66d-6489-4e03-8c23-fd0530278455",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "StateSnapshot(values={'messages': []}, next=('__start__',), config={'configurable': {'thread_id': '1', 'checkpoint_ns': '', 'checkpoint_id': ''}}, metadata={'source': 'input', 'writes': {'__start__': {'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'schema', 'messages', 'HumanMessage'], 'kwargs': {'content': \"Can you play Taylor Swift's most popular song?\", 'type': 'human'}}]}}, 'step': -1, 'parents': {}, 'thread_id': '1'}, created_at='2025-04-29T20:43:09.896874+00:00', parent_config=None, tasks=(PregelTask(id='01db093c-5b4c-404e-adc7-4c2f1b79d9ce', name='__start__', path=('__pregel_pull', '__start__'), error=None, interrupts=(), state=None, result=None),), interrupts=())\n",
      "--\n",
      "StateSnapshot(values={'messages': [HumanMessage(content=\"Can you play Taylor Swift's most popular song?\", additional_kwargs={}, response_metadata={}, id='ce9e880c-05a3-41cb-855c-e666c8f9cbd1')]}, next=('agent',), config={'configurable': {'thread_id': '1', 'checkpoint_ns': '', 'checkpoint_id': '1f0253a8-fc68-66d4-bfff-3d93672c32b8'}}, metadata={'source': 'loop', 'writes': None, 'step': 0, 'parents': {}, 'thread_id': '1'}, created_at='2025-04-29T20:43:09.898069+00:00', parent_config=None, tasks=(PregelTask(id='8da50206-f1b7-c43d-ff08-02fc892c084d', name='agent', path=('__pregel_pull', 'agent'), error=None, interrupts=(), state=None, result=None),), interrupts=())\n",
      "--\n",
      "StateSnapshot(values={'messages': [HumanMessage(content=\"Can you play Taylor Swift's most popular song?\", additional_kwargs={}, response_metadata={}, id='ce9e880c-05a3-41cb-855c-e666c8f9cbd1'), AIMessage(content='', additional_kwargs={'tool_calls': [{'id': 'call_SwbvKPaZxLnxuStPuXQkQg0Y', 'function': {'arguments': '{\"song\":\"Anti-Hero by Taylor Swift\"}', 'name': 'play_song_on_apple'}, 'type': 'function'}], 'refusal': None}, response_metadata={'token_usage': {'completion_tokens': 23, 'prompt_tokens': 80, 'total_tokens': 103, 'completion_tokens_details': {'accepted_prediction_tokens': 0, 'audio_tokens': 0, 'reasoning_tokens': 0, 'rejected_prediction_tokens': 0}, 'prompt_tokens_details': {'audio_tokens': 0, 'cached_tokens': 0}}, 'model_name': 'gpt-4o-mini-2024-07-18', 'system_fingerprint': 'fp_0392822090', 'id': 'chatcmpl-BRm5GxWKro32HznmzffDPbKEDt32h', 'finish_reason': 'tool_calls', 'logprobs': None}, id='run-a43f1c2b-1e11-47c7-b60a-2469a55c82e9-0', tool_calls=[{'name': 'play_song_on_apple', 'args': {'song': 'Anti-Hero by Taylor Swift'}, 'id': 'call_SwbvKPaZxLnxuStPuXQkQg0Y', 'type': 'tool_call'}], usage_metadata={'input_tokens': 80, 'output_tokens': 23, 'total_tokens': 103, 'input_token_details': {'audio': 0, 'cache_read': 0}, 'output_token_details': {'audio': 0, 'reasoning': 0}})]}, next=('action',), config={'configurable': {'thread_id': '1', 'checkpoint_ns': '', 'checkpoint_id': '1f0253a8-fc6b-65a1-8000-88c6f3a42fab'}}, metadata={'source': 'loop', 'writes': {'agent': {'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'schema', 'messages', 'AIMessage'], 'kwargs': {'content': '', 'additional_kwargs': {'tool_calls': [{'id': 'call_SwbvKPaZxLnxuStPuXQkQg0Y', 'function': {'arguments': '{\"song\":\"Anti-Hero by Taylor Swift\"}', 'name': 'play_song_on_apple'}, 'type': 'function'}], 'refusal': None}, 'response_metadata': {'token_usage': {'completion_tokens': 23, 'prompt_tokens': 80, 'total_tokens': 103, 'completion_tokens_details': {'accepted_prediction_tokens': 0, 'audio_tokens': 0, 'reasoning_tokens': 0, 'rejected_prediction_tokens': 0}, 'prompt_tokens_details': {'audio_tokens': 0, 'cached_tokens': 0}}, 'model_name': 'gpt-4o-mini-2024-07-18', 'system_fingerprint': 'fp_0392822090', 'id': 'chatcmpl-BRm5GxWKro32HznmzffDPbKEDt32h', 'finish_reason': 'tool_calls', 'logprobs': None}, 'type': 'ai', 'id': 'run-a43f1c2b-1e11-47c7-b60a-2469a55c82e9-0', 'tool_calls': [{'name': 'play_song_on_apple', 'args': {'song': 'Anti-Hero by Taylor Swift'}, 'id': 'call_SwbvKPaZxLnxuStPuXQkQg0Y', 'type': 'tool_call'}], 'usage_metadata': {'input_tokens': 80, 'output_tokens': 23, 'total_tokens': 103, 'input_token_details': {'audio': 0, 'cache_read': 0}, 'output_token_details': {'audio': 0, 'reasoning': 0}}, 'invalid_tool_calls': []}}]}}, 'step': 1, 'parents': {}, 'thread_id': '1'}, created_at='2025-04-29T20:43:10.848784+00:00', parent_config=None, tasks=(PregelTask(id='47f235be-81a2-1a1c-1162-69e0e3d33e95', name='action', path=('__pregel_pull', 'action'), error=None, interrupts=(), state=None, result=None),), interrupts=())\n",
      "--\n",
      "StateSnapshot(values={'messages': [HumanMessage(content=\"Can you play Taylor Swift's most popular song?\", additional_kwargs={}, response_metadata={}, id='ce9e880c-05a3-41cb-855c-e666c8f9cbd1'), AIMessage(content='', additional_kwargs={'tool_calls': [{'id': 'call_SwbvKPaZxLnxuStPuXQkQg0Y', 'function': {'arguments': '{\"song\":\"Anti-Hero by Taylor Swift\"}', 'name': 'play_song_on_apple'}, 'type': 'function'}], 'refusal': None}, response_metadata={'token_usage': {'completion_tokens': 23, 'prompt_tokens': 80, 'total_tokens': 103, 'completion_tokens_details': {'accepted_prediction_tokens': 0, 'audio_tokens': 0, 'reasoning_tokens': 0, 'rejected_prediction_tokens': 0}, 'prompt_tokens_details': {'audio_tokens': 0, 'cached_tokens': 0}}, 'model_name': 'gpt-4o-mini-2024-07-18', 'system_fingerprint': 'fp_0392822090', 'id': 'chatcmpl-BRm5GxWKro32HznmzffDPbKEDt32h', 'finish_reason': 'tool_calls', 'logprobs': None}, id='run-a43f1c2b-1e11-47c7-b60a-2469a55c82e9-0', tool_calls=[{'name': 'play_song_on_apple', 'args': {'song': 'Anti-Hero by Taylor Swift'}, 'id': 'call_SwbvKPaZxLnxuStPuXQkQg0Y', 'type': 'tool_call'}], usage_metadata={'input_tokens': 80, 'output_tokens': 23, 'total_tokens': 103, 'input_token_details': {'audio': 0, 'cache_read': 0}, 'output_token_details': {'audio': 0, 'reasoning': 0}}), ToolMessage(content='Successfully played Anti-Hero by Taylor Swift on Apple Music!', name='play_song_on_apple', id='aad71a5f-492b-48bc-a487-c620ec193d02', tool_call_id='call_SwbvKPaZxLnxuStPuXQkQg0Y')]}, next=('agent',), config={'configurable': {'thread_id': '1', 'checkpoint_ns': '', 'checkpoint_id': '1f0253a9-057c-6718-8001-11e7f8ccf6da'}}, metadata={'source': 'loop', 'writes': {'action': {'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'schema', 'messages', 'ToolMessage'], 'kwargs': {'content': 'Successfully played Anti-Hero by Taylor Swift on Apple Music!', 'type': 'tool', 'name': 'play_song_on_apple', 'id': 'aad71a5f-492b-48bc-a487-c620ec193d02', 'tool_call_id': 'call_SwbvKPaZxLnxuStPuXQkQg0Y', 'status': 'success'}}]}}, 'step': 2, 'parents': {}, 'thread_id': '1'}, created_at='2025-04-29T20:43:10.852299+00:00', parent_config=None, tasks=(PregelTask(id='a4b9ee27-8d9b-a5dc-67ec-023449044f52', name='agent', path=('__pregel_pull', 'agent'), error=None, interrupts=(), state=None, result=None),), interrupts=())\n",
      "--\n",
      "StateSnapshot(values={'messages': [HumanMessage(content=\"Can you play Taylor Swift's most popular song?\", additional_kwargs={}, response_metadata={}, id='ce9e880c-05a3-41cb-855c-e666c8f9cbd1'), AIMessage(content='', additional_kwargs={'tool_calls': [{'id': 'call_SwbvKPaZxLnxuStPuXQkQg0Y', 'function': {'arguments': '{\"song\":\"Anti-Hero by Taylor Swift\"}', 'name': 'play_song_on_apple'}, 'type': 'function'}], 'refusal': None}, response_metadata={'token_usage': {'completion_tokens': 23, 'prompt_tokens': 80, 'total_tokens': 103, 'completion_tokens_details': {'accepted_prediction_tokens': 0, 'audio_tokens': 0, 'reasoning_tokens': 0, 'rejected_prediction_tokens': 0}, 'prompt_tokens_details': {'audio_tokens': 0, 'cached_tokens': 0}}, 'model_name': 'gpt-4o-mini-2024-07-18', 'system_fingerprint': 'fp_0392822090', 'id': 'chatcmpl-BRm5GxWKro32HznmzffDPbKEDt32h', 'finish_reason': 'tool_calls', 'logprobs': None}, id='run-a43f1c2b-1e11-47c7-b60a-2469a55c82e9-0', tool_calls=[{'name': 'play_song_on_apple', 'args': {'song': 'Anti-Hero by Taylor Swift'}, 'id': 'call_SwbvKPaZxLnxuStPuXQkQg0Y', 'type': 'tool_call'}], usage_metadata={'input_tokens': 80, 'output_tokens': 23, 'total_tokens': 103, 'input_token_details': {'audio': 0, 'cache_read': 0}, 'output_token_details': {'audio': 0, 'reasoning': 0}}), ToolMessage(content='Successfully played Anti-Hero by Taylor Swift on Apple Music!', name='play_song_on_apple', id='aad71a5f-492b-48bc-a487-c620ec193d02', tool_call_id='call_SwbvKPaZxLnxuStPuXQkQg0Y'), AIMessage(content='I\\'ve started playing \"Anti-Hero\" by Taylor Swift on Apple Music! Enjoy the music!', additional_kwargs={'refusal': None}, response_metadata={'token_usage': {'completion_tokens': 21, 'prompt_tokens': 125, 'total_tokens': 146, 'completion_tokens_details': {'accepted_prediction_tokens': 0, 'audio_tokens': 0, 'reasoning_tokens': 0, 'rejected_prediction_tokens': 0}, 'prompt_tokens_details': {'audio_tokens': 0, 'cached_tokens': 0}}, 'model_name': 'gpt-4o-mini-2024-07-18', 'system_fingerprint': 'fp_0392822090', 'id': 'chatcmpl-BRm5HAeEb5fYyAV4IMdIABAwnqo0Z', 'finish_reason': 'stop', 'logprobs': None}, id='run-d45f3b55-528a-403b-9f0c-f10c814ff583-0', usage_metadata={'input_tokens': 125, 'output_tokens': 21, 'total_tokens': 146, 'input_token_details': {'audio': 0, 'cache_read': 0}, 'output_token_details': {'audio': 0, 'reasoning': 0}})]}, next=(), config={'configurable': {'thread_id': '1', 'checkpoint_ns': '', 'checkpoint_id': '1f0253a9-0585-606e-8002-2788747e0e46'}}, metadata={'source': 'loop', 'writes': {'agent': {'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'schema', 'messages', 'AIMessage'], 'kwargs': {'content': 'I\\'ve started playing \"Anti-Hero\" by Taylor Swift on Apple Music! Enjoy the music!', 'additional_kwargs': {'refusal': None}, 'response_metadata': {'token_usage': {'completion_tokens': 21, 'prompt_tokens': 125, 'total_tokens': 146, 'completion_tokens_details': {'accepted_prediction_tokens': 0, 'audio_tokens': 0, 'reasoning_tokens': 0, 'rejected_prediction_tokens': 0}, 'prompt_tokens_details': {'audio_tokens': 0, 'cached_tokens': 0}}, 'model_name': 'gpt-4o-mini-2024-07-18', 'system_fingerprint': 'fp_0392822090', 'id': 'chatcmpl-BRm5HAeEb5fYyAV4IMdIABAwnqo0Z', 'finish_reason': 'stop', 'logprobs': None}, 'type': 'ai', 'id': 'run-d45f3b55-528a-403b-9f0c-f10c814ff583-0', 'usage_metadata': {'input_tokens': 125, 'output_tokens': 21, 'total_tokens': 146, 'input_token_details': {'audio': 0, 'cache_read': 0}, 'output_token_details': {'audio': 0, 'reasoning': 0}}, 'tool_calls': [], 'invalid_tool_calls': []}}]}}, 'step': 3, 'parents': {}, 'thread_id': '1'}, created_at='2025-04-29T20:43:11.643083+00:00', parent_config=None, tasks=(), interrupts=())\n",
      "--\n"
     ]
    }
   ],
   "source": [
    "all_states = []\n",
    "for state in app.get_state_history(config):\n",
    "    print(state)\n",
    "    all_states.append(state)\n",
    "    print(\"--\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ec41c37-7c09-4cc7-8475-bf373fe66584",
   "metadata": {},
   "source": [
    "## Replay a state\n",
    "\n",
    "We can go back to any of these states and restart the agent from there! Let's go back to right before the tool call gets executed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "02250602-8c4a-4fb5-bd6c-d0b9046e8699",
   "metadata": {},
   "outputs": [],
   "source": [
    "to_replay = all_states[2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "21e7fc18-6fd9-4e11-a84b-e0325c9640c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'messages': [HumanMessage(content=\"Can you play Taylor Swift's most popular song?\", additional_kwargs={}, response_metadata={}, id='ce9e880c-05a3-41cb-855c-e666c8f9cbd1'),\n",
       "  AIMessage(content='', additional_kwargs={'tool_calls': [{'id': 'call_SwbvKPaZxLnxuStPuXQkQg0Y', 'function': {'arguments': '{\"song\":\"Anti-Hero by Taylor Swift\"}', 'name': 'play_song_on_apple'}, 'type': 'function'}], 'refusal': None}, response_metadata={'token_usage': {'completion_tokens': 23, 'prompt_tokens': 80, 'total_tokens': 103, 'completion_tokens_details': {'accepted_prediction_tokens': 0, 'audio_tokens': 0, 'reasoning_tokens': 0, 'rejected_prediction_tokens': 0}, 'prompt_tokens_details': {'audio_tokens': 0, 'cached_tokens': 0}}, 'model_name': 'gpt-4o-mini-2024-07-18', 'system_fingerprint': 'fp_0392822090', 'id': 'chatcmpl-BRm5GxWKro32HznmzffDPbKEDt32h', 'finish_reason': 'tool_calls', 'logprobs': None}, id='run-a43f1c2b-1e11-47c7-b60a-2469a55c82e9-0', tool_calls=[{'name': 'play_song_on_apple', 'args': {'song': 'Anti-Hero by Taylor Swift'}, 'id': 'call_SwbvKPaZxLnxuStPuXQkQg0Y', 'type': 'tool_call'}], usage_metadata={'input_tokens': 80, 'output_tokens': 23, 'total_tokens': 103, 'input_token_details': {'audio': 0, 'cache_read': 0}, 'output_token_details': {'audio': 0, 'reasoning': 0}})]}"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "to_replay.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d4b01634-0041-4632-8d1f-5464580e54f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('action',)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "to_replay.next"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29da43ea-9295-43e2-b164-0eb28d96749c",
   "metadata": {},
   "source": [
    "To replay from this place we just need to pass its config back to the agent. Notice that it just resumes from right where it left all - making a tool call."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e986f94f-706f-4b6f-b3c4-f95483b9e9b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'messages': [ToolMessage(content='Successfully played Anti-Hero by Taylor Swift on Apple Music!', name='play_song_on_apple', id='699ce951-d08c-4d0a-acd1-fd651d319960', tool_call_id='call_SwbvKPaZxLnxuStPuXQkQg0Y')]}\n",
      "{'messages': [AIMessage(content='I\\'ve successfully played \"Anti-Hero\" by Taylor Swift on Apple Music! Enjoy the song!', additional_kwargs={'refusal': None}, response_metadata={'token_usage': {'completion_tokens': 21, 'prompt_tokens': 125, 'total_tokens': 146, 'completion_tokens_details': {'accepted_prediction_tokens': 0, 'audio_tokens': 0, 'reasoning_tokens': 0, 'rejected_prediction_tokens': 0}, 'prompt_tokens_details': {'audio_tokens': 0, 'cached_tokens': 0}}, 'model_name': 'gpt-4o-mini-2024-07-18', 'system_fingerprint': 'fp_0392822090', 'id': 'chatcmpl-BRm5HmyKkgd5Ay8EtancJIVSfN7Jo', 'finish_reason': 'stop', 'logprobs': None}, id='run-b570874a-c7be-42e0-9a02-7ab0d8320bfa-0', usage_metadata={'input_tokens': 125, 'output_tokens': 21, 'total_tokens': 146, 'input_token_details': {'audio': 0, 'cache_read': 0}, 'output_token_details': {'audio': 0, 'reasoning': 0}})]}\n"
     ]
    }
   ],
   "source": [
    "for event in app.stream(None, to_replay.config):\n",
    "    for v in event.values():\n",
    "        print(v)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59910951-fae1-4475-8511-f622439b590d",
   "metadata": {},
   "source": [
    "## Branch off a past state\n",
    "\n",
    "Using LangGraph's checkpointing, you can do more than just replay past states. You can branch off previous locations to let the agent explore alternate trajectories or to let a user \"version control\" changes in a workflow.\n",
    "\n",
    "Let's show how to do this to edit the state at a particular point in time. Let's update the state to instead of playing the song on Apple to play it on Spotify:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "fbd5ad3b-5363-4ab7-ac63-b04668bc998f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Let's now get the last message in the state\n",
    "# This is the one with the tool calls that we want to update\n",
    "last_message = to_replay.values[\"messages\"][-1]\n",
    "\n",
    "\n",
    "# Let's now update the tool we are calling\n",
    "last_message.tool_calls[0][\"name\"] = \"play_song_on_spotify\"\n",
    "\n",
    "branch_config = app.update_state(\n",
    "    to_replay.config,\n",
    "    {\"messages\": [last_message]},\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bced65eb-2158-43e6-a9e3-3b047c8d418e",
   "metadata": {},
   "source": [
    "We can then invoke with this new `branch_config` to resume running from here with changed state. We can see from the log that the tool was called with different input."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9a92d3da-62e2-45a2-8545-e4f6a64e0ffe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'messages': [ToolMessage(content='Successfully played Anti-Hero by Taylor Swift on Spotify!', name='play_song_on_spotify', id='0545c90a-b7df-4712-97f3-776e94021c0a', tool_call_id='call_SwbvKPaZxLnxuStPuXQkQg0Y')]}\n",
      "{'messages': [AIMessage(content='I\\'ve played \"Anti-Hero\" by Taylor Swift on Spotify. Enjoy the music!', additional_kwargs={'refusal': None}, response_metadata={'token_usage': {'completion_tokens': 19, 'prompt_tokens': 124, 'total_tokens': 143, 'completion_tokens_details': {'accepted_prediction_tokens': 0, 'audio_tokens': 0, 'reasoning_tokens': 0, 'rejected_prediction_tokens': 0}, 'prompt_tokens_details': {'audio_tokens': 0, 'cached_tokens': 0}}, 'model_name': 'gpt-4o-mini-2024-07-18', 'system_fingerprint': 'fp_0392822090', 'id': 'chatcmpl-BRm5IeJQKhrV7HJMY0qXTVfoxsf96', 'finish_reason': 'stop', 'logprobs': None}, id='run-5898fa8d-d271-4176-be35-45fc815503cd-0', usage_metadata={'input_tokens': 124, 'output_tokens': 19, 'total_tokens': 143, 'input_token_details': {'audio': 0, 'cache_read': 0}, 'output_token_details': {'audio': 0, 'reasoning': 0}})]}\n"
     ]
    }
   ],
   "source": [
    "for event in app.stream(None, branch_config):\n",
    "    for v in event.values():\n",
    "        print(v)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "511e319e-d10d-4b04-a4e0-fc4f3d87cb23",
   "metadata": {},
   "source": [
    "Alternatively, we could update the state to not even call a tool!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "01abb480-df55-4eba-a2be-cf9372b60b54",
   "metadata": {},
   "outputs": [],
   "source": [
    "from langchain_core.messages import AIMessage\n",
    "\n",
    "# Let's now get the last message in the state\n",
    "# This is the one with the tool calls that we want to update\n",
    "last_message = to_replay.values[\"messages\"][-1]\n",
    "\n",
    "# Let's now get the ID for the last message, and create a new message with that ID.\n",
    "new_message = AIMessage(\n",
    "    content=\"It's quiet hours so I can't play any music right now!\", id=last_message.id\n",
    ")\n",
    "\n",
    "branch_config = app.update_state(\n",
    "    to_replay.config,\n",
    "    {\"messages\": [new_message]},\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1a7cfcd4-289e-419e-8b49-dfaef4f88641",
   "metadata": {},
   "outputs": [],
   "source": [
    "branch_state = app.get_state(branch_config)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5198f9c1-d2d4-458a-993d-3caa55810b1e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'messages': [HumanMessage(content=\"Can you play Taylor Swift's most popular song?\", additional_kwargs={}, response_metadata={}, id='ce9e880c-05a3-41cb-855c-e666c8f9cbd1'),\n",
       "  AIMessage(content=\"It's quiet hours so I can't play any music right now!\", additional_kwargs={}, response_metadata={}, id='run-a43f1c2b-1e11-47c7-b60a-2469a55c82e9-0')]}"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "branch_state.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5d89d55d-db84-4c2d-828b-64a29a69947b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "()"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "branch_state.next"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc168c90-a374-4280-a9a6-8bc232dbb006",
   "metadata": {},
   "source": [
    "You can see the snapshot was updated and now correctly reflects that there is no next step."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

================
File: examples/human_in_the_loop/wait-user-input.ipynb
================
{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "51466c8d-8ce4-4b3d-be4e-18fdbeda5f53",
   "metadata": {},
   "source": [
    "# How to wait for user input using `interrupt`\n",
    "\n",
    "!!! tip \"Prerequisites\"\n",
    "\n",
    "    This guide assumes familiarity with the following concepts:\n",
    "\n",
    "    * [Human-in-the-loop](../../../concepts/human_in_the_loop)\n",
    "    * [LangGraph Glossary](../../../concepts/low_level)\n",
    "    \n",
    "\n",
    "**Human-in-the-loop (HIL)** interactions are crucial for [agentic systems](https://langchain-ai.github.io/langgraph/concepts/agentic_concepts/#human-in-the-loop). Waiting for human input is a common HIL interaction pattern, allowing the agent to ask the user clarifying questions and await input before proceeding. \n",
    "\n",
    "We can implement this in LangGraph using the [`interrupt()`][langgraph.types.interrupt] function. `interrupt` allows us to stop graph execution to collect input from a user and continue execution with collected input."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cbd446a-808f-4394-be92-d45ab818953c",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "First we need to install the packages required"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "af4ce0ba-7596-4e5f-8bf8-0b0bd6e62833",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture --no-stderr\n",
    "%pip install --quiet -U langgraph langchain_anthropic"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0abe11f4-62ed-4dc4-8875-3db21e260d1d",
   "metadata": {},
   "source": [
    "Next, we need to set API keys for Anthropic and / or OpenAI (the LLM(s) we will use)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c903a1cf-2977-4e2d-ad7d-8b3946821d89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "ANTHROPIC_API_KEY:  ········\n"
     ]
    }
   ],
   "source": [
    "import getpass\n",
    "import os\n",
    "\n",
    "\n",
    "def _set_env(var: str):\n",
    "    if not os.environ.get(var):\n",
    "        os.environ[var] = getpass.getpass(f\"{var}: \")\n",
    "\n",
    "\n",
    "_set_env(\"ANTHROPIC_API_KEY\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0ed46a8-effe-4596-b0e1-a6a29ee16f5c",
   "metadata": {},
   "source": [
    "<div class=\"admonition tip\">\n",
    "    <p class=\"admonition-title\">Set up <a href=\"https://smith.langchain.com\">LangSmith</a> for LangGraph development</p>\n",
    "    <p style=\"padding-top: 5px;\">\n",
    "        Sign up for LangSmith to quickly spot issues and improve the performance of your LangGraph projects. LangSmith lets you use trace data to debug, test, and monitor your LLM apps built with LangGraph — read more about how to get started <a href=\"https://docs.smith.langchain.com\">here</a>. \n",
    "    </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6cf1fad-5ab6-49c5-b0c8-15a1b6e8cf21",
   "metadata": {},
   "source": [
    "## Simple Usage\n",
    "\n",
    "Let's explore a basic example of using human feedback. A straightforward approach is to create a node, **`human_feedback`**, designed specifically to collect user input. This allows us to gather feedback at a specific, chosen point in our graph.\n",
    "\n",
    "Steps:\n",
    "\n",
    "1. **Call `interrupt()`** inside the **`human_feedback`** node.  \n",
    "2. **Set up a [checkpointer](https://langchain-ai.github.io/langgraph/concepts/low_level/#checkpointer)** to save the graph's state up to this node.  \n",
    "3. **Use `Command(resume=...)`** to provide the requested value to the **`human_feedback`** node and resume execution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "58eae42d-be32-48da-8d0a-ab64471657d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from typing_extensions import TypedDict\n",
    "from langgraph.graph import StateGraph, START, END\n",
    "\n",
    "# highlight-next-line\n",
    "from langgraph.types import Command, interrupt\n",
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "from IPython.display import Image, display\n",
    "\n",
    "# Set up Redis connection\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "memory = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    memory = cp\n",
    "\n",
    "class State(TypedDict):\n",
    "    input: str\n",
    "    user_feedback: str\n",
    "\n",
    "\n",
    "def step_1(state):\n",
    "    print(\"---Step 1---\")\n",
    "    pass\n",
    "\n",
    "\n",
    "def human_feedback(state):\n",
    "    print(\"---human_feedback---\")\n",
    "    # highlight-next-line\n",
    "    feedback = interrupt(\"Please provide feedback:\")\n",
    "    return {\"user_feedback\": feedback}\n",
    "\n",
    "\n",
    "def step_3(state):\n",
    "    print(\"---Step 3---\")\n",
    "    pass\n",
    "\n",
    "\n",
    "builder = StateGraph(State)\n",
    "builder.add_node(\"step_1\", step_1)\n",
    "builder.add_node(\"human_feedback\", human_feedback)\n",
    "builder.add_node(\"step_3\", step_3)\n",
    "builder.add_edge(START, \"step_1\")\n",
    "builder.add_edge(\"step_1\", \"human_feedback\")\n",
    "builder.add_edge(\"human_feedback\", \"step_3\")\n",
    "builder.add_edge(\"step_3\", END)\n",
    "\n",
    "# Add\n",
    "graph = builder.compile(checkpointer=memory)\n",
    "\n",
    "# View\n",
    "display(Image(graph.get_graph().draw_mermaid_png()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce0fe2bc-86fc-465f-956c-729805d50404",
   "metadata": {},
   "source": [
    "Run until our `interrupt()` at `human_feedback`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "eb8e7d47-e7c9-4217-b72c-08394a2c4d3e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---Step 1---\n",
      "{'step_1': None}\n",
      "\n",
      "\n",
      "---human_feedback---\n",
      "{'__interrupt__': (Interrupt(value='Please provide feedback:', resumable=True, ns=['human_feedback:baae6117-80c0-2698-6bb3-46e87ca2fd6e']),)}\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Input\n",
    "initial_input = {\"input\": \"hello world\"}\n",
    "\n",
    "# Thread\n",
    "thread = {\"configurable\": {\"thread_id\": \"1\"}}\n",
    "\n",
    "# Run the graph until the first interruption\n",
    "for event in graph.stream(initial_input, thread, stream_mode=\"updates\"):\n",
    "    print(event)\n",
    "    print(\"\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28a7d545-ab19-4800-985b-62837d060809",
   "metadata": {},
   "source": [
    "Now, we can manually update our graph state with the user input:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3cca588f-e8d8-416b-aba7-0f3ae5e51598",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---human_feedback---\n",
      "{'human_feedback': {'user_feedback': 'go to step 3!'}}\n",
      "\n",
      "\n",
      "---Step 3---\n",
      "{'step_3': None}\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Continue the graph execution\n",
    "for event in graph.stream(\n",
    "    # highlight-next-line\n",
    "    Command(resume=\"go to step 3!\"),\n",
    "    thread,\n",
    "    stream_mode=\"updates\",\n",
    "):\n",
    "    print(event)\n",
    "    print(\"\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a75a1060-47aa-4cc6-8c41-e6ba2e9d7923",
   "metadata": {},
   "source": [
    "We can see our feedback was added to state - "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2b83e5ca-8497-43ca-bff7-7203e654c4d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'input': 'hello world', 'user_feedback': 'go to step 3!'}"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph.get_state(thread).values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b22b9598-7ce4-4d16-b932-bba2bc2803ec",
   "metadata": {},
   "source": [
    "## Agent\n",
    "\n",
    "In the context of [agents](../../../concepts/agentic_concepts), waiting for user feedback is especially useful for asking clarifying questions. To illustrate this, we’ll create a simple [ReAct-style agent](../../../concepts/agentic_concepts#react-implementation) capable of [tool calling](https://python.langchain.com/docs/concepts/tool_calling/). \n",
    "\n",
    "For this example, we’ll use Anthropic's chat model along with a **mock tool** (purely for demonstration purposes)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01789855-b769-426d-a329-3cdb29684df8",
   "metadata": {},
   "source": [
    "<div class=\"admonition note\">\n",
    "    <p class=\"admonition-title\">Using Pydantic with LangChain</p>\n",
    "    <p>\n",
    "        This notebook uses Pydantic v2 <code>BaseModel</code>, which requires <code>langchain-core >= 0.3</code>. Using <code>langchain-core < 0.3</code> will result in errors due to mixing of Pydantic v1 and v2 <code>BaseModels</code>.\n",
    "    </p>\n",
    "</div>  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f5319e01",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m20:16:51\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n",
      "\u001b[32m20:16:51\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n",
      "\u001b[32m20:16:51\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Set up the state\n",
    "from langgraph.graph import MessagesState, START\n",
    "\n",
    "# Set up the tool\n",
    "# We will have one real tool - a search tool\n",
    "# We'll also have one \"fake\" tool - a \"ask_human\" tool\n",
    "# Here we define any ACTUAL tools\n",
    "from langchain_core.tools import tool\n",
    "from langgraph.prebuilt import ToolNode\n",
    "\n",
    "\n",
    "@tool\n",
    "def search(query: str):\n",
    "    \"\"\"Call to surf the web.\"\"\"\n",
    "    # This is a placeholder for the actual implementation\n",
    "    # Don't let the LLM know this though 😊\n",
    "    return f\"I looked up: {query}. Result: It's sunny in San Francisco, but you better look out if you're a Gemini 😈.\"\n",
    "\n",
    "\n",
    "tools = [search]\n",
    "tool_node = ToolNode(tools)\n",
    "\n",
    "# Set up the model\n",
    "from langchain_anthropic import ChatAnthropic\n",
    "\n",
    "model = ChatAnthropic(model=\"claude-3-5-sonnet-latest\")\n",
    "\n",
    "from pydantic import BaseModel\n",
    "\n",
    "\n",
    "# We are going \"bind\" all tools to the model\n",
    "# We have the ACTUAL tools from above, but we also need a mock tool to ask a human\n",
    "# Since `bind_tools` takes in tools but also just tool definitions,\n",
    "# We can define a tool definition for `ask_human`\n",
    "class AskHuman(BaseModel):\n",
    "    \"\"\"Ask the human a question\"\"\"\n",
    "\n",
    "    question: str\n",
    "\n",
    "\n",
    "model = model.bind_tools(tools + [AskHuman])\n",
    "\n",
    "# Define nodes and conditional edges\n",
    "\n",
    "\n",
    "# Define the function that determines whether to continue or not\n",
    "def should_continue(state):\n",
    "    messages = state[\"messages\"]\n",
    "    last_message = messages[-1]\n",
    "    # If there is no function call, then we finish\n",
    "    if not last_message.tool_calls:\n",
    "        return END\n",
    "    # If tool call is asking Human, we return that node\n",
    "    # You could also add logic here to let some system know that there's something that requires Human input\n",
    "    # For example, send a slack message, etc\n",
    "    elif last_message.tool_calls[0][\"name\"] == \"AskHuman\":\n",
    "        return \"ask_human\"\n",
    "    # Otherwise if there is, we continue\n",
    "    else:\n",
    "        return \"action\"\n",
    "\n",
    "\n",
    "# Define the function that calls the model\n",
    "def call_model(state):\n",
    "    messages = state[\"messages\"]\n",
    "    response = model.invoke(messages)\n",
    "    # We return a list, because this will get added to the existing list\n",
    "    return {\"messages\": [response]}\n",
    "\n",
    "\n",
    "# We define a fake node to ask the human\n",
    "def ask_human(state):\n",
    "    tool_call_id = state[\"messages\"][-1].tool_calls[0][\"id\"]\n",
    "    ask = AskHuman.model_validate(state[\"messages\"][-1].tool_calls[0][\"args\"])\n",
    "    # highlight-next-line\n",
    "    location = interrupt(ask.question)\n",
    "    tool_message = [{\"tool_call_id\": tool_call_id, \"type\": \"tool\", \"content\": location}]\n",
    "    return {\"messages\": tool_message}\n",
    "\n",
    "\n",
    "# Build the graph\n",
    "\n",
    "from langgraph.graph import END, StateGraph\n",
    "\n",
    "# Define a new graph\n",
    "workflow = StateGraph(MessagesState)\n",
    "\n",
    "# Define the three nodes we will cycle between\n",
    "workflow.add_node(\"agent\", call_model)\n",
    "workflow.add_node(\"action\", tool_node)\n",
    "workflow.add_node(\"ask_human\", ask_human)\n",
    "\n",
    "# Set the entrypoint as `agent`\n",
    "# This means that this node is the first one called\n",
    "workflow.add_edge(START, \"agent\")\n",
    "\n",
    "# We now add a conditional edge\n",
    "workflow.add_conditional_edges(\n",
    "    # First, we define the start node. We use `agent`.\n",
    "    # This means these are the edges taken after the `agent` node is called.\n",
    "    \"agent\",\n",
    "    # Next, we pass in the function that will determine which node is called next.\n",
    "    should_continue,\n",
    "    path_map=[\"ask_human\", \"action\", END],\n",
    ")\n",
    "\n",
    "# We now add a normal edge from `tools` to `agent`.\n",
    "# This means that after `tools` is called, `agent` node is called next.\n",
    "workflow.add_edge(\"action\", \"agent\")\n",
    "\n",
    "# After we get back the human response, we go back to the agent\n",
    "workflow.add_edge(\"ask_human\", \"agent\")\n",
    "\n",
    "# Set up Redis connection\n",
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "\n",
    "# Set up Redis connection\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "memory = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    memory = cp\n",
    "\n",
    "# Finally, we compile it!\n",
    "# This compiles it into a LangChain Runnable,\n",
    "# meaning you can use it as you would any other runnable\n",
    "app = workflow.compile(checkpointer=memory)\n",
    "\n",
    "display(Image(app.get_graph().draw_mermaid_png()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a1b56c5-bd61-4192-8bdb-458a1e9f0159",
   "metadata": {},
   "source": [
    "## Interacting with the Agent\n",
    "\n",
    "We can now interact with the agent. Let's ask it to ask the user where they are, then tell them the weather. \n",
    "\n",
    "This should make it use the `ask_human` tool first, then use the normal tool."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cfd140f0-a5a6-4697-8115-322242f197b5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "Ask the user where they are, then look up the weather there\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "[{'text': \"I'll help you with that. Let me first ask the user about their location.\", 'type': 'text'}, {'id': 'toolu_01PewfDABq8kiEkVQHQ9Ggme', 'input': {'question': 'Where are you located?'}, 'name': 'AskHuman', 'type': 'tool_use'}]\n",
      "Tool Calls:\n",
      "  AskHuman (toolu_01PewfDABq8kiEkVQHQ9Ggme)\n",
      " Call ID: toolu_01PewfDABq8kiEkVQHQ9Ggme\n",
      "  Args:\n",
      "    question: Where are you located?\n"
     ]
    }
   ],
   "source": [
    "config = {\"configurable\": {\"thread_id\": \"2\"}}\n",
    "for event in app.stream(\n",
    "    {\n",
    "        \"messages\": [\n",
    "            (\n",
    "                \"user\",\n",
    "                \"Ask the user where they are, then look up the weather there\",\n",
    "            )\n",
    "        ]\n",
    "    },\n",
    "    config,\n",
    "    stream_mode=\"values\",\n",
    "):\n",
    "    if \"messages\" in event:\n",
    "        event[\"messages\"][-1].pretty_print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "924a30ea-94c0-468e-90fe-47eb9c08584d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('ask_human',)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "app.get_state(config).next"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a30c9fb-2a40-45cc-87ba-406c11c9f0cf",
   "metadata": {},
   "source": [
    "You can see that our graph got interrupted inside the `ask_human` node, which is now waiting for a `location` to be provided. We can provide this value by invoking the graph with a `Command(resume=\"<location>\")` input:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a9f599b5-1a55-406b-a76b-f52b3ca06975",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "[{'text': \"I'll help you with that. Let me first ask the user about their location.\", 'type': 'text'}, {'id': 'toolu_01PewfDABq8kiEkVQHQ9Ggme', 'input': {'question': 'Where are you located?'}, 'name': 'AskHuman', 'type': 'tool_use'}]\n",
      "Tool Calls:\n",
      "  AskHuman (toolu_01PewfDABq8kiEkVQHQ9Ggme)\n",
      " Call ID: toolu_01PewfDABq8kiEkVQHQ9Ggme\n",
      "  Args:\n",
      "    question: Where are you located?\n",
      "=================================\u001b[1m Tool Message \u001b[0m=================================\n",
      "\n",
      "san francisco\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "[{'text': \"Now I'll search for the weather in San Francisco.\", 'type': 'text'}, {'id': 'toolu_01M7oa7bbUWba21rDyqCA3xB', 'input': {'query': 'current weather san francisco'}, 'name': 'search', 'type': 'tool_use'}]\n",
      "Tool Calls:\n",
      "  search (toolu_01M7oa7bbUWba21rDyqCA3xB)\n",
      " Call ID: toolu_01M7oa7bbUWba21rDyqCA3xB\n",
      "  Args:\n",
      "    query: current weather san francisco\n",
      "=================================\u001b[1m Tool Message \u001b[0m=================================\n",
      "Name: search\n",
      "\n",
      "I looked up: current weather san francisco. Result: It's sunny in San Francisco, but you better look out if you're a Gemini 😈.\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "[{'text': \"Based on the search results, it's currently sunny in San Francisco. Let me be more specific and search again for more detailed weather information.\", 'type': 'text'}, {'id': 'toolu_012Hcpe3Lovcf4rZJsySpARP', 'input': {'query': 'san francisco temperature today forecast'}, 'name': 'search', 'type': 'tool_use'}]\n",
      "Tool Calls:\n",
      "  search (toolu_012Hcpe3Lovcf4rZJsySpARP)\n",
      " Call ID: toolu_012Hcpe3Lovcf4rZJsySpARP\n",
      "  Args:\n",
      "    query: san francisco temperature today forecast\n",
      "=================================\u001b[1m Tool Message \u001b[0m=================================\n",
      "Name: search\n",
      "\n",
      "I looked up: san francisco temperature today forecast. Result: It's sunny in San Francisco, but you better look out if you're a Gemini 😈.\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "I apologize, but it seems I'm only able to confirm that it's sunny in San Francisco today. The search results aren't providing detailed temperature information. However, you can be confident that it's a sunny day in San Francisco!\n"
     ]
    }
   ],
   "source": [
    "for event in app.stream(\n",
    "    # highlight-next-line\n",
    "    Command(resume=\"san francisco\"),\n",
    "    config,\n",
    "    stream_mode=\"values\",\n",
    "):\n",
    "    if \"messages\" in event:\n",
    "        event[\"messages\"][-1].pretty_print()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

================
File: examples/memory/add-summary-conversation-history.ipynb
================
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "51466c8d-8ce4-4b3d-be4e-18fdbeda5f53",
   "metadata": {},
   "source": [
    "# How to add summary of the conversation history\n",
    "\n",
    "One of the most common use cases for persistence is to use it to keep track of conversation history. This is great - it makes it easy to continue conversations. As conversations get longer and longer, however, this conversation history can build up and take up more and more of the context window. This can often be undesirable as it leads to more expensive and longer calls to the LLM, and potentially ones that error. One way to work around that is to create a summary of the conversation to date, and use that with the past N messages. This guide will go through an example of how to do that.\n",
    "\n",
    "This will involve a few steps:\n",
    "\n",
    "- Check if the conversation is too long (can be done by checking number of messages or length of messages)\n",
    "- If yes, the create summary (will need a prompt for this)\n",
    "- Then remove all except the last N messages\n",
    "\n",
    "A big part of this is deleting old messages. For an in depth guide on how to do that, see [this guide](../delete-messages)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cbd446a-808f-4394-be92-d45ab818953c",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "First, let's set up the packages we're going to want to use"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "af4ce0ba-7596-4e5f-8bf8-0b0bd6e62833",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture --no-stderr\n",
    "%pip install --quiet -U langgraph langchain_anthropic"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0abe11f4-62ed-4dc4-8875-3db21e260d1d",
   "metadata": {},
   "source": [
    "Next, we need to set API keys for Anthropic (the LLM we will use)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c903a1cf-2977-4e2d-ad7d-8b3946821d89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "ANTHROPIC_API_KEY:  ········\n"
     ]
    }
   ],
   "source": [
    "import getpass\n",
    "import os\n",
    "\n",
    "\n",
    "def _set_env(var: str):\n",
    "    if not os.environ.get(var):\n",
    "        os.environ[var] = getpass.getpass(f\"{var}: \")\n",
    "\n",
    "\n",
    "_set_env(\"ANTHROPIC_API_KEY\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0ed46a8-effe-4596-b0e1-a6a29ee16f5c",
   "metadata": {},
   "source": [
    "<div class=\"admonition tip\">\n",
    "    <p class=\"admonition-title\">Set up <a href=\"https://smith.langchain.com\">LangSmith</a> for LangGraph development</p>\n",
    "    <p style=\"padding-top: 5px;\">\n",
    "        Sign up for LangSmith to quickly spot issues and improve the performance of your LangGraph projects. LangSmith lets you use trace data to debug, test, and monitor your LLM apps built with LangGraph — read more about how to get started <a href=\"https://docs.smith.langchain.com\">here</a>. \n",
    "    </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84835fdb-a5f3-4c90-85f3-0e6257650aba",
   "metadata": {},
   "source": [
    "## Build the chatbot\n",
    "\n",
    "Let's now build the chatbot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "378899a9-3b9a-4748-95b6-eb00e0828677",
   "metadata": {},
   "outputs": [],
   "source": [
    "from typing import Literal\n",
    "\n",
    "from langchain_anthropic import ChatAnthropic\n",
    "from langchain_core.messages import SystemMessage, RemoveMessage, HumanMessage\n",
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "from langgraph.graph import MessagesState, StateGraph, START, END\n",
    "\n",
    "# Set up Redis connection for checkpointer\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "memory = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    memory = cp\n",
    "\n",
    "\n",
    "# We will add a `summary` attribute (in addition to `messages` key,\n",
    "# which MessagesState already has)\n",
    "class State(MessagesState):\n",
    "    summary: str\n",
    "\n",
    "\n",
    "# We will use this model for both the conversation and the summarization\n",
    "model = ChatAnthropic(model_name=\"claude-3-haiku-20240307\")\n",
    "\n",
    "\n",
    "# Define the logic to call the model\n",
    "def call_model(state: State):\n",
    "    # If a summary exists, we add this in as a system message\n",
    "    summary = state.get(\"summary\", \"\")\n",
    "    if summary:\n",
    "        system_message = f\"Summary of conversation earlier: {summary}\"\n",
    "        messages = [SystemMessage(content=system_message)] + state[\"messages\"]\n",
    "    else:\n",
    "        messages = state[\"messages\"]\n",
    "    response = model.invoke(messages)\n",
    "    # We return a list, because this will get added to the existing list\n",
    "    return {\"messages\": [response]}\n",
    "\n",
    "\n",
    "# We now define the logic for determining whether to end or summarize the conversation\n",
    "def should_continue(state: State) -> Literal[\"summarize_conversation\", END]:\n",
    "    \"\"\"Return the next node to execute.\"\"\"\n",
    "    messages = state[\"messages\"]\n",
    "    # If there are more than six messages, then we summarize the conversation\n",
    "    if len(messages) > 6:\n",
    "        return \"summarize_conversation\"\n",
    "    # Otherwise we can just end\n",
    "    return END\n",
    "\n",
    "\n",
    "def summarize_conversation(state: State):\n",
    "    # First, we summarize the conversation\n",
    "    summary = state.get(\"summary\", \"\")\n",
    "    if summary:\n",
    "        # If a summary already exists, we use a different system prompt\n",
    "        # to summarize it than if one didn't\n",
    "        summary_message = (\n",
    "            f\"This is summary of the conversation to date: {summary}\\n\\n\"\n",
    "            \"Extend the summary by taking into account the new messages above:\"\n",
    "        )\n",
    "    else:\n",
    "        summary_message = \"Create a summary of the conversation above:\"\n",
    "\n",
    "    messages = state[\"messages\"] + [HumanMessage(content=summary_message)]\n",
    "    response = model.invoke(messages)\n",
    "    # We now need to delete messages that we no longer want to show up\n",
    "    # I will delete all but the last two messages, but you can change this\n",
    "    delete_messages = [RemoveMessage(id=m.id) for m in state[\"messages\"][:-2]]\n",
    "    return {\"summary\": response.content, \"messages\": delete_messages}\n",
    "\n",
    "\n",
    "# Define a new graph\n",
    "workflow = StateGraph(State)\n",
    "\n",
    "# Define the conversation node and the summarize node\n",
    "workflow.add_node(\"conversation\", call_model)\n",
    "workflow.add_node(summarize_conversation)\n",
    "\n",
    "# Set the entrypoint as conversation\n",
    "workflow.add_edge(START, \"conversation\")\n",
    "\n",
    "# We now add a conditional edge\n",
    "workflow.add_conditional_edges(\n",
    "    # First, we define the start node. We use `conversation`.\n",
    "    # This means these are the edges taken after the `conversation` node is called.\n",
    "    \"conversation\",\n",
    "    # Next, we pass in the function that will determine which node is called next.\n",
    "    should_continue,\n",
    ")\n",
    "\n",
    "# We now add a normal edge from `summarize_conversation` to END.\n",
    "# This means that after `summarize_conversation` is called, we end.\n",
    "workflow.add_edge(\"summarize_conversation\", END)\n",
    "\n",
    "# Finally, we compile it!\n",
    "app = workflow.compile(checkpointer=memory)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41c2872e-04b3-4c44-9e03-9e84a5230adf",
   "metadata": {},
   "source": [
    "## Using the graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "dc697132-8fa1-4bf5-9722-56a9859331ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "def print_update(update):\n",
    "    for k, v in update.items():\n",
    "        for m in v[\"messages\"]:\n",
    "            m.pretty_print()\n",
    "        if \"summary\" in v:\n",
    "            print(v[\"summary\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "57b27553-21be-43e5-ac48-d1d0a3aa0dca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "hi! I'm bob\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "Hi Bob! It's nice to meet you. I'm Claude, an AI assistant created by Anthropic. I'm here to help out however I can. Please let me know if you have any questions or if there's anything I can assist you with.\n",
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "what's my name?\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "You said your name is Bob, so that is the name I have for you.\n",
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "i like the celtics!\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "That's great that you're a Celtics fan! The Celtics are a storied NBA franchise with a rich history of success. Some key things about the Celtics:\n",
      "\n",
      "- They have won 17 NBA championships, the most of any team. Their most recent title was in 2008.\n",
      "\n",
      "- They have had many all-time great players wear the Celtics jersey, including Bill Russell, Larry Bird, Paul Pierce, and more.\n",
      "\n",
      "- The Celtics-Lakers rivalry is one of the most intense in professional sports, with the two teams meeting in the Finals 12 times.\n",
      "\n",
      "- The Celtics play their home games at the TD Garden in Boston, which has a fantastic game-day atmosphere.\n",
      "\n",
      "As a fellow Celtics fan, I always enjoy discussing the team and their journey. Let me know if you have any other thoughts or opinions on the Celtics that you'd like to share!\n"
     ]
    }
   ],
   "source": [
    "from langchain_core.messages import HumanMessage\n",
    "\n",
    "config = {\"configurable\": {\"thread_id\": \"4\"}}\n",
    "input_message = HumanMessage(content=\"hi! I'm bob\")\n",
    "input_message.pretty_print()\n",
    "for event in app.stream({\"messages\": [input_message]}, config, stream_mode=\"updates\"):\n",
    "    print_update(event)\n",
    "\n",
    "input_message = HumanMessage(content=\"what's my name?\")\n",
    "input_message.pretty_print()\n",
    "for event in app.stream({\"messages\": [input_message]}, config, stream_mode=\"updates\"):\n",
    "    print_update(event)\n",
    "\n",
    "input_message = HumanMessage(content=\"i like the celtics!\")\n",
    "input_message.pretty_print()\n",
    "for event in app.stream({\"messages\": [input_message]}, config, stream_mode=\"updates\"):\n",
    "    print_update(event)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9760e219-a7fc-4d81-b4e8-1334c5afc510",
   "metadata": {},
   "source": [
    "We can see that so far no summarization has happened - this is because there are only six messages in the list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "935265a0-d511-475a-8a0d-b3c3cc5e42a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'messages': [HumanMessage(content=\"hi! I'm bob\", additional_kwargs={}, response_metadata={}, id='6bb57452-d968-4ca2-b641-a72a09b7dfbf'),\n",
       "  AIMessage(content=\"Hi Bob! It's nice to meet you. I'm Claude, an AI assistant created by Anthropic. I'm here to help out however I can. Please let me know if you have any questions or if there's anything I can assist you with.\", additional_kwargs={}, response_metadata={'id': 'msg_011jBGcbsvqnA6gCXExmN1a6', 'model': 'claude-3-haiku-20240307', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 12, 'output_tokens': 56}, 'model_name': 'claude-3-haiku-20240307'}, id='run-39f0f967-454c-4047-a3db-9196c041668b-0', usage_metadata={'input_tokens': 12, 'output_tokens': 56, 'total_tokens': 68, 'input_token_details': {'cache_creation': 0, 'cache_read': 0}}),\n",
       "  HumanMessage(content=\"what's my name?\", additional_kwargs={}, response_metadata={}, id='5fd5c63c-f680-45c9-ba74-ae36f0004ecd'),\n",
       "  AIMessage(content='You said your name is Bob, so that is the name I have for you.', additional_kwargs={}, response_metadata={'id': 'msg_019gbVCckc8LDkDAK7n4w8SG', 'model': 'claude-3-haiku-20240307', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 76, 'output_tokens': 20}, 'model_name': 'claude-3-haiku-20240307'}, id='run-11232468-dc34-4f32-84a5-34de7a82f147-0', usage_metadata={'input_tokens': 76, 'output_tokens': 20, 'total_tokens': 96, 'input_token_details': {'cache_creation': 0, 'cache_read': 0}}),\n",
       "  HumanMessage(content='i like the celtics!', additional_kwargs={}, response_metadata={}, id='0d3a5506-f36e-4008-afa9-877abe188311'),\n",
       "  AIMessage(content=\"That's great that you're a Celtics fan! The Celtics are a storied NBA franchise with a rich history of success. Some key things about the Celtics:\\n\\n- They have won 17 NBA championships, the most of any team. Their most recent title was in 2008.\\n\\n- They have had many all-time great players wear the Celtics jersey, including Bill Russell, Larry Bird, Paul Pierce, and more.\\n\\n- The Celtics-Lakers rivalry is one of the most intense in professional sports, with the two teams meeting in the Finals 12 times.\\n\\n- The Celtics play their home games at the TD Garden in Boston, which has a fantastic game-day atmosphere.\\n\\nAs a fellow Celtics fan, I always enjoy discussing the team and their journey. Let me know if you have any other thoughts or opinions on the Celtics that you'd like to share!\", additional_kwargs={}, response_metadata={'id': 'msg_01EUNtTQZHcgyST7xhhGvWX8', 'model': 'claude-3-haiku-20240307', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 105, 'output_tokens': 199}, 'model_name': 'claude-3-haiku-20240307'}, id='run-aacbc85e-471c-4834-9726-433328240953-0', usage_metadata={'input_tokens': 105, 'output_tokens': 199, 'total_tokens': 304, 'input_token_details': {'cache_creation': 0, 'cache_read': 0}})]}"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "values = app.get_state(config).values\n",
    "values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb40eddb-9a31-4410-a4c0-9762e2d89e56",
   "metadata": {},
   "source": [
    "Now let's send another message in"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "048805a4-3d97-4e76-ac45-8d80d4364c46",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "i like how much they win\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "I agree, the Celtics' consistent winning over the decades is really impressive. A few reasons why the Celtics have been so successful:\n",
      "\n",
      "- Great coaching - They've had legendary coaches like Red Auerbach, Doc Rivers, and now Ime Udoka who have gotten the most out of their talented rosters.\n",
      "\n",
      "- Sustained excellence - Unlike some teams that have short windows of success, the Celtics have been a perennial contender for the majority of their history.\n",
      "\n",
      "- Ability to reload - Even when they lose star players, the Celtics have done a great job of rebuilding and restocking their roster to remain competitive.\n",
      "\n",
      "- Knack for developing talent - Players like Larry Bird, Kevin McHale, and others have blossomed into all-time greats under the Celtics' system.\n",
      "\n",
      "The Celtics' winning culture and pedigree as an organization is really admirable. It's no wonder they have such a passionate fan base like yourself who takes pride in their sustained success over the decades. It's fun to be a fan of a team that expects to win championships year in and year out.\n",
      "================================\u001b[1m Remove Message \u001b[0m================================\n",
      "\n",
      "\n",
      "================================\u001b[1m Remove Message \u001b[0m================================\n",
      "\n",
      "\n",
      "================================\u001b[1m Remove Message \u001b[0m================================\n",
      "\n",
      "\n",
      "================================\u001b[1m Remove Message \u001b[0m================================\n",
      "\n",
      "\n",
      "================================\u001b[1m Remove Message \u001b[0m================================\n",
      "\n",
      "\n",
      "================================\u001b[1m Remove Message \u001b[0m================================\n",
      "\n",
      "\n",
      "Sure, here's a summary of our conversation so far:\n",
      "\n",
      "The conversation began with me introducing myself as Claude, an AI assistant, and greeting the user who identified themselves as Bob. \n",
      "\n",
      "Bob then expressed that he likes the Boston Celtics basketball team. I responded positively, noting the Celtics' impressive history of 17 NBA championships, their storied rivalry with the Lakers, and the great atmosphere at their home games.\n",
      "\n",
      "Bob said he likes how much the Celtics win, and I agreed, explaining some of the key reasons for the Celtics' sustained success over the decades - great coaching, the ability to reload and develop talent, and the team's winning culture and high expectations.\n",
      "\n",
      "Throughout the conversation, I tried to engage with Bob's interest in the Celtics, demonstrating my knowledge of the team's history and achievements while also inviting him to share more of his thoughts and opinions as a fan.\n"
     ]
    }
   ],
   "source": [
    "input_message = HumanMessage(content=\"i like how much they win\")\n",
    "input_message.pretty_print()\n",
    "for event in app.stream({\"messages\": [input_message]}, config, stream_mode=\"updates\"):\n",
    "    print_update(event)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b196367-6151-4982-9430-3db7373de06e",
   "metadata": {},
   "source": [
    "If we check the state now, we can see that we have a summary of the conversation, as well as the last two messages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "09ebb693-4738-4474-a095-6491def5c5f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'messages': [HumanMessage(content='i like how much they win', additional_kwargs={}, response_metadata={}, id='26916ba3-a474-48ec-a3d2-0da1d3b9f433'),\n",
       "  AIMessage(content=\"I agree, the Celtics' consistent winning over the decades is really impressive. A few reasons why the Celtics have been so successful:\\n\\n- Great coaching - They've had legendary coaches like Red Auerbach, Doc Rivers, and now Ime Udoka who have gotten the most out of their talented rosters.\\n\\n- Sustained excellence - Unlike some teams that have short windows of success, the Celtics have been a perennial contender for the majority of their history.\\n\\n- Ability to reload - Even when they lose star players, the Celtics have done a great job of rebuilding and restocking their roster to remain competitive.\\n\\n- Knack for developing talent - Players like Larry Bird, Kevin McHale, and others have blossomed into all-time greats under the Celtics' system.\\n\\nThe Celtics' winning culture and pedigree as an organization is really admirable. It's no wonder they have such a passionate fan base like yourself who takes pride in their sustained success over the decades. It's fun to be a fan of a team that expects to win championships year in and year out.\", additional_kwargs={}, response_metadata={'id': 'msg_01Pnf5fNM12szy1j2BSmfgsm', 'model': 'claude-3-haiku-20240307', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 313, 'output_tokens': 245}, 'model_name': 'claude-3-haiku-20240307'}, id='run-2bfb8b79-1097-4fc4-bf49-256c08442556-0', usage_metadata={'input_tokens': 313, 'output_tokens': 245, 'total_tokens': 558, 'input_token_details': {'cache_creation': 0, 'cache_read': 0}})],\n",
       " 'summary': \"Sure, here's a summary of our conversation so far:\\n\\nThe conversation began with me introducing myself as Claude, an AI assistant, and greeting the user who identified themselves as Bob. \\n\\nBob then expressed that he likes the Boston Celtics basketball team. I responded positively, noting the Celtics' impressive history of 17 NBA championships, their storied rivalry with the Lakers, and the great atmosphere at their home games.\\n\\nBob said he likes how much the Celtics win, and I agreed, explaining some of the key reasons for the Celtics' sustained success over the decades - great coaching, the ability to reload and develop talent, and the team's winning culture and high expectations.\\n\\nThroughout the conversation, I tried to engage with Bob's interest in the Celtics, demonstrating my knowledge of the team's history and achievements while also inviting him to share more of his thoughts and opinions as a fan.\"}"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "values = app.get_state(config).values\n",
    "values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "966e4177-c0fc-4fd0-a494-dd03f7f2fddb",
   "metadata": {},
   "source": [
    "We can now resume having a conversation! Note that even though we only have the last two messages, we can still ask it questions about things mentioned earlier in the conversation (because we summarized those)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7094c5ab-66f8-42ff-b1c3-90c8a9468e62",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "what's my name?\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "You haven't explicitly told me your name in our conversation, so I don't know what your name is. I addressed you as \"Bob\" earlier based on the context, but I don't have definitive information about your actual name. If you let me know your name, I'll be happy to refer to you by it going forward.\n"
     ]
    }
   ],
   "source": [
    "input_message = HumanMessage(content=\"what's my name?\")\n",
    "input_message.pretty_print()\n",
    "for event in app.stream({\"messages\": [input_message]}, config, stream_mode=\"updates\"):\n",
    "    print_update(event)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "40e5db8e-9db9-4ac7-9d76-a99fd4034bf3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "what NFL team do you think I like?\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "Hmm, without any additional information about your preferences, it's hard for me to confidently guess which NFL team you might like. There are so many great NFL franchises, each with their own passionate fanbases. \n",
      "\n",
      "Since we've been discussing your interest in the Boston Celtics, one possibility could be that you're a fan of another New England team, like the Patriots. Their success over the past couple of decades has certainly earned them a large and devoted following.\n",
      "\n",
      "Alternatively, you could be a fan of a team with a strong connection to basketball, like the Dallas Cowboys which play in the same stadium as the NBA's Mavericks.\n",
      "\n",
      "Or you might support an underdog team that's been on the rise, like the Cincinnati Bengals or Jacksonville Jaguars, who have developed exciting young cores.\n",
      "\n",
      "Really, without more context about your background or other sports/team interests, I don't want to make an assumption. I'm happy to continue our conversation and see if any clues emerge about which NFL franchise you might root for. What do you think - any hints you can provide?\n"
     ]
    }
   ],
   "source": [
    "input_message = HumanMessage(content=\"what NFL team do you think I like?\")\n",
    "input_message.pretty_print()\n",
    "for event in app.stream({\"messages\": [input_message]}, config, stream_mode=\"updates\"):\n",
    "    print_update(event)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0a1a0fda-5309-45f0-9465-9f3dff604d74",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "i like the patriots!\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "Ah I see, that makes a lot of sense! As a fellow Boston sports fan, it's great to hear that you're also a supporter of the New England Patriots.\n",
      "\n",
      "The Patriots have been one of the most dominant and consistent franchises in the NFL over the past two decades, with 6 Super Bowl championships during the Tom Brady and Bill Belichick era. Their sustained excellence and championship pedigree is really impressive.\n",
      "\n",
      "Some of the things that make the Patriots such an appealing team to root for:\n",
      "\n",
      "- Winning culture and high expectations year after year\n",
      "- Innovative, adaptable game-planning and coaching from Belichick\n",
      "- Clutch performances from legendary players like Brady, Gronkowski, etc.\n",
      "- Passionate, loyal fanbase in the New England region\n",
      "\n",
      "It's always fun to be a fan of a team that is consistently in contention for the title. As a fellow Boston sports enthusiast, I can understand the pride and excitement of cheering on the Patriots. Their success has been truly remarkable.\n",
      "\n",
      "Does the Patriots' sustained dominance over the past 20+ years resonate with you as a fan? I'd be curious to hear more about what you enjoy most about following them.\n",
      "================================\u001b[1m Remove Message \u001b[0m================================\n",
      "\n",
      "\n",
      "================================\u001b[1m Remove Message \u001b[0m================================\n",
      "\n",
      "\n",
      "================================\u001b[1m Remove Message \u001b[0m================================\n",
      "\n",
      "\n",
      "================================\u001b[1m Remove Message \u001b[0m================================\n",
      "\n",
      "\n",
      "================================\u001b[1m Remove Message \u001b[0m================================\n",
      "\n",
      "\n",
      "================================\u001b[1m Remove Message \u001b[0m================================\n",
      "\n",
      "\n",
      "Extending the summary based on the new messages:\n",
      "\n",
      "After discussing the Celtics, I then asked Bob what his name was, and he did not provide it. I noted that I had previously addressed him as \"Bob\" based on the context, but did not have definitive information about his actual name.\n",
      "\n",
      "I then asked Bob what NFL team he thought he might like, since he was a fan of the Boston Celtics. Without any additional clues, I speculated that he could be a fan of other New England teams like the Patriots, or a team with ties to basketball. \n",
      "\n",
      "Bob then revealed that he is indeed a fan of the New England Patriots, which made sense given his interest in other Boston sports teams. I expressed my understanding of why the Patriots' sustained success and winning culture would appeal to a Boston sports fan like himself.\n",
      "\n",
      "I asked Bob to share more about what he enjoys most about being a Patriots fan, given their two decades of dominance under Tom Brady and Bill Belichick. I emphasized my appreciation for the Patriots' impressive accomplishments and the passion of their fanbase.\n",
      "\n",
      "Throughout this extended exchange, I aimed to have a friendly, engaging dialogue where I demonstrated my knowledge of sports teams and their histories, while also inviting Bob to contribute his own perspectives and experiences as a fan. The conversation flowed naturally between discussing the Celtics and then transitioning to the Patriots.\n"
     ]
    }
   ],
   "source": [
    "input_message = HumanMessage(content=\"i like the patriots!\")\n",
    "input_message.pretty_print()\n",
    "for event in app.stream({\"messages\": [input_message]}, config, stream_mode=\"updates\"):\n",
    "    print_update(event)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

================
File: examples/memory/delete-messages.ipynb
================
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "51466c8d-8ce4-4b3d-be4e-18fdbeda5f53",
   "metadata": {},
   "source": [
    "# How to delete messages\n",
    "\n",
    "One of the common states for a graph is a list of messages. Usually you only add messages to that state. However, sometimes you may want to remove messages (either by directly modifying the state or as part of the graph). To do that, you can use the `RemoveMessage` modifier. In this guide, we will cover how to do that.\n",
    "\n",
    "The key idea is that each state key has a `reducer` key. This key specifies how to combine updates to the state. The default `MessagesState` has a messages key, and the reducer for that key accepts these `RemoveMessage` modifiers. That reducer then uses these `RemoveMessage` to delete messages from the key.\n",
    "\n",
    "So note that just because your graph state has a key that is a list of messages, it doesn't mean that that this `RemoveMessage` modifier will work. You also have to have a `reducer` defined that knows how to work with this.\n",
    "\n",
    "**NOTE**: Many models expect certain rules around lists of messages. For example, some expect them to start with a `user` message, others expect all messages with tool calls to be followed by a tool message. **When deleting messages, you will want to make sure you don't violate these rules.**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cbd446a-808f-4394-be92-d45ab818953c",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "First, let's build a simple graph that uses messages. Note that it's using the `MessagesState` which has the required `reducer`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "af4ce0ba-7596-4e5f-8bf8-0b0bd6e62833",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture --no-stderr\n",
    "%pip install --quiet -U langgraph langchain_anthropic"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0abe11f4-62ed-4dc4-8875-3db21e260d1d",
   "metadata": {},
   "source": [
    "Next, we need to set API keys for Anthropic (the LLM we will use)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c903a1cf-2977-4e2d-ad7d-8b3946821d89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "ANTHROPIC_API_KEY:  ········\n"
     ]
    }
   ],
   "source": [
    "import getpass\n",
    "import os\n",
    "\n",
    "\n",
    "def _set_env(var: str):\n",
    "    if not os.environ.get(var):\n",
    "        os.environ[var] = getpass.getpass(f\"{var}: \")\n",
    "\n",
    "\n",
    "_set_env(\"ANTHROPIC_API_KEY\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0ed46a8-effe-4596-b0e1-a6a29ee16f5c",
   "metadata": {},
   "source": [
    "<div class=\"admonition tip\">\n",
    "    <p class=\"admonition-title\">Set up <a href=\"https://smith.langchain.com\">LangSmith</a> for LangGraph development</p>\n",
    "    <p style=\"padding-top: 5px;\">\n",
    "        Sign up for LangSmith to quickly spot issues and improve the performance of your LangGraph projects. LangSmith lets you use trace data to debug, test, and monitor your LLM apps built with LangGraph — read more about how to get started <a href=\"https://docs.smith.langchain.com\">here</a>. \n",
    "    </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4767ef1c-a7cf-41f8-a301-558988cb7ac5",
   "metadata": {},
   "source": [
    "## Build the agent\n",
    "Let's now build a simple ReAct style agent."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "378899a9-3b9a-4748-95b6-eb00e0828677",
   "metadata": {},
   "outputs": [],
   "source": [
    "from typing import Literal\n",
    "\n",
    "from langchain_anthropic import ChatAnthropic\n",
    "from langchain_core.tools import tool\n",
    "\n",
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "from langgraph.graph import MessagesState, StateGraph, START, END\n",
    "from langgraph.prebuilt import ToolNode\n",
    "\n",
    "# Set up Redis connection for checkpointer\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "memory = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    memory = cp\n",
    "\n",
    "\n",
    "@tool\n",
    "def search(query: str):\n",
    "    \"\"\"Call to surf the web.\"\"\"\n",
    "    # This is a placeholder for the actual implementation\n",
    "    # Don't let the LLM know this though 😊\n",
    "    return \"It's sunny in San Francisco, but you better look out if you're a Gemini 😈.\"\n",
    "\n",
    "\n",
    "tools = [search]\n",
    "tool_node = ToolNode(tools)\n",
    "model = ChatAnthropic(model_name=\"claude-3-haiku-20240307\")\n",
    "bound_model = model.bind_tools(tools)\n",
    "\n",
    "\n",
    "def should_continue(state: MessagesState):\n",
    "    \"\"\"Return the next node to execute.\"\"\"\n",
    "    last_message = state[\"messages\"][-1]\n",
    "    # If there is no function call, then we finish\n",
    "    if not last_message.tool_calls:\n",
    "        return END\n",
    "    # Otherwise if there is, we continue\n",
    "    return \"action\"\n",
    "\n",
    "\n",
    "# Define the function that calls the model\n",
    "def call_model(state: MessagesState):\n",
    "    response = model.invoke(state[\"messages\"])\n",
    "    # We return a list, because this will get added to the existing list\n",
    "    return {\"messages\": response}\n",
    "\n",
    "\n",
    "# Define a new graph\n",
    "workflow = StateGraph(MessagesState)\n",
    "\n",
    "# Define the two nodes we will cycle between\n",
    "workflow.add_node(\"agent\", call_model)\n",
    "workflow.add_node(\"action\", tool_node)\n",
    "\n",
    "# Set the entrypoint as `agent`\n",
    "# This means that this node is the first one called\n",
    "workflow.add_edge(START, \"agent\")\n",
    "\n",
    "# We now add a conditional edge\n",
    "workflow.add_conditional_edges(\n",
    "    # First, we define the start node. We use `agent`.\n",
    "    # This means these are the edges taken after the `agent` node is called.\n",
    "    \"agent\",\n",
    "    # Next, we pass in the function that will determine which node is called next.\n",
    "    should_continue,\n",
    "    # Next, we pass in the path map - all the possible nodes this edge could go to\n",
    "    [\"action\", END],\n",
    ")\n",
    "\n",
    "# We now add a normal edge from `tools` to `agent`.\n",
    "# This means that after `tools` is called, `agent` node is called next.\n",
    "workflow.add_edge(\"action\", \"agent\")\n",
    "\n",
    "# Finally, we compile it!\n",
    "# This compiles it into a LangChain Runnable,\n",
    "# meaning you can use it as you would any other runnable\n",
    "app = workflow.compile(checkpointer=memory)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "57b27553-21be-43e5-ac48-d1d0a3aa0dca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "hi! I'm bob\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "It's nice to meet you, Bob! As an AI assistant, I'm here to help you with any questions or tasks you may have. Please feel free to ask me anything, and I'll do my best to assist you.\n",
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "what's my name?\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "You told me your name is Bob.\n"
     ]
    }
   ],
   "source": [
    "from langchain_core.messages import HumanMessage\n",
    "\n",
    "config = {\"configurable\": {\"thread_id\": \"2\"}}\n",
    "input_message = HumanMessage(content=\"hi! I'm bob\")\n",
    "for event in app.stream({\"messages\": [input_message]}, config, stream_mode=\"values\"):\n",
    "    event[\"messages\"][-1].pretty_print()\n",
    "\n",
    "\n",
    "input_message = HumanMessage(content=\"what's my name?\")\n",
    "for event in app.stream({\"messages\": [input_message]}, config, stream_mode=\"values\"):\n",
    "    event[\"messages\"][-1].pretty_print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2fb0de5b-30ec-42d4-813a-7ad63fe1c367",
   "metadata": {},
   "source": [
    "## Manually deleting messages\n",
    "\n",
    "First, we will cover how to manually delete messages. Let's take a look at the current state of the thread:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8a850529-d038-48f7-b5a2-8d4d2923f83a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[HumanMessage(content=\"hi! I'm bob\", additional_kwargs={}, response_metadata={}, id='a17d82c0-7fe1-4896-9640-060f2c35cbb7'),\n",
       " AIMessage(content=\"It's nice to meet you, Bob! As an AI assistant, I'm here to help you with any questions or tasks you may have. Please feel free to ask me anything, and I'll do my best to assist you.\", additional_kwargs={}, response_metadata={'id': 'msg_01B37ymr999e6yd2RX4wnC7y', 'model': 'claude-3-haiku-20240307', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 12, 'output_tokens': 50}, 'model_name': 'claude-3-haiku-20240307'}, id='run-09073daa-b991-488a-ac81-5d94627d9e07-0', usage_metadata={'input_tokens': 12, 'output_tokens': 50, 'total_tokens': 62, 'input_token_details': {'cache_creation': 0, 'cache_read': 0}}),\n",
       " HumanMessage(content=\"what's my name?\", additional_kwargs={}, response_metadata={}, id='9a05305e-2e78-473b-9fc5-47a5e0533864'),\n",
       " AIMessage(content='You told me your name is Bob.', additional_kwargs={}, response_metadata={'id': 'msg_01GUJqbBMVdRxfRgNCdELf1x', 'model': 'claude-3-haiku-20240307', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 70, 'output_tokens': 11}, 'model_name': 'claude-3-haiku-20240307'}, id='run-905da30e-9014-4ec0-8e1f-2eaf606adddc-0', usage_metadata={'input_tokens': 70, 'output_tokens': 11, 'total_tokens': 81, 'input_token_details': {'cache_creation': 0, 'cache_read': 0}})]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "messages = app.get_state(config).values[\"messages\"]\n",
    "messages"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81be8a0a-1e94-4302-bd84-d1b72e3c501c",
   "metadata": {},
   "source": [
    "We can call `update_state` and pass in the id of the first message. This will delete that message."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "df1a0970-7e64-4170-beef-2855d10eef42",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'configurable': {'thread_id': '2',\n",
       "  'checkpoint_ns': '',\n",
       "  'checkpoint_id': '1f025359-21de-60f0-8003-97dbb738829b'}}"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from langchain_core.messages import RemoveMessage\n",
    "\n",
    "app.update_state(config, {\"messages\": RemoveMessage(id=messages[0].id)})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c9127ae-0d42-42b8-957f-ea69a5da555f",
   "metadata": {},
   "source": [
    "If we now look at the messages, we can verify that the first one was deleted."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8bfe4ffa-e170-43bc-aec4-6e36ac620931",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[AIMessage(content=\"It's nice to meet you, Bob! As an AI assistant, I'm here to help you with any questions or tasks you may have. Please feel free to ask me anything, and I'll do my best to assist you.\", additional_kwargs={}, response_metadata={'id': 'msg_01B37ymr999e6yd2RX4wnC7y', 'model': 'claude-3-haiku-20240307', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 12, 'output_tokens': 50}, 'model_name': 'claude-3-haiku-20240307'}, id='run-09073daa-b991-488a-ac81-5d94627d9e07-0', usage_metadata={'input_tokens': 12, 'output_tokens': 50, 'total_tokens': 62, 'input_token_details': {'cache_creation': 0, 'cache_read': 0}}),\n",
       " HumanMessage(content=\"what's my name?\", additional_kwargs={}, response_metadata={}, id='9a05305e-2e78-473b-9fc5-47a5e0533864'),\n",
       " AIMessage(content='You told me your name is Bob.', additional_kwargs={}, response_metadata={'id': 'msg_01GUJqbBMVdRxfRgNCdELf1x', 'model': 'claude-3-haiku-20240307', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 70, 'output_tokens': 11}, 'model_name': 'claude-3-haiku-20240307'}, id='run-905da30e-9014-4ec0-8e1f-2eaf606adddc-0', usage_metadata={'input_tokens': 70, 'output_tokens': 11, 'total_tokens': 81, 'input_token_details': {'cache_creation': 0, 'cache_read': 0}})]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "messages = app.get_state(config).values[\"messages\"]\n",
    "messages"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef129a75-4cad-44d7-b532-eb37b0553c0c",
   "metadata": {},
   "source": [
    "## Programmatically deleting messages\n",
    "\n",
    "We can also delete messages programmatically from inside the graph. Here we'll modify the graph to delete any old messages (longer than 3 messages ago) at the end of a graph run."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "bb22ede0-e153-4fd0-a4c0-f9af2f7663b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m20:07:26\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n",
      "\u001b[32m20:07:26\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n",
      "\u001b[32m20:07:26\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n"
     ]
    }
   ],
   "source": [
    "from langchain_core.messages import RemoveMessage\n",
    "from langgraph.graph import END\n",
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "\n",
    "\n",
    "def delete_messages(state):\n",
    "    messages = state[\"messages\"]\n",
    "    if len(messages) > 3:\n",
    "        return {\"messages\": [RemoveMessage(id=m.id) for m in messages[:-3]]}\n",
    "\n",
    "\n",
    "# We need to modify the logic to call delete_messages rather than end right away\n",
    "def should_continue(state: MessagesState) -> Literal[\"action\", \"delete_messages\"]:\n",
    "    \"\"\"Return the next node to execute.\"\"\"\n",
    "    last_message = state[\"messages\"][-1]\n",
    "    # If there is no function call, then we call our delete_messages function\n",
    "    if not last_message.tool_calls:\n",
    "        return \"delete_messages\"\n",
    "    # Otherwise if there is, we continue\n",
    "    return \"action\"\n",
    "\n",
    "\n",
    "# Define a new graph\n",
    "workflow = StateGraph(MessagesState)\n",
    "workflow.add_node(\"agent\", call_model)\n",
    "workflow.add_node(\"action\", tool_node)\n",
    "\n",
    "# This is our new node we're defining\n",
    "workflow.add_node(delete_messages)\n",
    "\n",
    "\n",
    "workflow.add_edge(START, \"agent\")\n",
    "workflow.add_conditional_edges(\n",
    "    \"agent\",\n",
    "    should_continue,\n",
    ")\n",
    "workflow.add_edge(\"action\", \"agent\")\n",
    "\n",
    "# This is the new edge we're adding: after we delete messages, we finish\n",
    "workflow.add_edge(\"delete_messages\", END)\n",
    "\n",
    "# Set up Redis connection for checkpointer\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "memory = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    memory = cp\n",
    "\n",
    "app = workflow.compile(checkpointer=memory)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52cbdef6-7db7-45a2-8194-de4f8929bd1f",
   "metadata": {},
   "source": [
    "We can now try this out. We can call the graph twice and then check the state"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3975f34c-c243-40ea-b9d2-424d50a48dc9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('human', \"hi! I'm bob\")]\n",
      "[('human', \"hi! I'm bob\"), ('ai', \"It's nice to meet you, Bob! As an AI assistant, I don't have a physical form, but I'm always happy to chat and help out however I can. Please let me know if you have any questions or if there's anything I can assist you with.\")]\n",
      "[('human', \"hi! I'm bob\"), ('ai', \"It's nice to meet you, Bob! As an AI assistant, I don't have a physical form, but I'm always happy to chat and help out however I can. Please let me know if you have any questions or if there's anything I can assist you with.\"), ('human', \"what's my name?\")]\n",
      "[('human', \"hi! I'm bob\"), ('ai', \"It's nice to meet you, Bob! As an AI assistant, I don't have a physical form, but I'm always happy to chat and help out however I can. Please let me know if you have any questions or if there's anything I can assist you with.\"), ('human', \"what's my name?\"), ('ai', 'You told me your name is Bob, so your name is Bob.')]\n",
      "[('ai', \"It's nice to meet you, Bob! As an AI assistant, I don't have a physical form, but I'm always happy to chat and help out however I can. Please let me know if you have any questions or if there's anything I can assist you with.\"), ('human', \"what's my name?\"), ('ai', 'You told me your name is Bob, so your name is Bob.')]\n"
     ]
    }
   ],
   "source": [
    "from langchain_core.messages import HumanMessage\n",
    "\n",
    "config = {\"configurable\": {\"thread_id\": \"3\"}}\n",
    "input_message = HumanMessage(content=\"hi! I'm bob\")\n",
    "for event in app.stream({\"messages\": [input_message]}, config, stream_mode=\"values\"):\n",
    "    print([(message.type, message.content) for message in event[\"messages\"]])\n",
    "\n",
    "\n",
    "input_message = HumanMessage(content=\"what's my name?\")\n",
    "for event in app.stream({\"messages\": [input_message]}, config, stream_mode=\"values\"):\n",
    "    print([(message.type, message.content) for message in event[\"messages\"]])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67b2fd2a-14a1-4c47-8632-f8cbb0ba1d35",
   "metadata": {},
   "source": [
    "If we now check the state, we should see that it is only three messages long. This is because we just deleted the earlier messages - otherwise it would be four!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a3e15abb-81d8-4072-9f10-61ae0fd61dac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[AIMessage(content=\"It's nice to meet you, Bob! As an AI assistant, I don't have a physical form, but I'm always happy to chat and help out however I can. Please let me know if you have any questions or if there's anything I can assist you with.\", additional_kwargs={}, response_metadata={'id': 'msg_01NX4B5nswy32CoYTyCFugsF', 'model': 'claude-3-haiku-20240307', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 12, 'output_tokens': 59}, 'model_name': 'claude-3-haiku-20240307'}, id='run-9e65ccb3-743e-4498-90cd-38081ca077d4-0', usage_metadata={'input_tokens': 12, 'output_tokens': 59, 'total_tokens': 71, 'input_token_details': {'cache_creation': 0, 'cache_read': 0}}),\n",
       " HumanMessage(content=\"what's my name?\", additional_kwargs={}, response_metadata={}, id='fb3aac2e-ec62-416c-aefe-891f0830cbd3'),\n",
       " AIMessage(content='You told me your name is Bob, so your name is Bob.', additional_kwargs={}, response_metadata={'id': 'msg_01WHWB3SkMQSXKAr1KJgf1Wh', 'model': 'claude-3-haiku-20240307', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 79, 'output_tokens': 17}, 'model_name': 'claude-3-haiku-20240307'}, id='run-b46fb921-e936-452e-9598-b61a36c4bf18-0', usage_metadata={'input_tokens': 79, 'output_tokens': 17, 'total_tokens': 96, 'input_token_details': {'cache_creation': 0, 'cache_read': 0}})]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "messages = app.get_state(config).values[\"messages\"]\n",
    "messages"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "359cfeae-d43a-46ee-9069-a1cab9a5720a",
   "metadata": {},
   "source": [
    "Remember, when deleting messages you will want to make sure that the remaining message list is still valid. This message list **may actually not be** - this is because it currently starts with an AI message, which some models do not allow."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

================
File: examples/memory/manage-conversation-history.ipynb
================
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "51466c8d-8ce4-4b3d-be4e-18fdbeda5f53",
   "metadata": {},
   "source": [
    "# How to manage conversation history\n",
    "\n",
    "One of the most common use cases for persistence is to use it to keep track of conversation history. This is great - it makes it easy to continue conversations. As conversations get longer and longer, however, this conversation history can build up and take up more and more of the context window. This can often be undesirable as it leads to more expensive and longer calls to the LLM, and potentially ones that error. In order to prevent this from happening, you need to properly manage the conversation history.\n",
    "\n",
    "Note: this guide focuses on how to do this in LangGraph, where you can fully customize how this is done. If you want a more off-the-shelf solution, you can look into functionality provided in LangChain:\n",
    "\n",
    "- [How to filter messages](https://python.langchain.com/docs/how_to/filter_messages/)\n",
    "- [How to trim messages](https://python.langchain.com/docs/how_to/trim_messages/)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cbd446a-808f-4394-be92-d45ab818953c",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "First, let's set up the packages we're going to want to use"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "af4ce0ba-7596-4e5f-8bf8-0b0bd6e62833",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture --no-stderr\n",
    "%pip install --quiet -U langgraph langchain_anthropic"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0abe11f4-62ed-4dc4-8875-3db21e260d1d",
   "metadata": {},
   "source": [
    "Next, we need to set API keys for Anthropic (the LLM we will use)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c903a1cf-2977-4e2d-ad7d-8b3946821d89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "ANTHROPIC_API_KEY:  ········\n"
     ]
    }
   ],
   "source": [
    "import getpass\n",
    "import os\n",
    "\n",
    "\n",
    "def _set_env(var: str):\n",
    "    if not os.environ.get(var):\n",
    "        os.environ[var] = getpass.getpass(f\"{var}: \")\n",
    "\n",
    "\n",
    "_set_env(\"ANTHROPIC_API_KEY\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0ed46a8-effe-4596-b0e1-a6a29ee16f5c",
   "metadata": {},
   "source": [
    "<div class=\"admonition tip\">\n",
    "    <p class=\"admonition-title\">Set up <a href=\"https://smith.langchain.com\">LangSmith</a> for LangGraph development</p>\n",
    "    <p style=\"padding-top: 5px;\">\n",
    "        Sign up for LangSmith to quickly spot issues and improve the performance of your LangGraph projects. LangSmith lets you use trace data to debug, test, and monitor your LLM apps built with LangGraph — read more about how to get started <a href=\"https://docs.smith.langchain.com\">here</a>. \n",
    "    </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4767ef1c-a7cf-41f8-a301-558988cb7ac5",
   "metadata": {},
   "source": [
    "## Build the agent\n",
    "Let's now build a simple ReAct style agent."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "378899a9-3b9a-4748-95b6-eb00e0828677",
   "metadata": {},
   "outputs": [],
   "source": [
    "from typing import Literal\n",
    "\n",
    "from langchain_anthropic import ChatAnthropic\n",
    "from langchain_core.tools import tool\n",
    "\n",
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "from langgraph.graph import MessagesState, StateGraph, START, END\n",
    "from langgraph.prebuilt import ToolNode\n",
    "\n",
    "# Set up Redis connection for checkpointer\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "memory = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    memory = cp\n",
    "\n",
    "\n",
    "@tool\n",
    "def search(query: str):\n",
    "    \"\"\"Call to surf the web.\"\"\"\n",
    "    # This is a placeholder for the actual implementation\n",
    "    # Don't let the LLM know this though 😊\n",
    "    return \"It's sunny in San Francisco, but you better look out if you're a Gemini 😈.\"\n",
    "\n",
    "\n",
    "tools = [search]\n",
    "tool_node = ToolNode(tools)\n",
    "model = ChatAnthropic(model_name=\"claude-3-haiku-20240307\")\n",
    "bound_model = model.bind_tools(tools)\n",
    "\n",
    "\n",
    "def should_continue(state: MessagesState):\n",
    "    \"\"\"Return the next node to execute.\"\"\"\n",
    "    last_message = state[\"messages\"][-1]\n",
    "    # If there is no function call, then we finish\n",
    "    if not last_message.tool_calls:\n",
    "        return END\n",
    "    # Otherwise if there is, we continue\n",
    "    return \"action\"\n",
    "\n",
    "\n",
    "# Define the function that calls the model\n",
    "def call_model(state: MessagesState):\n",
    "    response = bound_model.invoke(state[\"messages\"])\n",
    "    # We return a list, because this will get added to the existing list\n",
    "    return {\"messages\": response}\n",
    "\n",
    "\n",
    "# Define a new graph\n",
    "workflow = StateGraph(MessagesState)\n",
    "\n",
    "# Define the two nodes we will cycle between\n",
    "workflow.add_node(\"agent\", call_model)\n",
    "workflow.add_node(\"action\", tool_node)\n",
    "\n",
    "# Set the entrypoint as `agent`\n",
    "# This means that this node is the first one called\n",
    "workflow.add_edge(START, \"agent\")\n",
    "\n",
    "# We now add a conditional edge\n",
    "workflow.add_conditional_edges(\n",
    "    # First, we define the start node. We use `agent`.\n",
    "    # This means these are the edges taken after the `agent` node is called.\n",
    "    \"agent\",\n",
    "    # Next, we pass in the function that will determine which node is called next.\n",
    "    should_continue,\n",
    "    # Next, we pass in the path map - all the possible nodes this edge could go to\n",
    "    [\"action\", END],\n",
    ")\n",
    "\n",
    "# We now add a normal edge from `tools` to `agent`.\n",
    "# This means that after `tools` is called, `agent` node is called next.\n",
    "workflow.add_edge(\"action\", \"agent\")\n",
    "\n",
    "# Finally, we compile it!\n",
    "# This compiles it into a LangChain Runnable,\n",
    "# meaning you can use it as you would any other runnable\n",
    "app = workflow.compile(checkpointer=memory)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "57b27553-21be-43e5-ac48-d1d0a3aa0dca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "hi! I'm bob\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "Hi Bob! It's nice to meet you. How can I assist you today?\n",
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "what's my name?\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "You said your name is Bob, so your name is Bob.\n"
     ]
    }
   ],
   "source": [
    "from langchain_core.messages import HumanMessage\n",
    "\n",
    "config = {\"configurable\": {\"thread_id\": \"2\"}}\n",
    "input_message = HumanMessage(content=\"hi! I'm bob\")\n",
    "for event in app.stream({\"messages\": [input_message]}, config, stream_mode=\"values\"):\n",
    "    event[\"messages\"][-1].pretty_print()\n",
    "\n",
    "\n",
    "input_message = HumanMessage(content=\"what's my name?\")\n",
    "for event in app.stream({\"messages\": [input_message]}, config, stream_mode=\"values\"):\n",
    "    event[\"messages\"][-1].pretty_print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d5da4c9-ba8b-46cb-a860-63fe585d15c5",
   "metadata": {},
   "source": [
    "## Filtering messages\n",
    "\n",
    "The most straight-forward thing to do to prevent conversation history from blowing up is to filter the list of messages before they get passed to the LLM. This involves two parts: defining a function to filter messages, and then adding it to the graph. See the example below which defines a really simple `filter_messages` function and then uses it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "eb20430f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m20:08:12\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n",
      "\u001b[32m20:08:12\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n",
      "\u001b[32m20:08:12\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n"
     ]
    }
   ],
   "source": [
    "from typing import Literal\n",
    "\n",
    "from langchain_anthropic import ChatAnthropic\n",
    "from langchain_core.tools import tool\n",
    "\n",
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "from langgraph.graph import MessagesState, StateGraph, START\n",
    "from langgraph.prebuilt import ToolNode\n",
    "\n",
    "# Set up Redis connection for checkpointer\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "memory = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    memory = cp\n",
    "\n",
    "\n",
    "@tool\n",
    "def search(query: str):\n",
    "    \"\"\"Call to surf the web.\"\"\"\n",
    "    # This is a placeholder for the actual implementation\n",
    "    # Don't let the LLM know this though 😊\n",
    "    return \"It's sunny in San Francisco, but you better look out if you're a Gemini 😈.\"\n",
    "\n",
    "\n",
    "tools = [search]\n",
    "tool_node = ToolNode(tools)\n",
    "model = ChatAnthropic(model_name=\"claude-3-haiku-20240307\")\n",
    "bound_model = model.bind_tools(tools)\n",
    "\n",
    "\n",
    "def should_continue(state: MessagesState):\n",
    "    \"\"\"Return the next node to execute.\"\"\"\n",
    "    last_message = state[\"messages\"][-1]\n",
    "    # If there is no function call, then we finish\n",
    "    if not last_message.tool_calls:\n",
    "        return END\n",
    "    # Otherwise if there is, we continue\n",
    "    return \"action\"\n",
    "\n",
    "\n",
    "def filter_messages(messages: list):\n",
    "    # This is very simple helper function which only ever uses the last message\n",
    "    return messages[-1:]\n",
    "\n",
    "\n",
    "# Define the function that calls the model\n",
    "def call_model(state: MessagesState):\n",
    "    messages = filter_messages(state[\"messages\"])\n",
    "    response = bound_model.invoke(messages)\n",
    "    # We return a list, because this will get added to the existing list\n",
    "    return {\"messages\": response}\n",
    "\n",
    "\n",
    "# Define a new graph\n",
    "workflow = StateGraph(MessagesState)\n",
    "\n",
    "# Define the two nodes we will cycle between\n",
    "workflow.add_node(\"agent\", call_model)\n",
    "workflow.add_node(\"action\", tool_node)\n",
    "\n",
    "# Set the entrypoint as `agent`\n",
    "# This means that this node is the first one called\n",
    "workflow.add_edge(START, \"agent\")\n",
    "\n",
    "# We now add a conditional edge\n",
    "workflow.add_conditional_edges(\n",
    "    # First, we define the start node. We use `agent`.\n",
    "    # This means these are the edges taken after the `agent` node is called.\n",
    "    \"agent\",\n",
    "    # Next, we pass in the function that will determine which node is called next.\n",
    "    should_continue,\n",
    "    # Next, we pass in the pathmap - all the possible nodes this edge could go to\n",
    "    [\"action\", END],\n",
    ")\n",
    "\n",
    "# We now add a normal edge from `tools` to `agent`.\n",
    "# This means that after `tools` is called, `agent` node is called next.\n",
    "workflow.add_edge(\"action\", \"agent\")\n",
    "\n",
    "# Finally, we compile it!\n",
    "# This compiles it into a LangChain Runnable,\n",
    "# meaning you can use it as you would any other runnable\n",
    "app = workflow.compile(checkpointer=memory)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "52468ebb-4b23-45ac-a98e-b4439f37740a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "hi! I'm bob\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "Nice to meet you, Bob! It's a pleasure to chat with you. As an AI assistant, I'm here to help you with any tasks or queries you may have. Please feel free to ask me anything, and I'll do my best to assist you.\n",
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "what's my name?\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "I'm afraid I don't actually know your name. As an AI assistant, I don't have personal information about you unless you provide it to me.\n"
     ]
    }
   ],
   "source": [
    "from langchain_core.messages import HumanMessage\n",
    "\n",
    "config = {\"configurable\": {\"thread_id\": \"2\"}}\n",
    "input_message = HumanMessage(content=\"hi! I'm bob\")\n",
    "for event in app.stream({\"messages\": [input_message]}, config, stream_mode=\"values\"):\n",
    "    event[\"messages\"][-1].pretty_print()\n",
    "\n",
    "# This will now not remember the previous messages\n",
    "# (because we set `messages[-1:]` in the filter messages argument)\n",
    "input_message = HumanMessage(content=\"what's my name?\")\n",
    "for event in app.stream({\"messages\": [input_message]}, config, stream_mode=\"values\"):\n",
    "    event[\"messages\"][-1].pretty_print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "454102b6-7112-4710-aa08-ba675e8be14c",
   "metadata": {},
   "source": [
    "In the above example we defined the `filter_messages` function ourselves. We also provide off-the-shelf ways to trim and filter messages in LangChain. \n",
    "\n",
    "- [How to filter messages](https://python.langchain.com/docs/how_to/filter_messages/)\n",
    "- [How to trim messages](https://python.langchain.com/docs/how_to/trim_messages/)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

================
File: examples/memory/semantic-search.ipynb
================
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# How to add semantic search to your agent's memory\n",
    "\n",
    "This guide shows how to enable semantic search in your agent's memory store. This lets search for items in the store by semantic similarity.\n",
    "\n",
    "!!! tip Prerequisites\n",
    "    This guide assumes familiarity with the [memory in LangGraph](https://langchain-ai.github.io/langgraph/concepts/memory/).\n",
    "\n",
    "> **Note**: This notebook uses different namespaces (`user_123`, `user_456`, etc.) for different examples to avoid conflicts between stored memories. Each example demonstrates a specific feature in isolation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture --no-stderr\n",
    "%pip install -U langgraph langchain-openai langchain"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "OPENAI_API_KEY:  ········\n"
     ]
    }
   ],
   "source": [
    "import getpass\n",
    "import os\n",
    "\n",
    "\n",
    "def _set_env(var: str):\n",
    "    if not os.environ.get(var):\n",
    "        os.environ[var] = getpass.getpass(f\"{var}: \")\n",
    "\n",
    "\n",
    "_set_env(\"OPENAI_API_KEY\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, create the store with an [index configuration](https://langchain-ai.github.io/langgraph/reference/store/#langgraph.store.base.IndexConfig). By default, stores are configured without semantic/vector search. You can opt in to indexing items when creating the store by providing an [IndexConfig](https://langchain-ai.github.io/langgraph/reference/store/#langgraph.store.base.IndexConfig) to the store's constructor. If your store class does not implement this interface, or if you do not pass in an index configuration, semantic search is disabled, and all `index` arguments passed to `put` or `aput` will have no effect. Below is an example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_1484/3301134131.py:6: LangChainBetaWarning: The function `init_embeddings` is in beta. It is actively being worked on, so the API may change.\n",
      "  embeddings = init_embeddings(\"openai:text-embedding-3-small\")\n"
     ]
    }
   ],
   "source": [
    "from langchain.embeddings import init_embeddings\n",
    "from langgraph.store.redis import RedisStore\n",
    "from langgraph.store.base import IndexConfig\n",
    "\n",
    "# Create Redis store with semantic search enabled\n",
    "embeddings = init_embeddings(\"openai:text-embedding-3-small\")\n",
    "\n",
    "# Set up Redis connection\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "\n",
    "# Create index configuration for vector search\n",
    "index_config: IndexConfig = {\n",
    "    \"dims\": 1536,\n",
    "    \"embed\": embeddings,\n",
    "    \"ann_index_config\": {\n",
    "        \"vector_type\": \"vector\",\n",
    "    },\n",
    "    \"distance_type\": \"cosine\",\n",
    "}\n",
    "\n",
    "# Initialize the Redis store\n",
    "redis_store = None\n",
    "with RedisStore.from_conn_string(REDIS_URI, index=index_config) as s:\n",
    "    s.setup()\n",
    "    redis_store = s\n",
    "    \n",
    "store = redis_store"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's store some memories:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Store some memories\n",
    "store.put((\"user_123\", \"memories\"), \"1\", {\"text\": \"I love pizza\"})\n",
    "store.put((\"user_123\", \"memories\"), \"2\", {\"text\": \"I prefer Italian food\"})\n",
    "store.put((\"user_123\", \"memories\"), \"3\", {\"text\": \"I don't like spicy food\"})\n",
    "store.put((\"user_123\", \"memories\"), \"3\", {\"text\": \"I am studying econometrics\"})\n",
    "store.put((\"user_123\", \"memories\"), \"3\", {\"text\": \"I am a plumber\"})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Search memories using natural language:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Memory: I prefer Italian food (similarity: 0.46481049060799995)\n",
      "Memory: I love pizza (similarity: 0.35512423515299996)\n",
      "Memory: I am a plumber (similarity: 0.155683338642)\n"
     ]
    }
   ],
   "source": [
    "# Find memories about food preferences\n",
    "memories = store.search((\"user_123\", \"memories\"), query=\"I like food?\", limit=5)\n",
    "\n",
    "for memory in memories:\n",
    "    print(f'Memory: {memory.value[\"text\"]} (similarity: {memory.score})')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using in your agent\n",
    "\n",
    "Add semantic search to any node by injecting the store."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "What are you in the mood for? Since you love pizza, would you like to have that, or are you thinking about something else?"
     ]
    }
   ],
   "source": [
    "from typing import Optional\n",
    "\n",
    "from langchain.chat_models import init_chat_model\n",
    "from langgraph.store.base import BaseStore\n",
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "\n",
    "from langgraph.graph import START, MessagesState, StateGraph\n",
    "\n",
    "llm = init_chat_model(\"openai:gpt-4o-mini\")\n",
    "\n",
    "\n",
    "def chat(state, *, store: BaseStore):\n",
    "    # Search based on user's last message\n",
    "    items = store.search(\n",
    "        (\"user_123\", \"memories\"), query=state[\"messages\"][-1].content, limit=2\n",
    "    )\n",
    "    memories = \"\\n\".join(item.value[\"text\"] for item in items)\n",
    "    memories = f\"## Memories of user\\n{memories}\" if memories else \"\"\n",
    "    response = llm.invoke(\n",
    "        [\n",
    "            {\"role\": \"system\", \"content\": f\"You are a helpful assistant.\\n{memories}\"},\n",
    "            *state[\"messages\"],\n",
    "        ]\n",
    "    )\n",
    "    return {\"messages\": [response]}\n",
    "\n",
    "\n",
    "# Set up Redis connection for checkpointer\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "checkpointer = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    checkpointer = cp\n",
    "\n",
    "builder = StateGraph(MessagesState)\n",
    "builder.add_node(chat)\n",
    "builder.add_edge(START, \"chat\")\n",
    "graph = builder.compile(checkpointer=checkpointer, store=store)\n",
    "\n",
    "# Add required configuration parameters\n",
    "config = {\"configurable\": {\"thread_id\": \"semantic_search_thread\"}}\n",
    "for message, metadata in graph.stream(\n",
    "    input={\"messages\": [{\"role\": \"user\", \"content\": \"I'm hungry\"}]},\n",
    "    config=config,  # Add this line with required config\n",
    "    stream_mode=\"messages\",\n",
    "):\n",
    "    print(message.content, end=\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using in `create_react_agent` {#using-in-create-react-agent}\n",
    "\n",
    "Add semantic search to your tool calling agent by injecting the store in the `prompt` function. You can also use the store in a tool to let your agent manually store or search for memories."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m20:09:05\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n",
      "\u001b[32m20:09:05\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n",
      "\u001b[32m20:09:05\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n"
     ]
    }
   ],
   "source": [
    "import uuid\n",
    "from typing import Optional\n",
    "\n",
    "from langchain.chat_models import init_chat_model\n",
    "from langgraph.prebuilt import InjectedStore\n",
    "from langgraph.store.base import BaseStore\n",
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "from typing_extensions import Annotated\n",
    "\n",
    "from langgraph.prebuilt import create_react_agent\n",
    "\n",
    "\n",
    "def prepare_messages(state, *, store: BaseStore):\n",
    "    # Search based on user's last message\n",
    "    items = store.search(\n",
    "        (\"user_123\", \"memories\"), query=state[\"messages\"][-1].content, limit=2\n",
    "    )\n",
    "    memories = \"\\n\".join(item.value[\"text\"] for item in items)\n",
    "    memories = f\"## Memories of user\\n{memories}\" if memories else \"\"\n",
    "    return [\n",
    "        {\"role\": \"system\", \"content\": f\"You are a helpful assistant.\\n{memories}\"}\n",
    "    ] + state[\"messages\"]\n",
    "\n",
    "\n",
    "# You can also use the store directly within a tool!\n",
    "def upsert_memory(\n",
    "    content: str,\n",
    "    *,\n",
    "    memory_id: Optional[uuid.UUID] = None,\n",
    "    store: Annotated[BaseStore, InjectedStore],\n",
    "):\n",
    "    \"\"\"Upsert a memory in the database.\"\"\"\n",
    "    # The LLM can use this tool to store a new memory\n",
    "    mem_id = memory_id or uuid.uuid4()\n",
    "    store.put(\n",
    "        (\"user_123\", \"memories\"),\n",
    "        key=str(mem_id),\n",
    "        value={\"text\": content},\n",
    "    )\n",
    "    return f\"Stored memory {mem_id}\"\n",
    "\n",
    "\n",
    "# Set up Redis connection for checkpointer\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "checkpointer = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    checkpointer = cp\n",
    "\n",
    "agent = create_react_agent(\n",
    "    init_chat_model(\"openai:gpt-4o-mini\"),\n",
    "    tools=[upsert_memory],\n",
    "    # The 'prompt' function is run to prepare the messages for the LLM. It is called\n",
    "    # right before each LLM call\n",
    "    prompt=prepare_messages,\n",
    "    checkpointer=checkpointer,\n",
    "    store=store,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Based on your memories, you have a preference for Italian food, and you specifically love pizza."
     ]
    }
   ],
   "source": [
    "# Alternative approach using agent\n",
    "config = {\"configurable\": {\"thread_id\": \"semantic_search_thread_agent\"}}\n",
    "try:\n",
    "    # Run the agent with proper configuration\n",
    "    for message, metadata in agent.stream(\n",
    "        input={\"messages\": [{\"role\": \"user\", \"content\": \"Tell me about my food preferences based on my memories\"}]},\n",
    "        config=config,  # This is required for the checkpointer\n",
    "        stream_mode=\"messages\",\n",
    "    ):\n",
    "        print(message.content, end=\"\")\n",
    "except Exception as e:\n",
    "    print(f\"Error running agent: {e}\")\n",
    "    # Try with different configuration if needed\n",
    "    config = {\"configurable\": {\"thread_id\": \"semantic_search_thread_agent\", \"checkpoint_ns\": \"\", \"checkpoint_id\": \"\"}}\n",
    "    for message, metadata in agent.stream(\n",
    "        input={\"messages\": [{\"role\": \"user\", \"content\": \"Tell me about my food preferences based on my memories\"}]},\n",
    "        config=config,\n",
    "        stream_mode=\"messages\",\n",
    "    ):\n",
    "        print(message.content, end=\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Advanced Usage\n",
    "\n",
    "#### Multi-vector indexing\n",
    "\n",
    "Store and search different aspects of memories separately to improve recall or omit certain fields from being indexed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m20:09:08\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n",
      "\u001b[32m20:09:08\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n",
      "Expect mem 2\n",
      "Item: mem2; Score (0.589500546455)\n",
      "Memory: Ate alone at home\n",
      "Emotion: felt a bit lonely\n",
      "\n",
      "Expect mem1\n",
      "Item: mem2; Score (0.23533040285100004)\n",
      "Memory: Ate alone at home\n",
      "Emotion: felt a bit lonely\n",
      "\n",
      "Expect random lower score (ravioli not indexed)\n",
      "Item: mem2; Score (0.15017718076700004)\n",
      "Memory: Ate alone at home\n",
      "Emotion: felt a bit lonely\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Configure Redis store to embed both memory content and emotional context\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "with RedisStore.from_conn_string(\n",
    "    REDIS_URI, \n",
    "    index={\"embed\": embeddings, \"dims\": 1536, \"fields\": [\"memory\", \"emotional_context\"]}\n",
    ") as store:\n",
    "    store.setup()\n",
    "    \n",
    "    # Store memories with different content/emotion pairs\n",
    "    # Use a different namespace to avoid conflicts with previous examples\n",
    "    store.put(\n",
    "        (\"user_456\", \"multi_vector_memories\"),\n",
    "        \"mem1\",\n",
    "        {\n",
    "            \"memory\": \"Had pizza with friends at Mario's\",\n",
    "            \"emotional_context\": \"felt happy and connected\",\n",
    "            \"this_isnt_indexed\": \"I prefer ravioli though\",\n",
    "        },\n",
    "    )\n",
    "    store.put(\n",
    "        (\"user_456\", \"multi_vector_memories\"),\n",
    "        \"mem2\",\n",
    "        {\n",
    "            \"memory\": \"Ate alone at home\",\n",
    "            \"emotional_context\": \"felt a bit lonely\",\n",
    "            \"this_isnt_indexed\": \"I like pie\",\n",
    "        },\n",
    "    )\n",
    "\n",
    "    # Search focusing on emotional state - matches mem2\n",
    "    results = store.search(\n",
    "        (\"user_456\", \"multi_vector_memories\"), query=\"times they felt isolated\", limit=1\n",
    "    )\n",
    "    print(\"Expect mem 2\")\n",
    "    for r in results:\n",
    "        print(f\"Item: {r.key}; Score ({r.score})\")\n",
    "        print(f\"Memory: {r.value['memory']}\")\n",
    "        print(f\"Emotion: {r.value['emotional_context']}\\n\")\n",
    "\n",
    "    # Search focusing on social eating - matches mem1\n",
    "    print(\"Expect mem1\")\n",
    "    results = store.search(\n",
    "        (\"user_456\", \"multi_vector_memories\"), query=\"fun pizza\", limit=1\n",
    "    )\n",
    "    for r in results:\n",
    "        print(f\"Item: {r.key}; Score ({r.score})\")\n",
    "        print(f\"Memory: {r.value['memory']}\")\n",
    "        print(f\"Emotion: {r.value['emotional_context']}\\n\")\n",
    "\n",
    "    print(\"Expect random lower score (ravioli not indexed)\")\n",
    "    results = store.search(\n",
    "        (\"user_456\", \"multi_vector_memories\"), query=\"ravioli\", limit=1\n",
    "    )\n",
    "    for r in results:\n",
    "        print(f\"Item: {r.key}; Score ({r.score})\")\n",
    "        print(f\"Memory: {r.value['memory']}\")\n",
    "        print(f\"Emotion: {r.value['emotional_context']}\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Override fields at storage time\n",
    "You can override which fields to embed when storing a specific memory using `put(..., index=[...fields])`, regardless of the store's default configuration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m20:09:10\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n",
      "\u001b[32m20:09:10\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n",
      "Expect mem1\n",
      "Item: mem1; Score (0.337496995926)\n",
      "Memory: I love spicy food\n",
      "Context: At a Thai restaurant\n",
      "\n",
      "Expect mem2\n",
      "Item: mem2; Score (0.36791670322400005)\n",
      "Memory: The restaurant was too loud\n",
      "Context: Dinner at an Italian place\n",
      "\n"
     ]
    }
   ],
   "source": [
    "REDIS_URI = \"redis://redis:6379\"\n",
    "with RedisStore.from_conn_string(\n",
    "    REDIS_URI,\n",
    "    index={\n",
    "        \"embed\": embeddings,\n",
    "        \"dims\": 1536,\n",
    "        \"fields\": [\"memory\"],\n",
    "    }  # Default to embed memory field\n",
    ") as store:\n",
    "    store.setup()\n",
    "    \n",
    "    # Store one memory with default indexing\n",
    "    # Use a different namespace to avoid conflicts with previous examples\n",
    "    store.put(\n",
    "        (\"user_789\", \"override_field_memories\"),\n",
    "        \"mem1\",\n",
    "        {\"memory\": \"I love spicy food\", \"context\": \"At a Thai restaurant\"},\n",
    "    )\n",
    "\n",
    "    # Store another overriding which fields to embed\n",
    "    store.put(\n",
    "        (\"user_789\", \"override_field_memories\"),\n",
    "        \"mem2\",\n",
    "        {\"memory\": \"The restaurant was too loud\", \"context\": \"Dinner at an Italian place\"},\n",
    "        index=[\"context\"],  # Override: only embed the context\n",
    "    )\n",
    "\n",
    "    # Search about food - matches mem1 (using default field)\n",
    "    print(\"Expect mem1\")\n",
    "    results = store.search(\n",
    "        (\"user_789\", \"override_field_memories\"), query=\"what food do they like\", limit=1\n",
    "    )\n",
    "    for r in results:\n",
    "        print(f\"Item: {r.key}; Score ({r.score})\")\n",
    "        print(f\"Memory: {r.value['memory']}\")\n",
    "        print(f\"Context: {r.value['context']}\\n\")\n",
    "\n",
    "    # Search about restaurant atmosphere - matches mem2 (using overridden field)\n",
    "    print(\"Expect mem2\")\n",
    "    results = store.search(\n",
    "        (\"user_789\", \"override_field_memories\"), query=\"restaurant environment\", limit=1\n",
    "    )\n",
    "    for r in results:\n",
    "        print(f\"Item: {r.key}; Score ({r.score})\")\n",
    "        print(f\"Memory: {r.value['memory']}\")\n",
    "        print(f\"Context: {r.value['context']}\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Disable Indexing for Specific Memories\n",
    "\n",
    "Some memories shouldn't be searchable by content. You can disable indexing for these while still storing them using \n",
    "`put(..., index=False)`. Example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m20:09:11\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n",
      "\u001b[32m20:09:11\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n",
      "Expect mem1\n",
      "Item: mem1; Score (0.32269132137300005)\n",
      "Memory: I love chocolate ice cream\n",
      "Type: preference\n",
      "\n",
      "Expect low score (mem2 not indexed)\n",
      "Item: mem1; Score (0.010228455066999986)\n",
      "Memory: I love chocolate ice cream\n",
      "Type: preference\n",
      "\n"
     ]
    }
   ],
   "source": [
    "REDIS_URI = \"redis://redis:6379\"\n",
    "with RedisStore.from_conn_string(\n",
    "    REDIS_URI,\n",
    "    index={\"embed\": embeddings, \"dims\": 1536, \"fields\": [\"memory\"]}\n",
    ") as store:\n",
    "    store.setup()\n",
    "    \n",
    "    # Store a normal indexed memory\n",
    "    # Use a different namespace to avoid conflicts with previous examples\n",
    "    store.put(\n",
    "        (\"user_999\", \"disable_index_memories\"),\n",
    "        \"mem1\",\n",
    "        {\"memory\": \"I love chocolate ice cream\", \"type\": \"preference\"},\n",
    "    )\n",
    "\n",
    "    # Store a system memory without indexing\n",
    "    store.put(\n",
    "        (\"user_999\", \"disable_index_memories\"),\n",
    "        \"mem2\",\n",
    "        {\"memory\": \"User completed onboarding\", \"type\": \"system\"},\n",
    "        index=False,  # Disable indexing entirely\n",
    "    )\n",
    "\n",
    "    # Search about food preferences - finds mem1\n",
    "    print(\"Expect mem1\")\n",
    "    results = store.search((\"user_999\", \"disable_index_memories\"), query=\"what food preferences\", limit=1)\n",
    "    for r in results:\n",
    "        print(f\"Item: {r.key}; Score ({r.score})\")\n",
    "        print(f\"Memory: {r.value['memory']}\")\n",
    "        print(f\"Type: {r.value['type']}\\n\")\n",
    "\n",
    "    # Search about onboarding - won't find mem2 (not indexed)\n",
    "    print(\"Expect low score (mem2 not indexed)\")\n",
    "    results = store.search((\"user_999\", \"disable_index_memories\"), query=\"onboarding status\", limit=1)\n",
    "    for r in results:\n",
    "        print(f\"Item: {r.key}; Score ({r.score})\")\n",
    "        print(f\"Memory: {r.value['memory']}\")\n",
    "        print(f\"Type: {r.value['type']}\\n\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

================
File: examples/.gitignore
================
# .gitignore for /docs directory
.ipynb_checkpoints
*.pyc
__pycache__

================
File: examples/create-react-agent-hitl.ipynb
================
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "992c4695-ec4f-428d-bd05-fb3b5fbd70f4",
   "metadata": {},
   "source": [
    "# How to add human-in-the-loop processes to the prebuilt ReAct agent\n",
    "\n",
    "<div class=\"admonition tip\">\n",
    "    <p class=\"admonition-title\">Prerequisites</p>\n",
    "    <p>\n",
    "        This guide assumes familiarity with the following:\n",
    "        <ul>\n",
    "            <li>            \n",
    "                <a href=\"https://langchain-ai.github.io/langgraph/concepts/human_in_the_loop/\">\n",
    "                    Human-in-the-loop\n",
    "                </a>\n",
    "            </li>\n",
    "            <li>\n",
    "                <a href=\"https://langchain-ai.github.io/langgraph/concepts/agentic_concepts/\">\n",
    "                    Agent Architectures\n",
    "                </a>                   \n",
    "            </li>\n",
    "            <li>\n",
    "                <a href=\"https://python.langchain.com/docs/concepts/chat_models/\">\n",
    "                    Chat Models\n",
    "                </a>\n",
    "            </li>\n",
    "            <li>\n",
    "                <a href=\"https://python.langchain.com/docs/concepts/tools/\">\n",
    "                    Tools\n",
    "                </a>\n",
    "            </li>            \n",
    "        </ul>\n",
    "    </p>\n",
    "</div> \n",
    "\n",
    "This guide will show how to add human-in-the-loop processes to the prebuilt ReAct agent. Please see [this tutorial](../create-react-agent) for how to get started with the prebuilt ReAct agent\n",
    "\n",
    "You can add a a breakpoint before tools are called by passing `interrupt_before=[\"tools\"]` to `create_react_agent`. Note that you need to be using a checkpointer for this to work."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7be3889f-3c17-4fa1-bd2b-84114a2c7247",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "First, let's install the required packages and set our API keys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a213e11a-5c62-4ddb-a707-490d91add383",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture --no-stderr\n",
    "%pip install -U langgraph langchain-openai"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "23a1885c-04ab-4750-aefa-105891fddf3e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "OPENAI_API_KEY:  ········\n"
     ]
    }
   ],
   "source": [
    "import getpass\n",
    "import os\n",
    "\n",
    "\n",
    "def _set_env(var: str):\n",
    "    if not os.environ.get(var):\n",
    "        os.environ[var] = getpass.getpass(f\"{var}: \")\n",
    "\n",
    "\n",
    "_set_env(\"OPENAI_API_KEY\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4c5c054",
   "metadata": {},
   "source": [
    "<div class=\"admonition tip\">\n",
    "    <p class=\"admonition-title\">Set up <a href=\"https://smith.langchain.com\">LangSmith</a> for LangGraph development</p>\n",
    "    <p style=\"padding-top: 5px;\">\n",
    "        Sign up for LangSmith to quickly spot issues and improve the performance of your LangGraph projects. LangSmith lets you use trace data to debug, test, and monitor your LLM apps built with LangGraph — read more about how to get started <a href=\"https://docs.smith.langchain.com\">here</a>. \n",
    "    </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "03c0f089-070c-4cd4-87e0-6c51f2477b82",
   "metadata": {},
   "source": [
    "## Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7a154152-973e-4b5d-aa13-48c617744a4c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# First we initialize the model we want to use.\n",
    "from langchain_openai import ChatOpenAI\n",
    "\n",
    "model = ChatOpenAI(model=\"gpt-4o\", temperature=0)\n",
    "\n",
    "\n",
    "# For this tutorial we will use custom tool that returns pre-defined values for weather in two cities (NYC & SF)\n",
    "from typing import Literal\n",
    "\n",
    "from langchain_core.tools import tool\n",
    "\n",
    "\n",
    "@tool\n",
    "def get_weather(location: str):\n",
    "    \"\"\"Use this to get weather information from a given location.\"\"\"\n",
    "    if location.lower() in [\"nyc\", \"new york\"]:\n",
    "        return \"It might be cloudy in nyc\"\n",
    "    elif location.lower() in [\"sf\", \"san francisco\"]:\n",
    "        return \"It's always sunny in sf\"\n",
    "    else:\n",
    "        raise AssertionError(\"Unknown Location\")\n",
    "\n",
    "\n",
    "tools = [get_weather]\n",
    "\n",
    "# We need a checkpointer to enable human-in-the-loop patterns\n",
    "# Using Redis checkpointer for persistence\n",
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "\n",
    "# Set up Redis connection\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "memory = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    memory = cp\n",
    "\n",
    "# Define the graph\n",
    "\n",
    "from langgraph.prebuilt import create_react_agent\n",
    "\n",
    "graph = create_react_agent(\n",
    "    model, tools=tools, interrupt_before=[\"tools\"], checkpointer=memory\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00407425-506d-4ffd-9c86-987921d8c844",
   "metadata": {},
   "source": [
    "## Usage\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "16636975-5f2d-4dc7-ab8e-d0bea0830a28",
   "metadata": {},
   "outputs": [],
   "source": [
    "def print_stream(stream):\n",
    "    \"\"\"A utility to pretty print the stream.\"\"\"\n",
    "    for s in stream:\n",
    "        message = s[\"messages\"][-1]\n",
    "        if isinstance(message, tuple):\n",
    "            print(message)\n",
    "        else:\n",
    "            message.pretty_print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9ffff6c3-a4f5-47c9-b51d-97caaee85cd6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "what is the weather in SF, CA?\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "Tool Calls:\n",
      "  get_weather (call_UXoJGnV30VwVoT0W1KNcdvi1)\n",
      " Call ID: call_UXoJGnV30VwVoT0W1KNcdvi1\n",
      "  Args:\n",
      "    location: SF, CA\n"
     ]
    }
   ],
   "source": [
    "from langchain_core.messages import HumanMessage\n",
    "\n",
    "config = {\"configurable\": {\"thread_id\": \"42\"}}\n",
    "inputs = {\"messages\": [(\"user\", \"what is the weather in SF, CA?\")]}\n",
    "\n",
    "print_stream(graph.stream(inputs, config, stream_mode=\"values\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca40a719",
   "metadata": {},
   "source": [
    "We can verify that our graph stopped at the right place:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3decf001-7228-4ed5-8779-2b9ed98a74ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Next step:  ('tools',)\n"
     ]
    }
   ],
   "source": [
    "snapshot = graph.get_state(config)\n",
    "print(\"Next step: \", snapshot.next)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7de6ca78",
   "metadata": {},
   "source": [
    "Now we can either approve or edit the tool call before proceeding to the next node. If we wanted to approve the tool call, we would simply continue streaming the graph with `None` input. If we wanted to edit the tool call we need to update the state to have the correct tool call, and then after the update has been applied we can continue.\n",
    "\n",
    "We can try resuming and we will see an error arise:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "740bbaeb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "Tool Calls:\n",
      "  get_weather (call_UXoJGnV30VwVoT0W1KNcdvi1)\n",
      " Call ID: call_UXoJGnV30VwVoT0W1KNcdvi1\n",
      "  Args:\n",
      "    location: SF, CA\n",
      "=================================\u001b[1m Tool Message \u001b[0m=================================\n",
      "Name: get_weather\n",
      "\n",
      "Error: AssertionError('Unknown Location')\n",
      " Please fix your mistakes.\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "Tool Calls:\n",
      "  get_weather (call_VqOHbYg8acRh0qeZqP7QOAY0)\n",
      " Call ID: call_VqOHbYg8acRh0qeZqP7QOAY0\n",
      "  Args:\n",
      "    location: San Francisco, CA\n"
     ]
    }
   ],
   "source": [
    "print_stream(graph.stream(None, config, stream_mode=\"values\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1cf5950",
   "metadata": {},
   "source": [
    "This error arose because our tool argument of \"San Francisco, CA\" is not a location our tool recognizes.\n",
    "\n",
    "Let's show how we would edit the tool call to search for \"San Francisco\" instead of \"San Francisco, CA\" - since our tool as written treats \"San Francisco, CA\" as an unknown location. We will update the state and then resume streaming the graph and should see no errors arise:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1c81ed9f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'configurable': {'thread_id': '42',\n",
       "  'checkpoint_ns': '',\n",
       "  'checkpoint_id': '1f025333-b553-6b92-8002-21537132a652'}}"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "state = graph.get_state(config)\n",
    "\n",
    "last_message = state.values[\"messages\"][-1]\n",
    "last_message.tool_calls[0][\"args\"] = {\"location\": \"San Francisco\"}\n",
    "\n",
    "graph.update_state(config, {\"messages\": [last_message]})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "83148e08-63e8-49e5-a08b-02dc907bed1d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "Tool Calls:\n",
      "  get_weather (call_VqOHbYg8acRh0qeZqP7QOAY0)\n",
      " Call ID: call_VqOHbYg8acRh0qeZqP7QOAY0\n",
      "  Args:\n",
      "    location: San Francisco\n",
      "=================================\u001b[1m Tool Message \u001b[0m=================================\n",
      "Name: get_weather\n",
      "\n",
      "It's always sunny in sf\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "The weather in San Francisco is currently sunny.\n"
     ]
    }
   ],
   "source": [
    "print_stream(graph.stream(None, config, stream_mode=\"values\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8202a5f9",
   "metadata": {},
   "source": [
    "Fantastic! Our graph updated properly to query the weather in San Francisco and got the correct \"It's always sunny in sf\" response from the tool, and then responded to the user accordingly."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

================
File: examples/create-react-agent-manage-message-history.ipynb
================
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "992c4695-ec4f-428d-bd05-fb3b5fbd70f4",
   "metadata": {},
   "source": [
    "# How to manage conversation history in a ReAct Agent with Redis\n",
    "\n",
    "!!! info \"Prerequisites\"\n",
    "    This guide assumes familiarity with the following:\n",
    "\n",
    "    - [Prebuilt create_react_agent](../create-react-agent)\n",
    "    - [Persistence](../../concepts/persistence)\n",
    "    - [Short-term Memory](../../concepts/memory/#short-term-memory)\n",
    "    - [Trimming Messages](https://python.langchain.com/docs/how_to/trim_messages/)\n",
    "\n",
    "Message history can grow quickly and exceed LLM context window size, whether you're building chatbots with many conversation turns or agentic systems with numerous tool calls. There are several strategies for managing the message history:\n",
    "\n",
    "* [message trimming](#keep-the-original-message-history-unmodified) - remove first or last N messages in the history\n",
    "* [summarization](#summarizing-message-history) - summarize earlier messages in the history and replace them with a summary\n",
    "* custom strategies (e.g., message filtering, etc.)\n",
    "\n",
    "To manage message history in `create_react_agent`, you need to define a `pre_model_hook` function or [runnable](https://python.langchain.com/docs/concepts/runnables/) that takes graph state an returns a state update:\n",
    "\n",
    "\n",
    "* Trimming example:\n",
    "    ```python\n",
    "    # highlight-next-line\n",
    "    from langchain_core.messages.utils import (\n",
    "        # highlight-next-line\n",
    "        trim_messages, \n",
    "        # highlight-next-line\n",
    "        count_tokens_approximately\n",
    "    # highlight-next-line\n",
    "    )\n",
    "    from langgraph.prebuilt import create_react_agent\n",
    "    from langgraph.checkpoint.redis import RedisSaver\n",
    "    \n",
    "    # This function will be called every time before the node that calls LLM\n",
    "    def pre_model_hook(state):\n",
    "        trimmed_messages = trim_messages(\n",
    "            state[\"messages\"],\n",
    "            strategy=\"last\",\n",
    "            token_counter=count_tokens_approximately,\n",
    "            max_tokens=384,\n",
    "            start_on=\"human\",\n",
    "            end_on=(\"human\", \"tool\"),\n",
    "        )\n",
    "        # You can return updated messages either under `llm_input_messages` or \n",
    "        # `messages` key (see the note below)\n",
    "        # highlight-next-line\n",
    "        return {\"llm_input_messages\": trimmed_messages}\n",
    "\n",
    "    # Set up Redis connection for checkpointer\n",
    "    REDIS_URI = \"redis://redis:6379\"\n",
    "    checkpointer = None\n",
    "    with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "        cp.setup()\n",
    "        checkpointer = cp\n",
    "        \n",
    "    agent = create_react_agent(\n",
    "        model,\n",
    "        tools,\n",
    "        # highlight-next-line\n",
    "        pre_model_hook=pre_model_hook,\n",
    "        checkpointer=checkpointer,\n",
    "    )\n",
    "    ```\n",
    "\n",
    "* Summarization example:\n",
    "    ```python\n",
    "    # highlight-next-line\n",
    "    from langmem.short_term import SummarizationNode\n",
    "    from langchain_core.messages.utils import count_tokens_approximately\n",
    "    from langgraph.prebuilt.chat_agent_executor import AgentState\n",
    "    from langgraph.checkpoint.redis import RedisSaver\n",
    "    from typing import Any\n",
    "    \n",
    "    model = ChatOpenAI(model=\"gpt-4o\")\n",
    "    \n",
    "    summarization_node = SummarizationNode(\n",
    "        token_counter=count_tokens_approximately,\n",
    "        model=model,\n",
    "        max_tokens=384,\n",
    "        max_summary_tokens=128,\n",
    "        output_messages_key=\"llm_input_messages\",\n",
    "    )\n",
    "\n",
    "    class State(AgentState):\n",
    "        # NOTE: we're adding this key to keep track of previous summary information\n",
    "        # to make sure we're not summarizing on every LLM call\n",
    "        # highlight-next-line\n",
    "        context: dict[str, Any]\n",
    "    \n",
    "    # Set up Redis connection for checkpointer\n",
    "    REDIS_URI = \"redis://redis:6379\"\n",
    "    checkpointer = None\n",
    "    with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "        cp.setup()\n",
    "        checkpointer = cp\n",
    "    \n",
    "    graph = create_react_agent(\n",
    "        model,\n",
    "        tools,\n",
    "        # highlight-next-line\n",
    "        pre_model_hook=summarization_node,\n",
    "        # highlight-next-line\n",
    "        state_schema=State,\n",
    "        checkpointer=checkpointer,\n",
    "    )\n",
    "    ```\n",
    "\n",
    "!!! Important\n",
    "    \n",
    "    * To **keep the original message history unmodified** in the graph state and pass the updated history **only as the input to the LLM**, return updated messages under `llm_input_messages` key\n",
    "    * To **overwrite the original message history** in the graph state with the updated history, return updated messages under `messages` key\n",
    "    \n",
    "    To overwrite the `messages` key, you need to do the following:\n",
    "\n",
    "    ```python\n",
    "    from langchain_core.messages import RemoveMessage\n",
    "    from langgraph.graph.message import REMOVE_ALL_MESSAGES\n",
    "\n",
    "    def pre_model_hook(state):\n",
    "        updated_messages = ...\n",
    "        return {\n",
    "            \"messages\": [RemoveMessage(id=REMOVE_ALL_MESSAGES), *updated_messages]\n",
    "            ...\n",
    "        }\n",
    "    ```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7be3889f-3c17-4fa1-bd2b-84114a2c7247",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "First, let's install the required packages and set our API keys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a213e11a-5c62-4ddb-a707-490d91add383",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture --no-stderr\n",
    "%pip install -U langgraph langchain-openai \"httpx>=0.24.0,<1.0.0\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "23a1885c-04ab-4750-aefa-105891fddf3e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "OPENAI_API_KEY:  ········\n"
     ]
    }
   ],
   "source": [
    "import getpass\n",
    "import os\n",
    "\n",
    "\n",
    "def _set_env(var: str):\n",
    "    if not os.environ.get(var):\n",
    "        value = getpass.getpass(f\"{var}: \")\n",
    "        if value.strip():\n",
    "            os.environ[var] = value\n",
    "\n",
    "\n",
    "# Try to set OpenAI API key\n",
    "_set_env(\"OPENAI_API_KEY\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87a00ce9",
   "metadata": {},
   "source": [
    "<div class=\"admonition tip\">\n",
    "    <p class=\"admonition-title\">Set up <a href=\"https://smith.langchain.com\">LangSmith</a> for LangGraph development</p>\n",
    "    <p style=\"padding-top: 5px;\">\n",
    "        Sign up for LangSmith to quickly spot issues and improve the performance of your LangGraph projects. LangSmith lets you use trace data to debug, test, and monitor your LLM apps built with LangGraph — read more about how to get started <a href=\"https://docs.smith.langchain.com\">here</a>. \n",
    "    </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "03c0f089-070c-4cd4-87e0-6c51f2477b82",
   "metadata": {},
   "source": [
    "## Keep the original message history unmodified"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd6cbd3a-8632-47ae-9ec5-eec8d7b05cae",
   "metadata": {},
   "source": [
    "Let's build a ReAct agent with a step that manages the conversation history: when the length of the history exceeds a specified number of tokens, we will call [`trim_messages`](https://python.langchain.com/api_reference/core/messages/langchain_core.messages.utils.trim_messages.html) utility that that will reduce the history while satisfying LLM provider constraints.\n",
    "\n",
    "There are two ways that the updated message history can be applied inside ReAct agent:\n",
    "\n",
    "  * [**Keep the original message history unmodified**](#keep-the-original-message-history-unmodified) in the graph state and pass the updated history **only as the input to the LLM**\n",
    "  * [**Overwrite the original message history**](#overwrite-the-original-message-history) in the graph state with the updated history\n",
    "\n",
    "Let's start by implementing the first one. We'll need to first define model and tools for our agent:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "eaad19ee-e174-4c6c-b2b8-3530d7acea40",
   "metadata": {},
   "outputs": [],
   "source": [
    "from langchain_openai import ChatOpenAI\n",
    "\n",
    "model = ChatOpenAI(model=\"gpt-4o\", temperature=0)\n",
    "\n",
    "\n",
    "def get_weather(location: str) -> str:\n",
    "    \"\"\"Use this to get weather information.\"\"\"\n",
    "    if any([city in location.lower() for city in [\"nyc\", \"new york city\"]]):\n",
    "        return \"It might be cloudy in nyc, with a chance of rain and temperatures up to 80 degrees.\"\n",
    "    elif any([city in location.lower() for city in [\"sf\", \"san francisco\"]]):\n",
    "        return \"It's always sunny in sf\"\n",
    "    else:\n",
    "        return f\"I am not sure what the weather is in {location}\"\n",
    "\n",
    "\n",
    "tools = [get_weather]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52402333-61ab-47d3-8549-6a70f6f1cf36",
   "metadata": {},
   "source": [
    "Now let's implement `pre_model_hook` — a function that will be added as a new node and called every time **before** the node that calls the LLM (the `agent` node).\n",
    "\n",
    "Our implementation will wrap the `trim_messages` call and return the trimmed messages under `llm_input_messages`. This will **keep the original message history unmodified** in the graph state and pass the updated history **only as the input to the LLM**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b507eb58-6e02-4ac6-b48b-ea4defdc11f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "from langgraph.prebuilt import create_react_agent\n",
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "\n",
    "# highlight-next-line\n",
    "from langchain_core.messages.utils import (\n",
    "    # highlight-next-line\n",
    "    trim_messages,\n",
    "    # highlight-next-line\n",
    "    count_tokens_approximately,\n",
    "    # highlight-next-line\n",
    ")\n",
    "\n",
    "\n",
    "# This function will be added as a new node in ReAct agent graph\n",
    "# that will run every time before the node that calls the LLM.\n",
    "# The messages returned by this function will be the input to the LLM.\n",
    "def pre_model_hook(state):\n",
    "    trimmed_messages = trim_messages(\n",
    "        state[\"messages\"],\n",
    "        strategy=\"last\",\n",
    "        token_counter=count_tokens_approximately,\n",
    "        max_tokens=384,\n",
    "        start_on=\"human\",\n",
    "        end_on=(\"human\", \"tool\"),\n",
    "    )\n",
    "    # highlight-next-line\n",
    "    return {\"llm_input_messages\": trimmed_messages}\n",
    "\n",
    "\n",
    "# Set up Redis connection for checkpointer\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "checkpointer = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    checkpointer = cp\n",
    "\n",
    "graph = create_react_agent(\n",
    "    model,\n",
    "    tools,\n",
    "    # highlight-next-line\n",
    "    pre_model_hook=pre_model_hook,\n",
    "    checkpointer=checkpointer,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8182ab45-86b3-4d6f-b75e-58862a14fa4e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython.display import display, Image\n",
    "\n",
    "display(Image(graph.get_graph().draw_mermaid_png()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d41e8e76-5d43-44cd-bf01-a39212cedd8d",
   "metadata": {},
   "source": [
    "We'll also define a utility to render the agent outputs nicely:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "16636975-5f2d-4dc7-ab8e-d0bea0830a28",
   "metadata": {},
   "outputs": [],
   "source": [
    "def print_stream(stream, output_messages_key=\"llm_input_messages\"):\n",
    "    for chunk in stream:\n",
    "        for node, update in chunk.items():\n",
    "            print(f\"Update from node: {node}\")\n",
    "            messages_key = (\n",
    "                output_messages_key if node == \"pre_model_hook\" else \"messages\"\n",
    "            )\n",
    "            for message in update[messages_key]:\n",
    "                if isinstance(message, tuple):\n",
    "                    print(message)\n",
    "                else:\n",
    "                    message.pretty_print()\n",
    "\n",
    "        print(\"\\n\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84448d29-b323-4833-80fc-4fff2f5a0950",
   "metadata": {},
   "source": [
    "Now let's run the agent with a few different queries to reach the specified max tokens limit:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9ffff6c3-a4f5-47c9-b51d-97caaee85cd6",
   "metadata": {},
   "outputs": [],
   "source": [
    "config = {\"configurable\": {\"thread_id\": \"1\"}}\n",
    "\n",
    "inputs = {\"messages\": [(\"user\", \"What's the weather in NYC?\")]}\n",
    "result = graph.invoke(inputs, config=config)\n",
    "\n",
    "inputs = {\"messages\": [(\"user\", \"What's it known for?\")]}\n",
    "result = graph.invoke(inputs, config=config)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fdb186da-b55d-4cb8-a237-e9e157ab0458",
   "metadata": {},
   "source": [
    "Let's see how many tokens we have in the message history so far:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "41ba0253-5199-4d29-82ae-258cbbebddb4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "417"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "messages = result[\"messages\"]\n",
    "count_tokens_approximately(messages)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "812987ac-66ba-4122-8281-469cbdced7c7",
   "metadata": {},
   "source": [
    "You can see that we are close to the `max_tokens` threshold, so on the next invocation we should see `pre_model_hook` kick-in and trim the message history. Let's run it again:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "26c53429-90ba-4d0b-abb9-423d9120ad26",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Update from node: pre_model_hook\n",
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "What's it known for?\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "New York City is known for a variety of iconic landmarks, cultural institutions, and vibrant neighborhoods. Some of the most notable features include:\n",
      "\n",
      "1. **Statue of Liberty**: A symbol of freedom and democracy, located on Liberty Island.\n",
      "2. **Times Square**: Known for its bright lights, Broadway theaters, and bustling atmosphere.\n",
      "3. **Central Park**: A large public park offering a natural retreat in the midst of the city.\n",
      "4. **Empire State Building**: An iconic skyscraper offering panoramic views of the city.\n",
      "5. **Broadway**: Famous for its world-class theater productions.\n",
      "6. **Wall Street**: The financial hub of the United States.\n",
      "7. **Museums**: Including the Metropolitan Museum of Art, Museum of Modern Art (MoMA), and the American Museum of Natural History.\n",
      "8. **Diverse Cuisine**: A melting pot of cultures reflected in its diverse food scene.\n",
      "9. **Cultural Diversity**: A rich tapestry of cultures and ethnicities, contributing to its dynamic atmosphere.\n",
      "10. **Fashion**: A global fashion capital, hosting events like New York Fashion Week.\n",
      "\n",
      "These are just a few highlights of what makes New York City a unique and exciting place.\n",
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "where can i find the best bagel?\n",
      "\n",
      "\n",
      "\n",
      "Update from node: agent\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "Finding the \"best\" bagel in New York City can be subjective, as it often depends on personal taste. However, several bagel shops are frequently mentioned as top contenders:\n",
      "\n",
      "1. **Ess-a-Bagel**: Known for its large, chewy bagels and a wide variety of spreads.\n",
      "2. **Russ & Daughters**: Famous for its bagels with lox and other traditional Jewish delicacies.\n",
      "3. **H&H Bagels**: A classic choice, known for its fresh, hand-rolled bagels.\n",
      "4. **Murray’s Bagels**: Offers a wide selection of bagels and toppings, with a focus on traditional methods.\n",
      "5. **Tompkins Square Bagels**: Known for its creative cream cheese flavors and fresh ingredients.\n",
      "6. **Absolute Bagels**: A favorite on the Upper West Side, known for its authentic taste and texture.\n",
      "7. **Bagel Hole**: A small shop in Brooklyn known for its dense, flavorful bagels.\n",
      "\n",
      "These spots are scattered throughout the city, so you can find a great bagel in various neighborhoods. Each of these places has its own unique style and flavor, so it might be worth trying a few to find your personal favorite!\n",
      "\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "inputs = {\"messages\": [(\"user\", \"where can i find the best bagel?\")]}\n",
    "print_stream(graph.stream(inputs, config=config, stream_mode=\"updates\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58fe0399-4e7d-4482-a4cb-5301311932d0",
   "metadata": {},
   "source": [
    "You can see that the `pre_model_hook` node now only returned the last 3 messages, as expected. However, the existing message history is untouched:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7ecfc310-8f9e-4aa0-9e58-17e71551639a",
   "metadata": {},
   "outputs": [],
   "source": [
    "updated_messages = graph.get_state(config).values[\"messages\"]\n",
    "assert [(m.type, m.content) for m in updated_messages[: len(messages)]] == [\n",
    "    (m.type, m.content) for m in messages\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "035864e3-0083-4dea-bf85-3a702fa5303f",
   "metadata": {},
   "source": [
    "## Overwrite the original message history"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b0a4fd5-a2ba-4eca-91a9-d294f4f2d884",
   "metadata": {},
   "source": [
    "Let's now change the `pre_model_hook` to **overwrite** the message history in the graph state. To do this, we’ll return the updated messages under `messages` key. We’ll also include a special `RemoveMessage(REMOVE_ALL_MESSAGES)` object, which tells `create_react_agent` to remove previous messages from the graph state:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "48c2a65b-685a-4750-baa6-2d61efe76b5f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m20:30:48\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n",
      "\u001b[32m20:30:48\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n",
      "\u001b[32m20:30:48\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n"
     ]
    }
   ],
   "source": [
    "from langchain_core.messages import RemoveMessage\n",
    "from langgraph.graph.message import REMOVE_ALL_MESSAGES\n",
    "\n",
    "\n",
    "def pre_model_hook(state):\n",
    "    trimmed_messages = trim_messages(\n",
    "        state[\"messages\"],\n",
    "        strategy=\"last\",\n",
    "        token_counter=count_tokens_approximately,\n",
    "        max_tokens=384,\n",
    "        start_on=\"human\",\n",
    "        end_on=(\"human\", \"tool\"),\n",
    "    )\n",
    "    # NOTE that we're now returning the messages under the `messages` key\n",
    "    # We also remove the existing messages in the history to ensure we're overwriting the history\n",
    "    # highlight-next-line\n",
    "    return {\"messages\": [RemoveMessage(REMOVE_ALL_MESSAGES)] + trimmed_messages}\n",
    "\n",
    "\n",
    "# Set up Redis connection for checkpointer\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "checkpointer = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    checkpointer = cp\n",
    "\n",
    "graph = create_react_agent(\n",
    "    model,\n",
    "    tools,\n",
    "    # highlight-next-line\n",
    "    pre_model_hook=pre_model_hook,\n",
    "    checkpointer=checkpointer,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd061682-231c-4487-9c2f-a6820dfbcab7",
   "metadata": {},
   "source": [
    "Now let's run the agent with the same queries as before:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "831be36a-78a1-4885-9a03-8d085dfd7e37",
   "metadata": {},
   "outputs": [
    {
     "ename": "RedisSearchError",
     "evalue": "Error while searching: checkpoints_blobs: no such index",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mResponseError\u001b[39m                             Traceback (most recent call last)",
      "\u001b[36mFile \u001b[39m\u001b[32m~/venv/lib/python3.11/site-packages/redisvl/index/index.py:795\u001b[39m, in \u001b[36mSearchIndex.search\u001b[39m\u001b[34m(self, *args, **kwargs)\u001b[39m\n\u001b[32m    794\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m--> \u001b[39m\u001b[32m795\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_redis_client\u001b[49m\u001b[43m.\u001b[49m\u001b[43mft\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mschema\u001b[49m\u001b[43m.\u001b[49m\u001b[43mindex\u001b[49m\u001b[43m.\u001b[49m\u001b[43mname\u001b[49m\u001b[43m)\u001b[49m\u001b[43m.\u001b[49m\u001b[43msearch\u001b[49m\u001b[43m(\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# type: ignore\u001b[39;49;00m\n\u001b[32m    796\u001b[39m \u001b[43m        \u001b[49m\u001b[43m*\u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\n\u001b[32m    797\u001b[39m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    798\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/venv/lib/python3.11/site-packages/redis/commands/search/commands.py:508\u001b[39m, in \u001b[36mSearchCommands.search\u001b[39m\u001b[34m(self, query, query_params)\u001b[39m\n\u001b[32m    506\u001b[39m     options[NEVER_DECODE] = \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m508\u001b[39m res = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mexecute_command\u001b[49m\u001b[43m(\u001b[49m\u001b[43mSEARCH_CMD\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43moptions\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    510\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(res, Pipeline):\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/venv/lib/python3.11/site-packages/redis/client.py:559\u001b[39m, in \u001b[36mRedis.execute_command\u001b[39m\u001b[34m(self, *args, **options)\u001b[39m\n\u001b[32m    558\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mexecute_command\u001b[39m(\u001b[38;5;28mself\u001b[39m, *args, **options):\n\u001b[32m--> \u001b[39m\u001b[32m559\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_execute_command\u001b[49m\u001b[43m(\u001b[49m\u001b[43m*\u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43moptions\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/venv/lib/python3.11/site-packages/redis/client.py:567\u001b[39m, in \u001b[36mRedis._execute_command\u001b[39m\u001b[34m(self, *args, **options)\u001b[39m\n\u001b[32m    566\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m--> \u001b[39m\u001b[32m567\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mconn\u001b[49m\u001b[43m.\u001b[49m\u001b[43mretry\u001b[49m\u001b[43m.\u001b[49m\u001b[43mcall_with_retry\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m    568\u001b[39m \u001b[43m        \u001b[49m\u001b[38;5;28;43;01mlambda\u001b[39;49;00m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_send_command_parse_response\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m    569\u001b[39m \u001b[43m            \u001b[49m\u001b[43mconn\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcommand_name\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43moptions\u001b[49m\n\u001b[32m    570\u001b[39m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    571\u001b[39m \u001b[43m        \u001b[49m\u001b[38;5;28;43;01mlambda\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43merror\u001b[49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_disconnect_raise\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconn\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merror\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    572\u001b[39m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    573\u001b[39m \u001b[38;5;28;01mfinally\u001b[39;00m:\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/venv/lib/python3.11/site-packages/redis/retry.py:62\u001b[39m, in \u001b[36mRetry.call_with_retry\u001b[39m\u001b[34m(self, do, fail)\u001b[39m\n\u001b[32m     61\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m---> \u001b[39m\u001b[32m62\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mdo\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     63\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;28mself\u001b[39m._supported_errors \u001b[38;5;28;01mas\u001b[39;00m error:\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/venv/lib/python3.11/site-packages/redis/client.py:568\u001b[39m, in \u001b[36mRedis._execute_command.<locals>.<lambda>\u001b[39m\u001b[34m()\u001b[39m\n\u001b[32m    566\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m    567\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m conn.retry.call_with_retry(\n\u001b[32m--> \u001b[39m\u001b[32m568\u001b[39m         \u001b[38;5;28;01mlambda\u001b[39;00m: \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_send_command_parse_response\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m    569\u001b[39m \u001b[43m            \u001b[49m\u001b[43mconn\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcommand_name\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43moptions\u001b[49m\n\u001b[32m    570\u001b[39m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m,\n\u001b[32m    571\u001b[39m         \u001b[38;5;28;01mlambda\u001b[39;00m error: \u001b[38;5;28mself\u001b[39m._disconnect_raise(conn, error),\n\u001b[32m    572\u001b[39m     )\n\u001b[32m    573\u001b[39m \u001b[38;5;28;01mfinally\u001b[39;00m:\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/venv/lib/python3.11/site-packages/redis/client.py:542\u001b[39m, in \u001b[36mRedis._send_command_parse_response\u001b[39m\u001b[34m(self, conn, command_name, *args, **options)\u001b[39m\n\u001b[32m    541\u001b[39m conn.send_command(*args, **options)\n\u001b[32m--> \u001b[39m\u001b[32m542\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mparse_response\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconn\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcommand_name\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43moptions\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/venv/lib/python3.11/site-packages/redis/client.py:581\u001b[39m, in \u001b[36mRedis.parse_response\u001b[39m\u001b[34m(self, connection, command_name, **options)\u001b[39m\n\u001b[32m    580\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m NEVER_DECODE \u001b[38;5;129;01min\u001b[39;00m options:\n\u001b[32m--> \u001b[39m\u001b[32m581\u001b[39m     response = \u001b[43mconnection\u001b[49m\u001b[43m.\u001b[49m\u001b[43mread_response\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdisable_decoding\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[32m    582\u001b[39m     options.pop(NEVER_DECODE)\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/venv/lib/python3.11/site-packages/redis/connection.py:616\u001b[39m, in \u001b[36mAbstractConnection.read_response\u001b[39m\u001b[34m(self, disable_decoding, disconnect_on_error, push_request)\u001b[39m\n\u001b[32m    615\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m--> \u001b[39m\u001b[32m616\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m response\n\u001b[32m    617\u001b[39m \u001b[38;5;28;01mfinally\u001b[39;00m:\n",
      "\u001b[31mResponseError\u001b[39m: checkpoints_blobs: no such index",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[31mRedisSearchError\u001b[39m                          Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[12]\u001b[39m\u001b[32m, line 11\u001b[39m\n\u001b[32m      8\u001b[39m messages = result[\u001b[33m\"\u001b[39m\u001b[33mmessages\u001b[39m\u001b[33m\"\u001b[39m]\n\u001b[32m     10\u001b[39m inputs = {\u001b[33m\"\u001b[39m\u001b[33mmessages\u001b[39m\u001b[33m\"\u001b[39m: [(\u001b[33m\"\u001b[39m\u001b[33muser\u001b[39m\u001b[33m\"\u001b[39m, \u001b[33m\"\u001b[39m\u001b[33mwhere can i find the best bagel?\u001b[39m\u001b[33m\"\u001b[39m)]}\n\u001b[32m---> \u001b[39m\u001b[32m11\u001b[39m \u001b[43mprint_stream\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m     12\u001b[39m \u001b[43m    \u001b[49m\u001b[43mgraph\u001b[49m\u001b[43m.\u001b[49m\u001b[43mstream\u001b[49m\u001b[43m(\u001b[49m\u001b[43minputs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mconfig\u001b[49m\u001b[43m=\u001b[49m\u001b[43mconfig\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstream_mode\u001b[49m\u001b[43m=\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mupdates\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m     13\u001b[39m \u001b[43m    \u001b[49m\u001b[43moutput_messages_key\u001b[49m\u001b[43m=\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mmessages\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[32m     14\u001b[39m \u001b[43m)\u001b[49m\n",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[6]\u001b[39m\u001b[32m, line 2\u001b[39m, in \u001b[36mprint_stream\u001b[39m\u001b[34m(stream, output_messages_key)\u001b[39m\n\u001b[32m      1\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mprint_stream\u001b[39m(stream, output_messages_key=\u001b[33m\"\u001b[39m\u001b[33mllm_input_messages\u001b[39m\u001b[33m\"\u001b[39m):\n\u001b[32m----> \u001b[39m\u001b[32m2\u001b[39m \u001b[43m    \u001b[49m\u001b[38;5;28;43;01mfor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mchunk\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mstream\u001b[49m\u001b[43m:\u001b[49m\n\u001b[32m      3\u001b[39m \u001b[43m        \u001b[49m\u001b[38;5;28;43;01mfor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mnode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mupdate\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mchunk\u001b[49m\u001b[43m.\u001b[49m\u001b[43mitems\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m:\u001b[49m\n\u001b[32m      4\u001b[39m \u001b[43m            \u001b[49m\u001b[38;5;28;43mprint\u001b[39;49m\u001b[43m(\u001b[49m\u001b[33;43mf\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mUpdate from node: \u001b[39;49m\u001b[38;5;132;43;01m{\u001b[39;49;00m\u001b[43mnode\u001b[49m\u001b[38;5;132;43;01m}\u001b[39;49;00m\u001b[33;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/venv/lib/python3.11/site-packages/langgraph/pregel/__init__.py:2377\u001b[39m, in \u001b[36mPregel.stream\u001b[39m\u001b[34m(self, input, config, stream_mode, output_keys, interrupt_before, interrupt_after, checkpoint_during, debug, subgraphs)\u001b[39m\n\u001b[32m   2375\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m checkpoint_during \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m   2376\u001b[39m     config[CONF][CONFIG_KEY_CHECKPOINT_DURING] = checkpoint_during\n\u001b[32m-> \u001b[39m\u001b[32m2377\u001b[39m \u001b[43m\u001b[49m\u001b[38;5;28;43;01mwith\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mSyncPregelLoop\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m   2378\u001b[39m \u001b[43m    \u001b[49m\u001b[38;5;28;43minput\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[32m   2379\u001b[39m \u001b[43m    \u001b[49m\u001b[43minput_model\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43minput_model\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   2380\u001b[39m \u001b[43m    \u001b[49m\u001b[43mstream\u001b[49m\u001b[43m=\u001b[49m\u001b[43mStreamProtocol\u001b[49m\u001b[43m(\u001b[49m\u001b[43mstream\u001b[49m\u001b[43m.\u001b[49m\u001b[43mput\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstream_modes\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   2381\u001b[39m \u001b[43m    \u001b[49m\u001b[43mconfig\u001b[49m\u001b[43m=\u001b[49m\u001b[43mconfig\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   2382\u001b[39m \u001b[43m    \u001b[49m\u001b[43mstore\u001b[49m\u001b[43m=\u001b[49m\u001b[43mstore\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   2383\u001b[39m \u001b[43m    \u001b[49m\u001b[43mcheckpointer\u001b[49m\u001b[43m=\u001b[49m\u001b[43mcheckpointer\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   2384\u001b[39m \u001b[43m    \u001b[49m\u001b[43mnodes\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mnodes\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   2385\u001b[39m \u001b[43m    \u001b[49m\u001b[43mspecs\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mchannels\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   2386\u001b[39m \u001b[43m    \u001b[49m\u001b[43moutput_keys\u001b[49m\u001b[43m=\u001b[49m\u001b[43moutput_keys\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   2387\u001b[39m \u001b[43m    \u001b[49m\u001b[43mstream_keys\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mstream_channels_asis\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   2388\u001b[39m \u001b[43m    \u001b[49m\u001b[43minterrupt_before\u001b[49m\u001b[43m=\u001b[49m\u001b[43minterrupt_before_\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   2389\u001b[39m \u001b[43m    \u001b[49m\u001b[43minterrupt_after\u001b[49m\u001b[43m=\u001b[49m\u001b[43minterrupt_after_\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   2390\u001b[39m \u001b[43m    \u001b[49m\u001b[43mmanager\u001b[49m\u001b[43m=\u001b[49m\u001b[43mrun_manager\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   2391\u001b[39m \u001b[43m    \u001b[49m\u001b[43mdebug\u001b[49m\u001b[43m=\u001b[49m\u001b[43mdebug\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   2392\u001b[39m \u001b[43m    \u001b[49m\u001b[43mcheckpoint_during\u001b[49m\u001b[43m=\u001b[49m\u001b[43mcheckpoint_during\u001b[49m\n\u001b[32m   2393\u001b[39m \u001b[43m    \u001b[49m\u001b[38;5;28;43;01mif\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mcheckpoint_during\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mis\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mnot\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\n\u001b[32m   2394\u001b[39m \u001b[43m    \u001b[49m\u001b[38;5;28;43;01melse\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mconfig\u001b[49m\u001b[43m[\u001b[49m\u001b[43mCONF\u001b[49m\u001b[43m]\u001b[49m\u001b[43m.\u001b[49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[43mCONFIG_KEY_CHECKPOINT_DURING\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   2395\u001b[39m \u001b[43m    \u001b[49m\u001b[43mtrigger_to_nodes\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mtrigger_to_nodes\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   2396\u001b[39m \u001b[43m    \u001b[49m\u001b[43mmigrate_checkpoint\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_migrate_checkpoint\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   2397\u001b[39m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mas\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mloop\u001b[49m\u001b[43m:\u001b[49m\n\u001b[32m   2398\u001b[39m \u001b[43m    \u001b[49m\u001b[38;5;66;43;03m# create runner\u001b[39;49;00m\n\u001b[32m   2399\u001b[39m \u001b[43m    \u001b[49m\u001b[43mrunner\u001b[49m\u001b[43m \u001b[49m\u001b[43m=\u001b[49m\u001b[43m \u001b[49m\u001b[43mPregelRunner\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m   2400\u001b[39m \u001b[43m        \u001b[49m\u001b[43msubmit\u001b[49m\u001b[43m=\u001b[49m\u001b[43mconfig\u001b[49m\u001b[43m[\u001b[49m\u001b[43mCONF\u001b[49m\u001b[43m]\u001b[49m\u001b[43m.\u001b[49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m   2401\u001b[39m \u001b[43m            \u001b[49m\u001b[43mCONFIG_KEY_RUNNER_SUBMIT\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mweakref\u001b[49m\u001b[43m.\u001b[49m\u001b[43mWeakMethod\u001b[49m\u001b[43m(\u001b[49m\u001b[43mloop\u001b[49m\u001b[43m.\u001b[49m\u001b[43msubmit\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   (...)\u001b[39m\u001b[32m   2405\u001b[39m \u001b[43m        \u001b[49m\u001b[43mnode_finished\u001b[49m\u001b[43m=\u001b[49m\u001b[43mconfig\u001b[49m\u001b[43m[\u001b[49m\u001b[43mCONF\u001b[49m\u001b[43m]\u001b[49m\u001b[43m.\u001b[49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[43mCONFIG_KEY_NODE_FINISHED\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   2406\u001b[39m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   2407\u001b[39m \u001b[43m    \u001b[49m\u001b[38;5;66;43;03m# enable subgraph streaming\u001b[39;49;00m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/venv/lib/python3.11/site-packages/langgraph/pregel/loop.py:1058\u001b[39m, in \u001b[36mSyncPregelLoop.__enter__\u001b[39m\u001b[34m(self)\u001b[39m\n\u001b[32m   1056\u001b[39m         \u001b[38;5;28;01mraise\u001b[39;00m CheckpointNotLatest\n\u001b[32m   1057\u001b[39m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28mself\u001b[39m.checkpointer:\n\u001b[32m-> \u001b[39m\u001b[32m1058\u001b[39m     saved = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mcheckpointer\u001b[49m\u001b[43m.\u001b[49m\u001b[43mget_tuple\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mcheckpoint_config\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   1059\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m   1060\u001b[39m     saved = \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/workspace/libs/checkpoint-redis/langgraph/checkpoint/redis/__init__.py:335\u001b[39m, in \u001b[36mRedisSaver.get_tuple\u001b[39m\u001b[34m(self, config)\u001b[39m\n\u001b[32m    332\u001b[39m doc_parent_checkpoint_id = from_storage_safe_id(doc[\u001b[33m\"\u001b[39m\u001b[33mparent_checkpoint_id\u001b[39m\u001b[33m\"\u001b[39m])\n\u001b[32m    334\u001b[39m \u001b[38;5;66;03m# Fetch channel_values\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m335\u001b[39m channel_values = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mget_channel_values\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m    336\u001b[39m \u001b[43m    \u001b[49m\u001b[43mthread_id\u001b[49m\u001b[43m=\u001b[49m\u001b[43mdoc_thread_id\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    337\u001b[39m \u001b[43m    \u001b[49m\u001b[43mcheckpoint_ns\u001b[49m\u001b[43m=\u001b[49m\u001b[43mdoc_checkpoint_ns\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    338\u001b[39m \u001b[43m    \u001b[49m\u001b[43mcheckpoint_id\u001b[49m\u001b[43m=\u001b[49m\u001b[43mdoc_checkpoint_id\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    339\u001b[39m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    341\u001b[39m \u001b[38;5;66;03m# Fetch pending_sends from parent checkpoint\u001b[39;00m\n\u001b[32m    342\u001b[39m pending_sends = []\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/workspace/libs/checkpoint-redis/langgraph/checkpoint/redis/__init__.py:452\u001b[39m, in \u001b[36mRedisSaver.get_channel_values\u001b[39m\u001b[34m(self, thread_id, checkpoint_ns, checkpoint_id)\u001b[39m\n\u001b[32m    442\u001b[39m \u001b[38;5;28;01mfor\u001b[39;00m channel, version \u001b[38;5;129;01min\u001b[39;00m channel_versions.items():\n\u001b[32m    443\u001b[39m     blob_query = FilterQuery(\n\u001b[32m    444\u001b[39m         filter_expression=(Tag(\u001b[33m\"\u001b[39m\u001b[33mthread_id\u001b[39m\u001b[33m\"\u001b[39m) == storage_safe_thread_id)\n\u001b[32m    445\u001b[39m         & (Tag(\u001b[33m\"\u001b[39m\u001b[33mcheckpoint_ns\u001b[39m\u001b[33m\"\u001b[39m) == storage_safe_checkpoint_ns)\n\u001b[32m   (...)\u001b[39m\u001b[32m    449\u001b[39m         num_results=\u001b[32m1\u001b[39m,\n\u001b[32m    450\u001b[39m     )\n\u001b[32m--> \u001b[39m\u001b[32m452\u001b[39m     blob_results = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mcheckpoint_blobs_index\u001b[49m\u001b[43m.\u001b[49m\u001b[43msearch\u001b[49m\u001b[43m(\u001b[49m\u001b[43mblob_query\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    453\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m blob_results.docs:\n\u001b[32m    454\u001b[39m         blob_doc = blob_results.docs[\u001b[32m0\u001b[39m]\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/venv/lib/python3.11/site-packages/redisvl/index/index.py:799\u001b[39m, in \u001b[36mSearchIndex.search\u001b[39m\u001b[34m(self, *args, **kwargs)\u001b[39m\n\u001b[32m    795\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m._redis_client.ft(\u001b[38;5;28mself\u001b[39m.schema.index.name).search(  \u001b[38;5;66;03m# type: ignore\u001b[39;00m\n\u001b[32m    796\u001b[39m         *args, **kwargs\n\u001b[32m    797\u001b[39m     )\n\u001b[32m    798\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[32m--> \u001b[39m\u001b[32m799\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m RedisSearchError(\u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[33mError while searching: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mstr\u001b[39m(e)\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m\"\u001b[39m) \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01me\u001b[39;00m\n",
      "\u001b[31mRedisSearchError\u001b[39m: Error while searching: checkpoints_blobs: no such index"
     ]
    }
   ],
   "source": [
    "config = {\"configurable\": {\"thread_id\": \"1\"}}\n",
    "\n",
    "inputs = {\"messages\": [(\"user\", \"What's the weather in NYC?\")]}\n",
    "result = graph.invoke(inputs, config=config)\n",
    "\n",
    "inputs = {\"messages\": [(\"user\", \"What's it known for?\")]}\n",
    "result = graph.invoke(inputs, config=config)\n",
    "messages = result[\"messages\"]\n",
    "\n",
    "inputs = {\"messages\": [(\"user\", \"where can i find the best bagel?\")]}\n",
    "print_stream(\n",
    "    graph.stream(inputs, config=config, stream_mode=\"updates\"),\n",
    "    output_messages_key=\"messages\",\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc9a0604-3d2b-48ff-9eaf-d16ea351fb30",
   "metadata": {},
   "source": [
    "You can see that the `pre_model_hook` node returned the last 3 messages again. However, this time, the message history is modified in the graph state as well:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "394f72f8-f817-472d-a193-e01509a86132",
   "metadata": {},
   "outputs": [],
   "source": [
    "updated_messages = graph.get_state(config).values[\"messages\"]\n",
    "assert (\n",
    "    # First 2 messages in the new history are the same as last 2 messages in the old\n",
    "    [(m.type, m.content) for m in updated_messages[:2]]\n",
    "    == [(m.type, m.content) for m in messages[-2:]]\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee186d6d-4d07-404f-b236-f662db62339d",
   "metadata": {},
   "source": [
    "## Summarizing message history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa6e4bdf",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture --no-stderr\n",
    "%pip install -U langmem"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6e53e0f-9a1e-4188-8435-c23ad8148b4f",
   "metadata": {},
   "source": [
    "Finally, let's apply a different strategy for managing message history — summarization. Just as with trimming, you can choose to keep original message history unmodified or overwrite it. The example below will only show the former.\n",
    "\n",
    "We will use the [`SummarizationNode`](https://langchain-ai.github.io/langmem/guides/summarization/#using-summarizationnode) from the prebuilt `langmem` library. Once the message history reaches the token limit, the summarization node will summarize earlier messages to make sure they fit into `max_tokens`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b9540c1c-2eba-42da-ba4e-478521161a1f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# highlight-next-line\n",
    "from langmem.short_term import SummarizationNode\n",
    "from langgraph.prebuilt.chat_agent_executor import AgentState\n",
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "from typing import Any\n",
    "\n",
    "model = ChatOpenAI(model=\"gpt-4o\")\n",
    "summarization_model = model.bind(max_tokens=128)\n",
    "\n",
    "summarization_node = SummarizationNode(\n",
    "    token_counter=count_tokens_approximately,\n",
    "    model=summarization_model,\n",
    "    max_tokens=384,\n",
    "    max_summary_tokens=128,\n",
    "    output_messages_key=\"llm_input_messages\",\n",
    ")\n",
    "\n",
    "\n",
    "class State(AgentState):\n",
    "    # NOTE: we're adding this key to keep track of previous summary information\n",
    "    # to make sure we're not summarizing on every LLM call\n",
    "    # highlight-next-line\n",
    "    context: dict[str, Any]\n",
    "\n",
    "\n",
    "# Set up Redis connection for checkpointer\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "checkpointer = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    checkpointer = cp\n",
    "\n",
    "graph = create_react_agent(\n",
    "    # limit the output size to ensure consistent behavior\n",
    "    model.bind(max_tokens=256),\n",
    "    tools,\n",
    "    # highlight-next-line\n",
    "    pre_model_hook=summarization_node,\n",
    "    # highlight-next-line\n",
    "    state_schema=State,\n",
    "    checkpointer=checkpointer,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8eccaaca-5d9c-4faf-b997-d4b8e84b59ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "config = {\"configurable\": {\"thread_id\": \"1\"}}\n",
    "inputs = {\"messages\": [(\"user\", \"What's the weather in NYC?\")]}\n",
    "\n",
    "result = graph.invoke(inputs, config=config)\n",
    "\n",
    "inputs = {\"messages\": [(\"user\", \"What's it known for?\")]}\n",
    "result = graph.invoke(inputs, config=config)\n",
    "\n",
    "inputs = {\"messages\": [(\"user\", \"where can i find the best bagel?\")]}\n",
    "print_stream(graph.stream(inputs, config=config, stream_mode=\"updates\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7caaf2f7-281a-4421-bf98-c745d950c56f",
   "metadata": {},
   "source": [
    "You can see that the earlier messages have now been replaced with the summary of the earlier conversation!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

================
File: examples/create-react-agent-memory.ipynb
================
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "992c4695-ec4f-428d-bd05-fb3b5fbd70f4",
   "metadata": {},
   "source": [
    "# How to add thread-level memory to a ReAct Agent\n",
    "\n",
    "<div class=\"admonition tip\">\n",
    "    <p class=\"admonition-title\">Prerequisites</p>\n",
    "    <p>\n",
    "        This guide assumes familiarity with the following:\n",
    "        <ul>\n",
    "            <li>            \n",
    "                <a href=\"https://langchain-ai.github.io/langgraph/concepts/persistence/\">\n",
    "                    LangGraph Persistence\n",
    "                </a>\n",
    "            </li>\n",
    "            <li>            \n",
    "                <a href=\"https://langchain-ai.github.io/langgraph/concepts/persistence/#checkpointer-interface\">\n",
    "                    Checkpointer interface\n",
    "                </a>\n",
    "            </li>\n",
    "            <li>\n",
    "                <a href=\"https://langchain-ai.github.io/langgraph/concepts/agentic_concepts/\">\n",
    "                    Agent Architectures\n",
    "                </a>                   \n",
    "            </li>\n",
    "            <li>\n",
    "                <a href=\"https://python.langchain.com/docs/concepts/chat_models/\">\n",
    "                    Chat Models\n",
    "                </a>\n",
    "            </li>\n",
    "            <li>\n",
    "                <a href=\"https://python.langchain.com/docs/concepts/tools/\">\n",
    "                    Tools\n",
    "                </a>\n",
    "            </li>\n",
    "        </ul>\n",
    "    </p>\n",
    "</div> \n",
    "\n",
    "This guide will show how to add memory to the prebuilt ReAct agent. Please see [this tutorial](../create-react-agent) for how to get started with the prebuilt ReAct agent\n",
    "\n",
    "We can add memory to the agent, by passing a [checkpointer](https://langchain-ai.github.io/langgraph/reference/checkpoints/) to the [create_react_agent](https://langchain-ai.github.io/langgraph/reference/prebuilt/#langgraph.prebuilt.chat_agent_executor.create_react_agent) function."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7be3889f-3c17-4fa1-bd2b-84114a2c7247",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "First, let's install the required packages and set our API keys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a213e11a-5c62-4ddb-a707-490d91add383",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture --no-stderr\n",
    "%pip install -U langgraph langchain-openai"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "23a1885c-04ab-4750-aefa-105891fddf3e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "OPENAI_API_KEY:  ········\n"
     ]
    }
   ],
   "source": [
    "import getpass\n",
    "import os\n",
    "\n",
    "\n",
    "def _set_env(var: str):\n",
    "    if not os.environ.get(var):\n",
    "        os.environ[var] = getpass.getpass(f\"{var}: \")\n",
    "\n",
    "\n",
    "_set_env(\"OPENAI_API_KEY\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87a00ce9",
   "metadata": {},
   "source": [
    "<div class=\"admonition tip\">\n",
    "    <p class=\"admonition-title\">Set up <a href=\"https://smith.langchain.com\">LangSmith</a> for LangGraph development</p>\n",
    "    <p style=\"padding-top: 5px;\">\n",
    "        Sign up for LangSmith to quickly spot issues and improve the performance of your LangGraph projects. LangSmith lets you use trace data to debug, test, and monitor your LLM apps built with LangGraph — read more about how to get started <a href=\"https://docs.smith.langchain.com\">here</a>. \n",
    "    </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "03c0f089-070c-4cd4-87e0-6c51f2477b82",
   "metadata": {},
   "source": [
    "## Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7a154152-973e-4b5d-aa13-48c617744a4c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# First we initialize the model we want to use.\n",
    "from langchain_openai import ChatOpenAI\n",
    "\n",
    "model = ChatOpenAI(model=\"gpt-4o\", temperature=0)\n",
    "\n",
    "\n",
    "# For this tutorial we will use custom tool that returns pre-defined values for weather in two cities (NYC & SF)\n",
    "\n",
    "from langchain_core.tools import tool\n",
    "\n",
    "\n",
    "@tool\n",
    "def get_weather(location: str) -> str:\n",
    "    \"\"\"Use this to get weather information.\"\"\"\n",
    "    if any([city in location.lower() for city in [\"nyc\", \"new york city\"]]):\n",
    "        return \"It might be cloudy in nyc\"\n",
    "    elif any([city in location.lower() for city in [\"sf\", \"san francisco\"]]):\n",
    "        return \"It's always sunny in sf\"\n",
    "    else:\n",
    "        return f\"I am not sure what the weather is in {location}\"\n",
    "\n",
    "\n",
    "tools = [get_weather]\n",
    "\n",
    "# We can add \"chat memory\" to the graph with LangGraph's Redis checkpointer\n",
    "# to retain the chat context between interactions\n",
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "\n",
    "# Set up Redis connection\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "memory = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    memory = cp\n",
    "\n",
    "# Define the graph\n",
    "\n",
    "from langgraph.prebuilt import create_react_agent\n",
    "\n",
    "graph = create_react_agent(model, tools=tools, checkpointer=memory)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00407425-506d-4ffd-9c86-987921d8c844",
   "metadata": {},
   "source": [
    "## Usage\n",
    "\n",
    "Let's interact with it multiple times to show that it can remember"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "16636975-5f2d-4dc7-ab8e-d0bea0830a28",
   "metadata": {},
   "outputs": [],
   "source": [
    "def print_stream(stream):\n",
    "    for s in stream:\n",
    "        message = s[\"messages\"][-1]\n",
    "        if isinstance(message, tuple):\n",
    "            print(message)\n",
    "        else:\n",
    "            message.pretty_print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9ffff6c3-a4f5-47c9-b51d-97caaee85cd6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "What's the weather in NYC?\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "Tool Calls:\n",
      "  get_weather (call_1aAbFecdc3xn5yLVkOBScflI)\n",
      " Call ID: call_1aAbFecdc3xn5yLVkOBScflI\n",
      "  Args:\n",
      "    location: New York City\n",
      "=================================\u001b[1m Tool Message \u001b[0m=================================\n",
      "Name: get_weather\n",
      "\n",
      "It might be cloudy in nyc\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "The weather in New York City might be cloudy.\n"
     ]
    }
   ],
   "source": [
    "config = {\"configurable\": {\"thread_id\": \"1\"}}\n",
    "inputs = {\"messages\": [(\"user\", \"What's the weather in NYC?\")]}\n",
    "\n",
    "print_stream(graph.stream(inputs, config=config, stream_mode=\"values\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "838a043f-90ad-4e69-9d1d-6e22db2c346c",
   "metadata": {},
   "source": [
    "Notice that when we pass the same thread ID, the chat history is preserved."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "187479f9-32fa-4611-9487-cf816ba2e147",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "What's it known for?\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "New York City is known for many things, including:\n",
      "\n",
      "1. **Landmarks and Attractions**: The Statue of Liberty, Times Square, Central Park, Empire State Building, and Broadway theaters.\n",
      "   \n",
      "2. **Cultural Diversity**: NYC is a melting pot of cultures, with a rich tapestry of ethnic neighborhoods like Chinatown, Little Italy, and Harlem.\n",
      "\n",
      "3. **Financial Hub**: Home to Wall Street and the New York Stock Exchange, it's a global financial center.\n",
      "\n",
      "4. **Arts and Entertainment**: Renowned for its museums (e.g., The Metropolitan Museum of Art, MoMA), music venues, and vibrant arts scene.\n",
      "\n",
      "5. **Cuisine**: Famous for its diverse food offerings, including New York-style pizza, bagels, and international cuisines.\n",
      "\n",
      "6. **Fashion**: A major fashion capital, hosting New York Fashion Week and home to numerous designers and fashion houses.\n",
      "\n",
      "7. **Media and Publishing**: Headquarters for major media companies and publishers, including The New York Times and NBC.\n",
      "\n",
      "8. **Skyscrapers**: Known for its iconic skyline, featuring numerous skyscrapers.\n",
      "\n",
      "9. **Public Transportation**: An extensive subway system and iconic yellow taxis.\n",
      "\n",
      "10. **Sports**: Home to major sports teams like the New York Yankees, Mets, Knicks, and Giants.\n",
      "\n",
      "These are just a few highlights of what makes New York City a unique and vibrant place.\n"
     ]
    }
   ],
   "source": [
    "inputs = {\"messages\": [(\"user\", \"What's it known for?\")]}\n",
    "print_stream(graph.stream(inputs, config=config, stream_mode=\"values\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c461eb47-b4f9-406f-8923-c68db7c5687f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

================
File: examples/cross-thread-persistence-functional.ipynb
================
{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "d2eecb96-cf0e-47ed-8116-88a7eaa4236d",
   "metadata": {},
   "source": [
    "# How to add cross-thread persistence (functional API)\n",
    "\n",
    "!!! info \"Prerequisites\"\n",
    "\n",
    "    This guide assumes familiarity with the following:\n",
    "    \n",
    "    - [Functional API](https://langchain-ai.github.io/langgraph/concepts/functional_api/)\n",
    "    - [Persistence](https://langchain-ai.github.io/langgraph/concepts/persistence/)\n",
    "    - [Memory](https://langchain-ai.github.io/langgraph/concepts/memory/)\n",
    "    - [Chat Models](https://python.langchain.com/docs/concepts/chat_models/)\n",
    "\n",
    "LangGraph allows you to persist data across **different [threads](https://langchain-ai.github.io/langgraph/concepts/persistence/#threads)**. For instance, you can store information about users (their names or preferences) in a shared (cross-thread) memory and reuse them in the new threads (e.g., new conversations).\n",
    "\n",
    "When using the [functional API](https://langchain-ai.github.io/langgraph/concepts/functional_api/), you can set it up to store and retrieve memories by using the [Store](https://langchain-ai.github.io/langgraph/reference/store/#langgraph.store.base.BaseStore) interface:\n",
    "\n",
    "1. Create an instance of a `Store`\n",
    "\n",
    "    ```python\n",
    "    from langgraph.store.redis import RedisStore, BaseStore\n",
    "    \n",
    "    store = RedisStore.from_conn_string(\"redis://redis:6379\")\n",
    "    ```\n",
    "\n",
    "2. Pass the `store` instance to the `entrypoint()` decorator and expose `store` parameter in the function signature:\n",
    "\n",
    "    ```python\n",
    "    from langgraph.func import entrypoint\n",
    "\n",
    "    @entrypoint(store=store)\n",
    "    def workflow(inputs: dict, store: BaseStore):\n",
    "        my_task(inputs).result()\n",
    "        ...\n",
    "    ```\n",
    "    \n",
    "In this guide, we will show how to construct and use a workflow that has a shared memory implemented using the [Store](https://langchain-ai.github.io/langgraph/reference/store/#langgraph.store.base.BaseStore) interface.\n",
    "\n",
    "!!! note Note\n",
    "\n",
    "    Support for the [`Store`](https://langchain-ai.github.io/langgraph/reference/store/#langgraph.store.base.BaseStore) API that is used in this guide was added in LangGraph `v0.2.32`.\n",
    "\n",
    "    Support for __index__ and __query__ arguments of the [`Store`](https://langchain-ai.github.io/langgraph/reference/store/#langgraph.store.base.BaseStore) API that is used in this guide was added in LangGraph `v0.2.54`.\n",
    "\n",
    "!!! tip \"Note\"\n",
    "\n",
    "    If you need to add cross-thread persistence to a `StateGraph`, check out this [how-to guide](../cross-thread-persistence).\n",
    "\n",
    "## Setup\n",
    "\n",
    "First, let's install the required packages and set our API keys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3457aadf",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture --no-stderr\n",
    "%pip install -U langchain_anthropic langchain_openai langgraph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "aa2c64a7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "ANTHROPIC_API_KEY:  ········\n",
      "OPENAI_API_KEY:  ········\n"
     ]
    }
   ],
   "source": [
    "import getpass\n",
    "import os\n",
    "\n",
    "\n",
    "def _set_env(var: str):\n",
    "    if not os.environ.get(var):\n",
    "        os.environ[var] = getpass.getpass(f\"{var}: \")\n",
    "\n",
    "\n",
    "_set_env(\"ANTHROPIC_API_KEY\")\n",
    "_set_env(\"OPENAI_API_KEY\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51b6817d",
   "metadata": {},
   "source": [
    "!!! tip \"Set up [LangSmith](https://smith.langchain.com) for LangGraph development\"\n",
    "\n",
    "    Sign up for LangSmith to quickly spot issues and improve the performance of your LangGraph projects. LangSmith lets you use trace data to debug, test, and monitor your LLM apps built with LangGraph — read more about how to get started [here](https://docs.smith.langchain.com)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b5b3d42-3d2c-455e-ac10-e2ae74dc1cf1",
   "metadata": {},
   "source": [
    "## Example: simple chatbot with long-term memory"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4c550b5-1954-496b-8b9d-800361af17dc",
   "metadata": {},
   "source": [
    "### Define store\n",
    "\n",
    "In this example we will create a workflow that will be able to retrieve information about a user's preferences. We will do so by defining an `InMemoryStore` - an object that can store data in memory and query that data.\n",
    "\n",
    "When storing objects using the `Store` interface you define two things:\n",
    "\n",
    "* the namespace for the object, a tuple (similar to directories)\n",
    "* the object key (similar to filenames)\n",
    "\n",
    "In our example, we'll be using `(\"memories\", <user_id>)` as namespace and random UUID as key for each new memory.\n",
    "\n",
    "Importantly, to determine the user, we will be passing `user_id` via the config keyword argument of the node function.\n",
    "\n",
    "Let's first define our store!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a7f303d6-612e-4e34-bf36-29d4ed25d802",
   "metadata": {},
   "outputs": [],
   "source": [
    "from langgraph.store.redis import RedisStore\n",
    "from langgraph.store.base import IndexConfig\n",
    "from langchain_openai import OpenAIEmbeddings\n",
    "\n",
    "# Set up Redis connection\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "\n",
    "# Create index configuration for vector search\n",
    "index_config: IndexConfig = {\n",
    "    \"dims\": 1536,\n",
    "    \"embed\": OpenAIEmbeddings(model=\"text-embedding-3-small\"),\n",
    "    \"ann_index_config\": {\n",
    "        \"vector_type\": \"vector\",\n",
    "    },\n",
    "    \"distance_type\": \"cosine\",\n",
    "}\n",
    "\n",
    "# Initialize the Redis store\n",
    "redis_store = None\n",
    "with RedisStore.from_conn_string(REDIS_URI, index=index_config) as s:\n",
    "    s.setup()\n",
    "    redis_store = s"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3389c9f4-226d-40c7-8bfc-ee8aac24f79d",
   "metadata": {},
   "source": [
    "### Create workflow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2a30a362-528c-45ee-9df6-630d2d843588",
   "metadata": {},
   "outputs": [],
   "source": [
    "import uuid\n",
    "\n",
    "from langchain_anthropic import ChatAnthropic\n",
    "from langchain_core.runnables import RunnableConfig\n",
    "from langchain_core.messages import BaseMessage\n",
    "from langgraph.func import entrypoint, task\n",
    "from langgraph.graph import add_messages\n",
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "from langgraph.store.base import BaseStore\n",
    "\n",
    "\n",
    "model = ChatAnthropic(model=\"claude-3-5-sonnet-latest\")\n",
    "\n",
    "\n",
    "@task\n",
    "def call_model(messages: list[BaseMessage], memory_store: BaseStore, user_id: str):\n",
    "    namespace = (\"memories\", user_id)\n",
    "    last_message = messages[-1]\n",
    "    memories = memory_store.search(namespace, query=str(last_message.content))\n",
    "    info = \"\\n\".join([d.value[\"data\"] for d in memories])\n",
    "    system_msg = f\"You are a helpful assistant talking to the user. User info: {info}\"\n",
    "\n",
    "    # Store new memories if the user asks the model to remember\n",
    "    if \"remember\" in last_message.content.lower():\n",
    "        memory = \"User name is Bob\"\n",
    "        memory_store.put(namespace, str(uuid.uuid4()), {\"data\": memory})\n",
    "\n",
    "    response = model.invoke([{\"role\": \"system\", \"content\": system_msg}] + messages)\n",
    "    return response\n",
    "\n",
    "\n",
    "# Set up Redis connection for checkpointer\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "checkpointer = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    checkpointer = cp\n",
    "\n",
    "# NOTE: we're passing the store object here when creating a workflow via entrypoint()\n",
    "@entrypoint(checkpointer=checkpointer, store=redis_store)\n",
    "def workflow(\n",
    "    inputs: list[BaseMessage],\n",
    "    *,\n",
    "    previous: list[BaseMessage],\n",
    "    config: RunnableConfig,\n",
    "    store: BaseStore,\n",
    "):\n",
    "    user_id = config[\"configurable\"][\"user_id\"]\n",
    "    previous = previous or []\n",
    "    inputs = add_messages(previous, inputs)\n",
    "    response = call_model(inputs, store, user_id).result()\n",
    "    return entrypoint.final(value=response, save=add_messages(inputs, response))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f22a4a18-67e4-4f0b-b655-a29bbe202e1c",
   "metadata": {},
   "source": [
    "!!! note Note\n",
    "\n",
    "    If you're using LangGraph Cloud or LangGraph Studio, you __don't need__ to pass store to the entrypoint decorator, since it's done automatically."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "552d4e33-556d-4fa5-8094-2a076bc21529",
   "metadata": {},
   "source": [
    "### Run the workflow!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1842c626-6cd9-4f58-b549-58978e478098",
   "metadata": {},
   "source": [
    "Now let's specify a user ID in the config and tell the model our name:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c871a073-a466-46ad-aafe-2b870831057e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "Hi Bob! Nice to meet you. I'll remember that you're Bob. How can I help you today?\n"
     ]
    }
   ],
   "source": [
    "config = {\"configurable\": {\"thread_id\": \"1\", \"user_id\": \"1\"}}\n",
    "input_message = {\"role\": \"user\", \"content\": \"Hi! Remember: my name is Bob\"}\n",
    "for chunk in workflow.stream([input_message], config, stream_mode=\"values\"):\n",
    "    chunk.pretty_print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d862be40-1f8a-4057-81c4-b7bf073dc4c1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "Your name is Bob!\n"
     ]
    }
   ],
   "source": [
    "config = {\"configurable\": {\"thread_id\": \"2\", \"user_id\": \"1\"}}\n",
    "input_message = {\"role\": \"user\", \"content\": \"what is my name?\"}\n",
    "for chunk in workflow.stream([input_message], config, stream_mode=\"values\"):\n",
    "    chunk.pretty_print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80fd01ec-f135-4811-8743-daff8daea422",
   "metadata": {},
   "source": [
    "We can now inspect our Redis store and verify that we have in fact saved the memories for the user:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "76cde493-89cf-4709-a339-207d2b7e9ea7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'data': 'User name is Bob'}\n"
     ]
    }
   ],
   "source": [
    "for memory in redis_store.search((\"memories\", \"1\")):\n",
    "    print(memory.value)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23f5d7eb-af23-4131-b8fd-2a69e74e6e55",
   "metadata": {},
   "source": [
    "Let's now run the workflow for another user to verify that the memories about the first user are self contained:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d362350b-d730-48bd-9652-983812fd7811",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "I don't know your name as it wasn't provided in your information. Would you like to tell me your name?\n"
     ]
    }
   ],
   "source": [
    "config = {\"configurable\": {\"thread_id\": \"3\", \"user_id\": \"2\"}}\n",
    "input_message = {\"role\": \"user\", \"content\": \"what is my name?\"}\n",
    "for chunk in workflow.stream([input_message], config, stream_mode=\"values\"):\n",
    "    chunk.pretty_print()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

================
File: examples/cross-thread-persistence.ipynb
================
{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "d2eecb96-cf0e-47ed-8116-88a7eaa4236d",
   "metadata": {},
   "source": [
    "# How to add cross-thread persistence to your graph\n",
    "\n",
    "<div class=\"admonition tip\">\n",
    "    <p class=\"admonition-title\">Prerequisites</p>\n",
    "    <p>\n",
    "        This guide assumes familiarity with the following:\n",
    "        <ul>\n",
    "            <li>\n",
    "                <a href=\"https://langchain-ai.github.io/langgraph/concepts/persistence/\">\n",
    "                    Persistence\n",
    "                </a>\n",
    "            </li>\n",
    "            <li>\n",
    "                <a href=\"https://langchain-ai.github.io/langgraph/concepts/memory/\">\n",
    "                    Memory\n",
    "                </a>\n",
    "            </li>\n",
    "            <li>\n",
    "                <a href=\"https://python.langchain.com/docs/concepts/#chat-models/\">\n",
    "                    Chat Models\n",
    "                </a>\n",
    "            </li>             \n",
    "        </ul>\n",
    "    </p>\n",
    "</div>\n",
    "\n",
    "In the [previous guide](https://langchain-ai.github.io/langgraph/how-tos/persistence/) you learned how to persist graph state across multiple interactions on a single [thread](). LangGraph also allows you to persist data across **multiple threads**. For instance, you can store information about users (their names or preferences) in a shared memory and reuse them in the new conversational threads.\n",
    "\n",
    "In this guide, we will show how to construct and use a graph that has a shared memory implemented using the [Store](https://langchain-ai.github.io/langgraph/reference/store/#langgraph.store.base.BaseStore) interface.\n",
    "\n",
    "<div class=\"admonition note\">\n",
    "    <p class=\"admonition-title\">Note</p>\n",
    "    <p>\n",
    "    Support for the <code><a href=\"https://langchain-ai.github.io/langgraph/reference/store/#langgraph.store.base.BaseStore\">Store</a></code> API that is used in this guide was added in LangGraph <code>v0.2.32</code>.\n",
    "    </p>\n",
    "    <p>\n",
    "    Support for <b>index</b> and <b>query</b> arguments of the <code><a href=\"https://langchain-ai.github.io/langgraph/reference/store/#langgraph.store.base.BaseStore\">Store</a></code> API that is used in this guide was added in LangGraph <code>v0.2.54</code>.\n",
    "    </p>\n",
    "</div>\n",
    "\n",
    "## Setup\n",
    "\n",
    "First, let's install the required packages and set our API keys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3457aadf",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture --no-stderr\n",
    "%pip install -U langchain_openai langgraph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "aa2c64a7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "ANTHROPIC_API_KEY:  ········\n",
      "OPENAI_API_KEY:  ········\n"
     ]
    }
   ],
   "source": [
    "import getpass\n",
    "import os\n",
    "\n",
    "\n",
    "def _set_env(var: str):\n",
    "    if not os.environ.get(var):\n",
    "        os.environ[var] = getpass.getpass(f\"{var}: \")\n",
    "\n",
    "\n",
    "_set_env(\"ANTHROPIC_API_KEY\")\n",
    "_set_env(\"OPENAI_API_KEY\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51b6817d",
   "metadata": {},
   "source": [
    "!!! tip \"Set up [LangSmith](https://smith.langchain.com) for LangGraph development\"\n",
    "\n",
    "    Sign up for LangSmith to quickly spot issues and improve the performance of your LangGraph projects. LangSmith lets you use trace data to debug, test, and monitor your LLM apps built with LangGraph — read more about how to get started [here](https://docs.smith.langchain.com)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4c550b5-1954-496b-8b9d-800361af17dc",
   "metadata": {},
   "source": [
    "## Define store\n",
    "\n",
    "In this example we will create a graph that will be able to retrieve information about a user's preferences. We will do so by defining an `InMemoryStore` - an object that can store data in memory and query that data. We will then pass the store object when compiling the graph. This allows each node in the graph to access the store: when you define node functions, you can define `store` keyword argument, and LangGraph will automatically pass the store object you compiled the graph with.\n",
    "\n",
    "When storing objects using the `Store` interface you define two things:\n",
    "\n",
    "* the namespace for the object, a tuple (similar to directories)\n",
    "* the object key (similar to filenames)\n",
    "\n",
    "In our example, we'll be using `(\"memories\", <user_id>)` as namespace and random UUID as key for each new memory.\n",
    "\n",
    "Importantly, to determine the user, we will be passing `user_id` via the config keyword argument of the node function.\n",
    "\n",
    "Let's first define an `InMemoryStore` already populated with some memories about the users."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a7f303d6-612e-4e34-bf36-29d4ed25d802",
   "metadata": {},
   "outputs": [],
   "source": [
    "from langchain_openai import OpenAIEmbeddings\n",
    "from langgraph.store.redis import RedisStore\n",
    "from langgraph.store.base import IndexConfig\n",
    "\n",
    "# Set up Redis connection\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "\n",
    "# Create index configuration for vector search\n",
    "index_config: IndexConfig = {\n",
    "    \"dims\": 1536,\n",
    "    \"embed\": OpenAIEmbeddings(model=\"text-embedding-3-small\"),\n",
    "    \"ann_index_config\": {\n",
    "        \"vector_type\": \"vector\",\n",
    "    },\n",
    "    \"distance_type\": \"cosine\",\n",
    "}\n",
    "\n",
    "# Initialize the Redis store\n",
    "redis_store = None\n",
    "with RedisStore.from_conn_string(REDIS_URI, index=index_config) as s:\n",
    "    s.setup()\n",
    "    redis_store = s"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3389c9f4-226d-40c7-8bfc-ee8aac24f79d",
   "metadata": {},
   "source": [
    "## Create graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2a30a362-528c-45ee-9df6-630d2d843588",
   "metadata": {},
   "outputs": [],
   "source": [
    "import uuid\n",
    "from typing import Annotated\n",
    "from typing_extensions import TypedDict\n",
    "\n",
    "from langchain_anthropic import ChatAnthropic\n",
    "from langchain_core.runnables import RunnableConfig\n",
    "from langgraph.graph import StateGraph, MessagesState, START\n",
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "from langgraph.store.base import BaseStore\n",
    "\n",
    "\n",
    "model = ChatAnthropic(model=\"claude-3-5-sonnet-20240620\")\n",
    "\n",
    "\n",
    "# NOTE: we're passing the Store param to the node --\n",
    "# this is the Store we compile the graph with\n",
    "def call_model(state: MessagesState, config: RunnableConfig, *, store: BaseStore):\n",
    "    user_id = config[\"configurable\"][\"user_id\"]\n",
    "    namespace = (\"memories\", user_id)\n",
    "    memories = store.search(namespace, query=str(state[\"messages\"][-1].content))\n",
    "    info = \"\\n\".join([d.value[\"data\"] for d in memories])\n",
    "    system_msg = f\"You are a helpful assistant talking to the user. User info: {info}\"\n",
    "\n",
    "    # Store new memories if the user asks the model to remember\n",
    "    last_message = state[\"messages\"][-1]\n",
    "    if \"remember\" in last_message.content.lower():\n",
    "        memory = \"User name is Bob\"\n",
    "        store.put(namespace, str(uuid.uuid4()), {\"data\": memory})\n",
    "\n",
    "    response = model.invoke(\n",
    "        [{\"role\": \"system\", \"content\": system_msg}] + state[\"messages\"]\n",
    "    )\n",
    "    return {\"messages\": response}\n",
    "\n",
    "\n",
    "builder = StateGraph(MessagesState)\n",
    "builder.add_node(\"call_model\", call_model)\n",
    "builder.add_edge(START, \"call_model\")\n",
    "\n",
    "# Set up Redis connection for checkpointer\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "checkpointer = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    checkpointer = cp\n",
    "\n",
    "# NOTE: we're passing the store object here when compiling the graph\n",
    "graph = builder.compile(checkpointer=checkpointer, store=redis_store)\n",
    "# If you're using LangGraph Cloud or LangGraph Studio, you don't need to pass the store or checkpointer when compiling the graph, since it's done automatically."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f22a4a18-67e4-4f0b-b655-a29bbe202e1c",
   "metadata": {},
   "source": [
    "<div class=\"admonition tip\">\n",
    "    <p class=\"admonition-title\">Note</p>\n",
    "    <p>\n",
    "        If you're using LangGraph Cloud or LangGraph Studio, you <strong>don't need</strong> to pass store when compiling the graph, since it's done automatically.\n",
    "    </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "552d4e33-556d-4fa5-8094-2a076bc21529",
   "metadata": {},
   "source": [
    "## Run the graph!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1842c626-6cd9-4f58-b549-58978e478098",
   "metadata": {},
   "source": [
    "Now let's specify a user ID in the config and tell the model our name:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c871a073-a466-46ad-aafe-2b870831057e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "Hi! Remember: my name is Bob\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "Hello Bob! It's nice to meet you. I'll remember that your name is Bob. How can I assist you today?\n"
     ]
    }
   ],
   "source": [
    "config = {\"configurable\": {\"thread_id\": \"1\", \"user_id\": \"1\"}}\n",
    "input_message = {\"role\": \"user\", \"content\": \"Hi! Remember: my name is Bob\"}\n",
    "for chunk in graph.stream({\"messages\": [input_message]}, config, stream_mode=\"values\"):\n",
    "    chunk[\"messages\"][-1].pretty_print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d862be40-1f8a-4057-81c4-b7bf073dc4c1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "what is my name?\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "Your name is Bob.\n"
     ]
    }
   ],
   "source": [
    "config = {\"configurable\": {\"thread_id\": \"2\", \"user_id\": \"1\"}}\n",
    "input_message = {\"role\": \"user\", \"content\": \"what is my name?\"}\n",
    "for chunk in graph.stream({\"messages\": [input_message]}, config, stream_mode=\"values\"):\n",
    "    chunk[\"messages\"][-1].pretty_print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80fd01ec-f135-4811-8743-daff8daea422",
   "metadata": {},
   "source": [
    "We can now inspect our Redis store and verify that we have in fact saved the memories for the user:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "76cde493-89cf-4709-a339-207d2b7e9ea7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'data': 'User name is Bob'}\n"
     ]
    }
   ],
   "source": [
    "for memory in redis_store.search((\"memories\", \"1\")):\n",
    "    print(memory.value)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23f5d7eb-af23-4131-b8fd-2a69e74e6e55",
   "metadata": {},
   "source": [
    "Let's now run the graph for another user to verify that the memories about the first user are self contained:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d362350b-d730-48bd-9652-983812fd7811",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================\u001b[1m Human Message \u001b[0m=================================\n",
      "\n",
      "what is my name?\n",
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "I apologize, but I don't have any specific information about your name or personal details. As an AI language model, I don't have access to personal information about individual users unless it's provided in the conversation. Is there something else I can help you with?\n"
     ]
    }
   ],
   "source": [
    "config = {\"configurable\": {\"thread_id\": \"3\", \"user_id\": \"2\"}}\n",
    "input_message = {\"role\": \"user\", \"content\": \"what is my name?\"}\n",
    "for chunk in graph.stream({\"messages\": [input_message]}, config, stream_mode=\"values\"):\n",
    "    chunk[\"messages\"][-1].pretty_print()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

================
File: examples/docker-compose.yml
================
name: langgraph-redis-notebooks
services:
  jupyter:
    build:
      context: .  # Build from current directory
      dockerfile: Dockerfile.jupyter
    ports:
      - "8888:8888"
    volumes:
      - ./:/home/jupyter/workspace/examples
    environment:
      - REDIS_URL=redis://redis:6379
      - USER_AGENT=LangGraphRedisJupyterNotebooks/0.0.4
    user: jupyter
    working_dir: /home/jupyter/workspace/examples
    depends_on:
      - redis
  redis:
    image: redis/redis-stack:latest
    ports:
      - "6379:6379"
      - "8001:8001"

================
File: examples/Dockerfile.jupyter
================
FROM python:3.11

# Set up a non-root user
RUN useradd -m jupyter

WORKDIR /home/jupyter/workspace

# Copy notebook files to the workspace
COPY ./ /home/jupyter/workspace/examples/

# Set permissions
RUN chown -R jupyter:jupyter /home/jupyter/workspace

# Switch to non-root user
USER jupyter

# Set up virtual environment
RUN python -m venv /home/jupyter/venv
ENV PATH="/home/jupyter/venv/bin:$PATH"

# Install dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir "httpx>=0.24.0,<1.0.0" && \
    pip install --no-cache-dir "langgraph>=0.3.0" && \
    pip install --no-cache-dir "langgraph-checkpoint-redis>=0.0.4" && \
    pip install --no-cache-dir jupyter "redis>=5.2.1" "redisvl>=0.5.1" langchain-openai langchain-anthropic python-ulid
# Note: Notebook-specific dependencies will be installed in the notebook cells as needed

# Set the working directory to the examples folder
WORKDIR /home/jupyter/workspace/examples

# Expose Jupyter port
EXPOSE 8888

# Start Jupyter Notebook with checkpoints disabled
CMD ["jupyter", "notebook", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--ServerApp.token=''", "--ServerApp.password=''", "--ServerApp.allow_root=True", "--NotebookApp.disable_check_xsrf=True", "--FileContentsManager.checkpoints_kwargs={'root_dir':'/tmp/checkpoints'}"]

================
File: examples/jupyter_notebook_config.py
================
# mypy: disable-error-code="name-defined"
c = get_config()  # type: ignore # noqa: F821

================
File: examples/persistence-functional.ipynb
================
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "51466c8d-8ce4-4b3d-be4e-18fdbeda5f53",
   "metadata": {},
   "source": [
    "# How to add thread-level persistence with Redis (functional API)\n",
    "\n",
    "!!! info \"Prerequisites\"\n",
    "\n",
    "    This guide assumes familiarity with the following:\n",
    "    \n",
    "    - [Functional API](../../concepts/functional_api/)\n",
    "    - [Persistence](../../concepts/persistence/)\n",
    "    - [Memory](../../concepts/memory/)\n",
    "    - [Chat Models](https://python.langchain.com/docs/concepts/chat_models/)\n",
    "\n",
    "Many AI applications need memory to share context across multiple interactions on the same [thread](../../concepts/persistence#threads) (e.g., multiple turns of a conversation). In LangGraph functional API, this kind of memory can be added to any [entrypoint()][langgraph.func.entrypoint] workflow using [thread-level persistence](https://langchain-ai.github.io/langgraph/concepts/persistence).\n",
    "\n",
    "When creating a LangGraph workflow, you can set it up to persist its results by using a [checkpointer](https://langchain-ai.github.io/langgraph/reference/checkpoints/#basecheckpointsaver):\n",
    "\n",
    "\n",
    "1. Create an instance of a Redis checkpointer:\n",
    "\n",
    "    ```python\n",
    "    from langgraph.checkpoint.redis import RedisSaver\n",
    "    \n",
    "    # Set up Redis connection for checkpointer\n",
    "    REDIS_URI = \"redis://redis:6379\"\n",
    "    checkpointer = None\n",
    "    with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "        cp.setup()\n",
    "        checkpointer = cp      \n",
    "    ```\n",
    "\n",
    "2. Pass `checkpointer` instance to the `entrypoint()` decorator:\n",
    "\n",
    "    ```python\n",
    "    from langgraph.func import entrypoint\n",
    "    \n",
    "    @entrypoint(checkpointer=checkpointer)\n",
    "    def workflow(inputs)\n",
    "        ...\n",
    "    ```\n",
    "\n",
    "3. Optionally expose `previous` parameter in the workflow function signature:\n",
    "\n",
    "    ```python\n",
    "    @entrypoint(checkpointer=checkpointer)\n",
    "    def workflow(\n",
    "        inputs,\n",
    "        *,\n",
    "        # you can optionally specify `previous` in the workflow function signature\n",
    "        # to access the return value from the workflow as of the last execution\n",
    "        previous\n",
    "    ):\n",
    "        previous = previous or []\n",
    "        combined_inputs = previous + inputs\n",
    "        result = do_something(combined_inputs)\n",
    "        ...\n",
    "    ```\n",
    "\n",
    "4. Optionally choose which values will be returned from the workflow and which will be saved by the checkpointer as `previous`:\n",
    "\n",
    "    ```python\n",
    "    @entrypoint(checkpointer=checkpointer)\n",
    "    def workflow(inputs, *, previous):\n",
    "        ...\n",
    "        result = do_something(...)\n",
    "        return entrypoint.final(value=result, save=combine(inputs, result))\n",
    "    ```\n",
    "\n",
    "This guide shows how you can add thread-level persistence to your workflow using Redis as the backing store.\n",
    "\n",
    "!!! tip \"Note\"\n",
    "\n",
    "    If you need memory that is __shared__ across multiple conversations or users (cross-thread persistence), check out this [how-to guide](../cross-thread-persistence-functional).\n",
    "\n",
    "!!! tip \"Note\"\n",
    "\n",
    "    If you need to add thread-level persistence to a `StateGraph`, check out this [how-to guide](../persistence)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cbd446a-808f-4394-be92-d45ab818953c",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "First we need to install the packages required"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "af4ce0ba-7596-4e5f-8bf8-0b0bd6e62833",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture --no-stderr\n",
    "%pip install --quiet -U langgraph langchain_anthropic"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0abe11f4-62ed-4dc4-8875-3db21e260d1d",
   "metadata": {},
   "source": [
    "Next, we need to set API key for Anthropic (the LLM we will use)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c903a1cf-2977-4e2d-ad7d-8b3946821d89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "ANTHROPIC_API_KEY:  ········\n"
     ]
    }
   ],
   "source": [
    "import getpass\n",
    "import os\n",
    "\n",
    "\n",
    "def _set_env(var: str):\n",
    "    if not os.environ.get(var):\n",
    "        os.environ[var] = getpass.getpass(f\"{var}: \")\n",
    "\n",
    "\n",
    "_set_env(\"ANTHROPIC_API_KEY\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0ed46a8-effe-4596-b0e1-a6a29ee16f5c",
   "metadata": {},
   "source": [
    "<div class=\"admonition tip\">\n",
    "    <p class=\"admonition-title\">Set up <a href=\"https://smith.langchain.com\">LangSmith</a> for LangGraph development</p>\n",
    "    <p style=\"padding-top: 5px;\">\n",
    "        Sign up for LangSmith to quickly spot issues and improve the performance of your LangGraph projects. LangSmith lets you use trace data to debug, test, and monitor your LLM apps built with LangGraph — read more about how to get started <a href=\"https://docs.smith.langchain.com\">here</a>. \n",
    "    </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4cf509bc",
   "metadata": {},
   "source": [
    "## Example: simple chatbot with short-term memory\n",
    "\n",
    "We will be using a workflow with a single task that calls a [chat model](https://python.langchain.com/docs/concepts/chat_models/).\n",
    "\n",
    "Let's first define the model we'll be using:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "892b54b9-75f0-4804-9ed0-88b5e5532989",
   "metadata": {},
   "outputs": [],
   "source": [
    "from langchain_anthropic import ChatAnthropic\n",
    "\n",
    "model = ChatAnthropic(model=\"claude-3-5-sonnet-latest\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b7a2792-982b-4e47-83eb-0c594725d1c1",
   "metadata": {},
   "source": [
    "Now we can define our task and workflow. To add in persistence, we need to pass in a [Checkpointer](https://langchain-ai.github.io/langgraph/reference/checkpoints/#langgraph.checkpoint.base.BaseCheckpointSaver) to the [entrypoint()][langgraph.func.entrypoint] decorator."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "87326ea6-34c5-46da-a41f-dda26ef9bd74",
   "metadata": {},
   "outputs": [],
   "source": [
    "from langchain_core.messages import BaseMessage\n",
    "from langgraph.graph import add_messages\n",
    "from langgraph.func import entrypoint, task\n",
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "\n",
    "\n",
    "@task\n",
    "def call_model(messages: list[BaseMessage]):\n",
    "    response = model.invoke(messages)\n",
    "    return response\n",
    "\n",
    "\n",
    "# Set up Redis connection for checkpointer\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "checkpointer = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    checkpointer = cp\n",
    "\n",
    "\n",
    "@entrypoint(checkpointer=checkpointer)\n",
    "def workflow(inputs: list[BaseMessage], *, previous: list[BaseMessage]):\n",
    "    if previous:\n",
    "        inputs = add_messages(previous, inputs)\n",
    "\n",
    "    response = call_model(inputs).result()\n",
    "    return entrypoint.final(value=response, save=add_messages(inputs, response))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "250d8fd9-2e7a-4892-9adc-19762a1e3cce",
   "metadata": {},
   "source": [
    "If we try to use this workflow, the context of the conversation will be persisted across interactions:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7654ebcc-2179-41b4-92d1-6666f6f8634f",
   "metadata": {},
   "source": [
    "!!! note Note\n",
    "\n",
    "    If you're using LangGraph Cloud or LangGraph Studio, you __don't need__ to pass checkpointer to the entrypoint decorator, since it's done automatically."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a1b56c5-bd61-4192-8bdb-458a1e9f0159",
   "metadata": {},
   "source": [
    "We can now interact with the agent and see that it remembers previous messages!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cfd140f0-a5a6-4697-8115-322242f197b5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "Hi Bob! I'm Claude. Nice to meet you! How are you today?\n"
     ]
    }
   ],
   "source": [
    "config = {\"configurable\": {\"thread_id\": \"1\"}}\n",
    "input_message = {\"role\": \"user\", \"content\": \"hi! I'm bob\"}\n",
    "for chunk in workflow.stream([input_message], config, stream_mode=\"values\"):\n",
    "    chunk.pretty_print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1bb07bf8-68b7-4049-a0f1-eb67a4879a3a",
   "metadata": {},
   "source": [
    "You can always resume previous threads:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "08ae8246-11d5-40e1-8567-361e5bef8917",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "Your name is Bob. You told me that in your first message when you said \"hi! I'm bob\"\n"
     ]
    }
   ],
   "source": [
    "input_message = {\"role\": \"user\", \"content\": \"what's my name?\"}\n",
    "for chunk in workflow.stream([input_message], config, stream_mode=\"values\"):\n",
    "    chunk.pretty_print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f47bbfc-d9ef-4288-ba4a-ebbc0136fa9d",
   "metadata": {},
   "source": [
    "If we want to start a new conversation, we can pass in a different `thread_id`. Poof! All the memories are gone!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "273d56a8-f40f-4a51-a27f-7c6bb2bda0ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================\u001b[1m Ai Message \u001b[0m==================================\n",
      "\n",
      "I don't know your name. I can only see our current conversation and don't have access to personal information unless you choose to share it with me.\n"
     ]
    }
   ],
   "source": [
    "input_message = {\"role\": \"user\", \"content\": \"what's my name?\"}\n",
    "for chunk in workflow.stream(\n",
    "    [input_message],\n",
    "    {\"configurable\": {\"thread_id\": \"2\"}},\n",
    "    stream_mode=\"values\",\n",
    "):\n",
    "    chunk.pretty_print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac7926a8-4c88-4b16-973c-53d6da3f4a08",
   "metadata": {},
   "source": [
    "!!! tip \"Streaming tokens\"\n",
    "\n",
    "    If you would like to stream LLM tokens from your chatbot, you can use `stream_mode=\"messages\"`. Check out this [how-to guide](../streaming-tokens) to learn more."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

================
File: examples/README.md
================
# Redis Notebooks for LangGraph

This directory contains Jupyter notebooks demonstrating the usage of Redis with LangGraph.

## Running Notebooks with Docker

To run these notebooks using Docker (recommended for consistent environment):

1. Ensure you have Docker and Docker Compose installed on your system.
2. Navigate to this directory (`examples`) in your terminal.
3. Run the following command:

   ```bash
   docker compose up
   ```

4. Look for a URL in the console output that starts with `http://127.0.0.1:8888/tree`. Open this URL in your web browser to access Jupyter Notebook.
5. You can now run the notebooks with all dependencies pre-installed.

Note: 
- The first time you run this, it may take a few minutes to build the Docker image.
- The Docker setup uses a simplified structure where the examples are self-contained, making it portable and independent of the repository structure.

To stop the Docker containers, use Ctrl+C in the terminal where you ran `docker compose up`, then run:

```bash
docker compose down
```

## Running Notebooks Locally

If you prefer to run these notebooks locally without Docker:

1. Make sure you have Redis running locally or accessible from your machine.
2. Install the required dependencies:

   ```bash
   pip install langgraph-checkpoint-redis
   pip install langgraph>=0.3.0 
   pip install jupyter redis>=5.2.1 redisvl>=0.5.1 
   pip install langchain-openai langchain-anthropic 
   pip install python-ulid "httpx>=0.24.0,<1.0.0"
   
   # Some notebooks may require additional packages, which will be installed 
   # within the notebooks themselves when needed
   ```

3. Set the appropriate Redis connection string in the notebooks.
4. Launch Jupyter Notebook:

   ```bash
   jupyter notebook
   ```

5. Navigate to the notebook you want to run and open it.

## Notebook Contents

- `persistence-functional.ipynb`: Demonstrates the usage of `RedisSaver` and functional persistence patterns with LangGraph.
- `create-react-agent-memory.ipynb`: Shows how to create an agent with persistent memory using Redis.
- `cross-thread-persistence.ipynb`: Demonstrates cross-thread persistence capabilities with Redis.
- `cross-thread-persistence-functional.ipynb`: Shows functional cross-thread persistence patterns with Redis.
- `create-react-agent-manage-message-history.ipynb`: Shows how to manage conversation history in a ReAct agent with Redis.
- `subgraph-persistence.ipynb`: Demonstrates persistence with subgraphs using Redis.
- `subgraphs-manage-state.ipynb`: Shows how to manage state in subgraphs with Redis.
- `create-react-agent-hitl.ipynb`: Demonstrates human-in-the-loop (HITL) capabilities with Redis.
- `human_in_the_loop/*.ipynb`: Demonstrates various human-in-the-loop interaction patterns with LangGraph and Redis.

All notebooks have been updated to use the Redis implementation instead of memory implementation, showcasing the proper usage of Redis integration with LangGraph.

These notebooks are designed to work both within this Docker environment (using local package builds) and standalone (using installed packages via pip).

================
File: examples/subgraph-persistence.ipynb
================
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "176e8dbb-1a0a-49ce-a10e-2417e8ea17a0",
   "metadata": {},
   "source": [
    "# How to add thread-level persistence to a subgraph"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c67581a-49fb-4597-a7fc-6774581c2160",
   "metadata": {},
   "source": [
    "<div class=\"admonition tip\">\n",
    "    <p class=\"admonition-title\">Prerequisites</p>\n",
    "    <p>\n",
    "        This guide assumes familiarity with the following:\n",
    "        <ul>\n",
    "            <li>            \n",
    "                <a href=\"https://langchain-ai.github.io/langgraph/concepts/low_level/#subgraphs\">\n",
    "                    Subgraphs\n",
    "                </a>\n",
    "            </li>\n",
    "            <li>\n",
    "                <a href=\"https://langchain-ai.github.io/langgraph/concepts/persistence/\">\n",
    "                    Persistence\n",
    "                </a>\n",
    "            </li>\n",
    "        </ul>\n",
    "    </p>\n",
    "</div>\n",
    "\n",
    "This guide shows how you can add [thread-level](https://langchain-ai.github.io/langgraph/how-tos/persistence/) persistence to graphs that use [subgraphs](https://langchain-ai.github.io/langgraph/how-tos/subgraph/)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f83b855-ab23-4de7-9559-702cad9a29c6",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "First, let's install the required packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "77d1eafa-3252-45f6-9af0-d94e1f9c5c9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture --no-stderr\n",
    "%pip install -U langgraph"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e60c6cd-bf4e-46af-9761-b872d0fbe3b6",
   "metadata": {},
   "source": [
    "<div class=\"admonition tip\">\n",
    "    <p class=\"admonition-title\">Set up <a href=\"https://smith.langchain.com\">LangSmith</a> for LangGraph development</p>\n",
    "    <p style=\"padding-top: 5px;\">\n",
    "        Sign up for LangSmith to quickly spot issues and improve the performance of your LangGraph projects. LangSmith lets you use trace data to debug, test, and monitor your LLM apps built with LangGraph — read more about how to get started <a href=\"https://docs.smith.langchain.com\">here</a>. \n",
    "    </p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "871b9056-fec7-4683-8c22-f56c91f5b13b",
   "metadata": {},
   "source": [
    "## Define the graph with persistence"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "9f1303ef-df37-48e0-8a59-8ff169c52c5b",
   "metadata": {},
   "source": [
    "To add persistence to a graph with subgraphs, all you need to do is pass a [checkpointer](https://langchain-ai.github.io/langgraph/reference/checkpoints/#langgraph.checkpoint.base.BaseCheckpointSaver) when **compiling the parent graph**. LangGraph will automatically propagate the checkpointer to the child subgraphs."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c74cde2e-c127-4326-8d36-b6acef987f0a",
   "metadata": {},
   "source": [
    "!!! note\n",
    "    You **shouldn't provide** a checkpointer when compiling a subgraph. Instead, you must define a **single** checkpointer that you pass to `parent_graph.compile()`, and LangGraph will automatically propagate the checkpointer to the child subgraphs. If you pass the checkpointer to the `subgraph.compile()`, it will simply be ignored. This also applies when you [add a node function that invokes the subgraph](../subgraph#add-a-node-function-that-invokes-the-subgraph)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3a1fe22-1ca9-45eb-a35b-71b9c905e8c5",
   "metadata": {},
   "source": [
    "Let's define a simple graph with a single subgraph node to show how to do this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0d76f0c0-bd77-4eca-9527-27bcdf85dd42",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<langgraph.graph.state.StateGraph at 0xffff943a5090>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from langgraph.graph import START, StateGraph\n",
    "from typing import TypedDict\n",
    "\n",
    "\n",
    "# subgraph\n",
    "\n",
    "\n",
    "class SubgraphState(TypedDict):\n",
    "    foo: str  # note that this key is shared with the parent graph state\n",
    "    bar: str\n",
    "\n",
    "\n",
    "def subgraph_node_1(state: SubgraphState):\n",
    "    return {\"bar\": \"bar\"}\n",
    "\n",
    "\n",
    "def subgraph_node_2(state: SubgraphState):\n",
    "    # note that this node is using a state key ('bar') that is only available in the subgraph\n",
    "    # and is sending update on the shared state key ('foo')\n",
    "    return {\"foo\": state[\"foo\"] + state[\"bar\"]}\n",
    "\n",
    "\n",
    "subgraph_builder = StateGraph(SubgraphState)\n",
    "subgraph_builder.add_node(subgraph_node_1)\n",
    "subgraph_builder.add_node(subgraph_node_2)\n",
    "subgraph_builder.add_edge(START, \"subgraph_node_1\")\n",
    "subgraph_builder.add_edge(\"subgraph_node_1\", \"subgraph_node_2\")\n",
    "subgraph = subgraph_builder.compile()\n",
    "\n",
    "\n",
    "# parent graph\n",
    "\n",
    "\n",
    "class State(TypedDict):\n",
    "    foo: str\n",
    "\n",
    "\n",
    "def node_1(state: State):\n",
    "    return {\"foo\": \"hi! \" + state[\"foo\"]}\n",
    "\n",
    "\n",
    "builder = StateGraph(State)\n",
    "builder.add_node(\"node_1\", node_1)\n",
    "# note that we're adding the compiled subgraph as a node to the parent graph\n",
    "builder.add_node(\"node_2\", subgraph)\n",
    "builder.add_edge(START, \"node_1\")\n",
    "builder.add_edge(\"node_1\", \"node_2\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47084b1f-9fd5-40a9-9d75-89eb5f853d02",
   "metadata": {},
   "source": [
    "We can now compile the graph with an in-memory checkpointer (`MemorySaver`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7657d285-c896-40c9-a569-b4a3b9c230c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "\n",
    "# Set up Redis connection for checkpointer\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "checkpointer = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    checkpointer = cp\n",
    "\n",
    "# You must only pass checkpointer when compiling the parent graph.\n",
    "# LangGraph will automatically propagate the checkpointer to the child subgraphs.\n",
    "graph = builder.compile(checkpointer=checkpointer)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d193e3c-4ec3-4034-beed-8e5550c6542c",
   "metadata": {},
   "source": [
    "## Verify persistence works"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb69a5f0-b92e-4d4e-9aa9-c4c4ec7de91a",
   "metadata": {},
   "source": [
    "Let's now run the graph and inspect the persisted state for both the parent graph and the subgraph to verify that persistence works. We should expect to see the final execution results for both the parent and subgraph in `state.values`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "13da686e-6ed6-4b83-93e8-1631fcc8c2a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "config = {\"configurable\": {\"thread_id\": \"1\"}}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8721f045-2e82-4bf0-9d85-5ba6ecf899d6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'node_1': {'foo': 'hi! foo'}}\n",
      "{'subgraph_node_1': {'bar': 'bar'}}\n",
      "{'subgraph_node_2': {'foo': 'hi! foobar'}}\n",
      "{'node_2': {'foo': 'hi! foobar'}}\n"
     ]
    }
   ],
   "source": [
    "for _, chunk in graph.stream({\"foo\": \"foo\"}, config, subgraphs=True):\n",
    "    print(chunk)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec6b5ce4-becc-4910-8a6d-d6b60d9d6f60",
   "metadata": {},
   "source": [
    "We can now view the parent graph state by calling `graph.get_state()` with the same config that we used to invoke the graph."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3e817283-142d-4fda-8cb1-8de34717f833",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'foo': 'hi! foobar'}"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph.get_state(config).values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbc4f30b-941e-4140-8bfa-3b8cc670489c",
   "metadata": {},
   "source": [
    "To view the subgraph state, we need to do two things:\n",
    "\n",
    "1. Find the most recent config value for the subgraph\n",
    "2. Use `graph.get_state()` to retrieve that value for the most recent subgraph config.\n",
    "\n",
    "To find the correct config, we can examine the state history from the parent graph and find the state snapshot before we return results from `node_2` (the node with subgraph):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e896628f-36b2-45eb-b7c5-c64c1098f328",
   "metadata": {},
   "outputs": [],
   "source": [
    "state_with_subgraph = [\n",
    "    s for s in graph.get_state_history(config) if s.next == (\"node_2\",)\n",
    "][0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7af49977-42b1-40a1-88f1-f07437f8b7f9",
   "metadata": {},
   "source": [
    "The state snapshot will include the list of `tasks` to be executed next. When using subgraphs, the `tasks` will contain the config that we can use to retrieve the subgraph state:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "21e96df3-946d-40f8-8d6d-055ae4177452",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'configurable': {'thread_id': '1',\n",
       "  'checkpoint_ns': 'node_2:36b675af-bd6e-89a7-d67b-31c68339886d'}}"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subgraph_config = state_with_subgraph.tasks[0].state\n",
    "subgraph_config"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1d2401b3-d52b-4895-a5d1-dccf015ba216",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'foo': 'hi! foobar', 'bar': 'bar'}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph.get_state(subgraph_config).values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40aded92-99dd-427b-932d-aa78f474c271",
   "metadata": {},
   "source": [
    "If you want to learn more about how to modify the subgraph state for human-in-the-loop workflows, check out this [how-to guide](https://langchain-ai.github.io/langgraph/how-tos/subgraphs-manage-state/)."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

================
File: examples/subgraphs-manage-state.ipynb
================
{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# How to view and update state in subgraphs\n",
    "\n",
    "<div class=\"admonition tip\">\n",
    "    <p class=\"admonition-title\">Prerequisites</p>\n",
    "    <p>\n",
    "        This guide assumes familiarity with the following:\n",
    "        <ul>\n",
    "            <li>            \n",
    "                <a href=\"https://langchain-ai.github.io/langgraph/concepts/low_level/#subgraphs\">\n",
    "                    Subgraphs\n",
    "                </a>\n",
    "            </li>\n",
    "            <li>            \n",
    "                <a href=\"https://langchain-ai.github.io/langgraph/concepts/human_in_the_loop/\">\n",
    "                    Human-in-the-loop\n",
    "                </a>\n",
    "            </li>\n",
    "            <li>            \n",
    "                <a href=\"https://langchain-ai.github.io/langgraph/concepts/low_level/#state\">\n",
    "                    State\n",
    "                </a>\n",
    "            </li>\n",
    "        </ul>\n",
    "    </p>\n",
    "</div> \n",
    "\n",
    "Once you add [persistence](../subgraph-persistence), you can easily view and update the state of the subgraph at any point in time. This enables a lot of the human-in-the-loop interaction patterns:\n",
    "\n",
    "* You can surface a state during an interrupt to a user to let them accept an action.\n",
    "* You can rewind the subgraph to reproduce or avoid issues.\n",
    "* You can modify the state to let the user better control its actions.\n",
    "\n",
    "This guide shows how you can do this."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "First, let's install the required packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture --no-stderr\n",
    "%pip install -U langgraph"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we need to set API keys for OpenAI (the LLM we will use):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "OPENAI_API_KEY:  ········\n"
     ]
    }
   ],
   "source": [
    "import getpass\n",
    "import os\n",
    "\n",
    "\n",
    "def _set_env(var: str):\n",
    "    if not os.environ.get(var):\n",
    "        os.environ[var] = getpass.getpass(f\"{var}: \")\n",
    "\n",
    "\n",
    "_set_env(\"OPENAI_API_KEY\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"admonition tip\">\n",
    "    <p class=\"admonition-title\">Set up <a href=\"https://smith.langchain.com\">LangSmith</a> for LangGraph development</p>\n",
    "    <p style=\"padding-top: 5px;\">\n",
    "        Sign up for LangSmith to quickly spot issues and improve the performance of your LangGraph projects. LangSmith lets you use trace data to debug, test, and monitor your LLM apps built with LangGraph — read more about how to get started <a href=\"https://docs.smith.langchain.com\">here</a>. \n",
    "    </p>\n",
    "</div>"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define subgraph\n",
    "\n",
    "First, let's set up our subgraph. For this, we will create a simple graph that can get the weather for a specific city. We will compile this graph with a [breakpoint](https://langchain-ai.github.io/langgraph/how-tos/human_in_the_loop/breakpoints/) before the `weather_node`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from langgraph.graph import StateGraph, END, START, MessagesState\n",
    "from langchain_core.tools import tool\n",
    "from langchain_openai import ChatOpenAI\n",
    "\n",
    "\n",
    "@tool\n",
    "def get_weather(city: str):\n",
    "    \"\"\"Get the weather for a specific city\"\"\"\n",
    "    return f\"It's sunny in {city}!\"\n",
    "\n",
    "\n",
    "raw_model = ChatOpenAI(model=\"gpt-4o\")\n",
    "model = raw_model.with_structured_output(get_weather)\n",
    "\n",
    "\n",
    "class SubGraphState(MessagesState):\n",
    "    city: str\n",
    "\n",
    "\n",
    "def model_node(state: SubGraphState):\n",
    "    result = model.invoke(state[\"messages\"])\n",
    "    return {\"city\": result[\"city\"]}\n",
    "\n",
    "\n",
    "def weather_node(state: SubGraphState):\n",
    "    result = get_weather.invoke({\"city\": state[\"city\"]})\n",
    "    return {\"messages\": [{\"role\": \"assistant\", \"content\": result}]}\n",
    "\n",
    "\n",
    "subgraph = StateGraph(SubGraphState)\n",
    "subgraph.add_node(model_node)\n",
    "subgraph.add_node(weather_node)\n",
    "subgraph.add_edge(START, \"model_node\")\n",
    "subgraph.add_edge(\"model_node\", \"weather_node\")\n",
    "subgraph.add_edge(\"weather_node\", END)\n",
    "subgraph = subgraph.compile(interrupt_before=[\"weather_node\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define parent graph\n",
    "\n",
    "We can now setup the overall graph. This graph will first route to the subgraph if it needs to get the weather, otherwise it will route to a normal LLM."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from typing import Literal\n",
    "from typing_extensions import TypedDict\n",
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "\n",
    "\n",
    "# Set up Redis connection for checkpointer\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "memory = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    memory = cp\n",
    "\n",
    "\n",
    "class RouterState(MessagesState):\n",
    "    route: Literal[\"weather\", \"other\"]\n",
    "\n",
    "\n",
    "class Router(TypedDict):\n",
    "    route: Literal[\"weather\", \"other\"]\n",
    "\n",
    "\n",
    "router_model = raw_model.with_structured_output(Router)\n",
    "\n",
    "\n",
    "def router_node(state: RouterState):\n",
    "    system_message = \"Classify the incoming query as either about weather or not.\"\n",
    "    messages = [{\"role\": \"system\", \"content\": system_message}] + state[\"messages\"]\n",
    "    route = router_model.invoke(messages)\n",
    "    return {\"route\": route[\"route\"]}\n",
    "\n",
    "\n",
    "def normal_llm_node(state: RouterState):\n",
    "    response = raw_model.invoke(state[\"messages\"])\n",
    "    return {\"messages\": [response]}\n",
    "\n",
    "\n",
    "def route_after_prediction(\n",
    "    state: RouterState,\n",
    ") -> Literal[\"weather_graph\", \"normal_llm_node\"]:\n",
    "    if state[\"route\"] == \"weather\":\n",
    "        return \"weather_graph\"\n",
    "    else:\n",
    "        return \"normal_llm_node\"\n",
    "\n",
    "\n",
    "graph = StateGraph(RouterState)\n",
    "graph.add_node(router_node)\n",
    "graph.add_node(normal_llm_node)\n",
    "graph.add_node(\"weather_graph\", subgraph)\n",
    "graph.add_edge(START, \"router_node\")\n",
    "graph.add_conditional_edges(\"router_node\", route_after_prediction)\n",
    "graph.add_edge(\"normal_llm_node\", END)\n",
    "graph.add_edge(\"weather_graph\", END)\n",
    "graph = graph.compile(checkpointer=memory)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython.display import Image, display\n",
    "\n",
    "# Setting xray to 1 will show the internal structure of the nested graph\n",
    "display(Image(graph.get_graph(xray=1).draw_mermaid_png()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's test this out with a normal query to make sure it works as intended!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'router_node': {'route': 'other'}}\n",
      "{'normal_llm_node': {'messages': [AIMessage(content='Hello! How can I assist you today?', additional_kwargs={'refusal': None}, response_metadata={'token_usage': {'completion_tokens': 10, 'prompt_tokens': 9, 'total_tokens': 19, 'completion_tokens_details': {'accepted_prediction_tokens': 0, 'audio_tokens': 0, 'reasoning_tokens': 0, 'rejected_prediction_tokens': 0}, 'prompt_tokens_details': {'audio_tokens': 0, 'cached_tokens': 0}}, 'model_name': 'gpt-4o-2024-08-06', 'system_fingerprint': 'fp_f5bdcc3276', 'id': 'chatcmpl-BRlSXXvMNEzsNaXLZjedowbm8hL33', 'finish_reason': 'stop', 'logprobs': None}, id='run-4e5e0dc8-b928-4d9f-9479-8ab8b5cf6160-0', usage_metadata={'input_tokens': 9, 'output_tokens': 10, 'total_tokens': 19, 'input_token_details': {'audio': 0, 'cache_read': 0}, 'output_token_details': {'audio': 0, 'reasoning': 0}})]}}\n"
     ]
    }
   ],
   "source": [
    "config = {\"configurable\": {\"thread_id\": \"1\"}}\n",
    "inputs = {\"messages\": [{\"role\": \"user\", \"content\": \"hi!\"}]}\n",
    "for update in graph.stream(inputs, config=config, stream_mode=\"updates\"):\n",
    "    print(update)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Great! We didn't ask about the weather, so we got a normal response from the LLM.\n",
    "\n",
    "## Resuming from breakpoints\n",
    "\n",
    "Let's now look at what happens with breakpoints. Let's invoke it with a query that should get routed to the weather subgraph where we have the interrupt node."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'router_node': {'route': 'weather'}}\n",
      "{'__interrupt__': ()}\n"
     ]
    }
   ],
   "source": [
    "config = {\"configurable\": {\"thread_id\": \"2\"}}\n",
    "inputs = {\"messages\": [{\"role\": \"user\", \"content\": \"what's the weather in sf\"}]}\n",
    "for update in graph.stream(inputs, config=config, stream_mode=\"updates\"):\n",
    "    print(update)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that the graph stream doesn't include subgraph events. If we want to stream subgraph events, we can pass `subgraphs=True` and get back subgraph events like so:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "((), {'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='4480c377-9426-4fb7-b869-e2a3552cc3fa')]})\n",
      "((), {'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='4480c377-9426-4fb7-b869-e2a3552cc3fa')], 'route': 'weather'})\n",
      "(('weather_graph:7bd6b183-2a8a-824e-5496-40a40a0966c0',), {'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='4480c377-9426-4fb7-b869-e2a3552cc3fa')]})\n",
      "(('weather_graph:7bd6b183-2a8a-824e-5496-40a40a0966c0',), {'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='4480c377-9426-4fb7-b869-e2a3552cc3fa')], 'city': 'San Francisco'})\n"
     ]
    }
   ],
   "source": [
    "config = {\"configurable\": {\"thread_id\": \"3\"}}\n",
    "inputs = {\"messages\": [{\"role\": \"user\", \"content\": \"what's the weather in sf\"}]}\n",
    "for update in graph.stream(inputs, config=config, stream_mode=\"values\", subgraphs=True):\n",
    "    print(update)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we get the state now, we can see that it's paused on `weather_graph`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('weather_graph',)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "state = graph.get_state(config)\n",
    "state.next"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we look at the pending tasks for our current state, we can see that we have one task named `weather_graph`, which corresponds to the subgraph task."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(PregelTask(id='7bd6b183-2a8a-824e-5496-40a40a0966c0', name='weather_graph', path=('__pregel_pull', 'weather_graph'), error=None, interrupts=(), state={'configurable': {'thread_id': '3', 'checkpoint_ns': 'weather_graph:7bd6b183-2a8a-824e-5496-40a40a0966c0'}}, result=None),)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "state.tasks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "However since we got the state using the config of the parent graph, we don't have access to the subgraph state. If you look at the `state` value of the `PregelTask` above you will note that it is simply the configuration of the parent graph. If we want to actually populate the subgraph state, we can pass in `subgraphs=True` to `get_state` like so:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PregelTask(id='7bd6b183-2a8a-824e-5496-40a40a0966c0', name='weather_graph', path=('__pregel_pull', 'weather_graph'), error=None, interrupts=(), state=StateSnapshot(values={'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='4480c377-9426-4fb7-b869-e2a3552cc3fa')], 'city': 'San Francisco'}, next=('weather_node',), config={'configurable': {'thread_id': '3', 'checkpoint_ns': 'weather_graph:7bd6b183-2a8a-824e-5496-40a40a0966c0', 'checkpoint_id': '1f02534f-aa2b-6f07-8000-fbe2669bffca', 'checkpoint_map': {'': '1f02534f-aa20-6448-8001-dacd90901fb8', 'weather_graph:7bd6b183-2a8a-824e-5496-40a40a0966c0': '1f02534f-aa2b-6f07-8000-fbe2669bffca'}}}, metadata={'source': 'loop', 'writes': {'model_node': {'city': 'San Francisco'}}, 'step': 1, 'parents': {'': '1f02534f-aa20-6448-8001-dacd90901fb8'}, 'thread_id': '3', 'langgraph_step': 2, 'langgraph_node': 'weather_graph', 'langgraph_triggers': ['branch:to:weather_graph'], 'langgraph_path': ['__pregel_pull', 'weather_graph'], 'langgraph_checkpoint_ns': 'weather_graph:7bd6b183-2a8a-824e-5496-40a40a0966c0'}, created_at='2025-04-29T20:03:12.808506+00:00', parent_config=None, tasks=(PregelTask(id='1221f28f-d77c-4051-1eb9-52d177bc65b6', name='weather_node', path=('__pregel_pull', 'weather_node'), error=None, interrupts=(), state=None, result=None),), interrupts=()), result=None)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "state = graph.get_state(config, subgraphs=True)\n",
    "state.tasks[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we have access to the subgraph state! If you look at the `state` value of the `PregelTask` you can see that it has all the information we need, like the next node (`weather_node`) and the current state values (e.g. `city`).\n",
    "\n",
    "To resume execution, we can just invoke the outer graph as normal:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "((), {'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='4480c377-9426-4fb7-b869-e2a3552cc3fa')], 'route': 'weather'})\n",
      "(('weather_graph:7bd6b183-2a8a-824e-5496-40a40a0966c0',), {'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='4480c377-9426-4fb7-b869-e2a3552cc3fa')], 'city': 'San Francisco'})\n",
      "(('weather_graph:7bd6b183-2a8a-824e-5496-40a40a0966c0',), {'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='4480c377-9426-4fb7-b869-e2a3552cc3fa'), AIMessage(content=\"It's sunny in San Francisco!\", additional_kwargs={}, response_metadata={}, id='fe75cd26-96ec-4660-b16a-3ab87dce7296')], 'city': 'San Francisco'})\n",
      "((), {'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='4480c377-9426-4fb7-b869-e2a3552cc3fa'), AIMessage(content=\"It's sunny in San Francisco!\", additional_kwargs={}, response_metadata={}, id='fe75cd26-96ec-4660-b16a-3ab87dce7296')], 'route': 'weather'})\n"
     ]
    }
   ],
   "source": [
    "for update in graph.stream(None, config=config, stream_mode=\"values\", subgraphs=True):\n",
    "    print(update)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Resuming from specific subgraph node\n",
    "\n",
    "In the example above, we were replaying from the outer graph - which automatically replayed the subgraph from whatever state it was in previously (paused before the `weather_node` in our case), but it is also possible to replay from inside a subgraph. In order to do so, we need to get the configuration from the exact subgraph state that we want to replay from.\n",
    "\n",
    "We can do this by exploring the state history of the subgraph, and selecting the state before `model_node` - which we can do by filtering on the `.next` parameter.\n",
    "\n",
    "To get the state history of the subgraph, we need to first pass in  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "parent_graph_state_before_subgraph = next(\n",
    "    h for h in graph.get_state_history(config) if h.next == (\"weather_graph\",)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "subgraph_state_before_model_node = next(\n",
    "    h\n",
    "    for h in graph.get_state_history(parent_graph_state_before_subgraph.tasks[0].state)\n",
    "    if h.next == (\"model_node\",)\n",
    ")\n",
    "\n",
    "# This pattern can be extended no matter how many levels deep\n",
    "# subsubgraph_stat_history = next(h for h in graph.get_state_history(subgraph_state_before_model_node.tasks[0].state) if h.next == ('my_subsubgraph_node',))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can confirm that we have gotten the correct state by comparing the `.next` parameter of the `subgraph_state_before_model_node`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('model_node',)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subgraph_state_before_model_node.next"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Perfect! We have gotten the correct state snaphshot, and we can now resume from the `model_node` inside of our subgraph:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "((), {'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='4480c377-9426-4fb7-b869-e2a3552cc3fa'), AIMessage(content=\"It's sunny in San Francisco!\", additional_kwargs={}, response_metadata={}, id='fe75cd26-96ec-4660-b16a-3ab87dce7296')], 'route': 'weather'})\n"
     ]
    }
   ],
   "source": [
    "for value in graph.stream(\n",
    "    None,\n",
    "    config=subgraph_state_before_model_node.config,\n",
    "    stream_mode=\"values\",\n",
    "    subgraphs=True,\n",
    "):\n",
    "    print(value)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Great, this subsection has shown how you can replay from any node, no matter how deeply nested it is inside your graph - a powerful tool for testing how deterministic your agent is."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Modifying state\n",
    "\n",
    "### Update the state of a subgraph\n",
    "\n",
    "What if we want to modify the state of a subgraph? We can do this similarly to how we [update the state of normal graphs](https://langchain-ai.github.io/langgraph/how-tos/human_in_the_loop/time-travel/), just being careful to pass in the config of the subgraph to `update_state`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'router_node': {'route': 'weather'}}\n",
      "{'__interrupt__': ()}\n"
     ]
    }
   ],
   "source": [
    "config = {\"configurable\": {\"thread_id\": \"4\"}}\n",
    "inputs = {\"messages\": [{\"role\": \"user\", \"content\": \"what's the weather in sf\"}]}\n",
    "for update in graph.stream(inputs, config=config, stream_mode=\"updates\"):\n",
    "    print(update)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='bb44b193-07e8-43e8-8d0f-c0ccb1009cc2')]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "state = graph.get_state(config, subgraphs=True)\n",
    "state.values[\"messages\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In order to update the state of the **inner** graph, we need to pass the config for the **inner** graph, which we can get by accessing calling `state.tasks[0].state.config` - since we interrupted inside the subgraph, the state of the task is just the state of the subgraph."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'configurable': {'thread_id': '4',\n",
       "  'checkpoint_ns': 'weather_graph:44a45213-d789-63e2-f893-efb606d654da',\n",
       "  'checkpoint_id': '1f02534f-b85b-65a9-8000-3ac82b3323fa',\n",
       "  'checkpoint_map': {'': '1f02534f-b84e-614c-8001-62bc48f85f0e',\n",
       "   'weather_graph:44a45213-d789-63e2-f893-efb606d654da': '1f02534f-b85b-65a9-8000-3ac82b3323fa'}}}"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graph.update_state(state.tasks[0].state.config, {\"city\": \"la\"})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now resume streaming the outer graph (which will resume the subgraph!) and check that we updated our search to use LA instead of SF."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(('weather_graph:44a45213-d789-63e2-f893-efb606d654da',), {'weather_node': {'messages': [{'role': 'assistant', 'content': \"It's sunny in la!\"}]}})\n",
      "((), {'weather_graph': {'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='bb44b193-07e8-43e8-8d0f-c0ccb1009cc2'), AIMessage(content=\"It's sunny in la!\", additional_kwargs={}, response_metadata={}, id='0d94045b-1b72-4f06-be72-076cbb5e3c93')]}})\n"
     ]
    }
   ],
   "source": [
    "for update in graph.stream(None, config=config, stream_mode=\"updates\", subgraphs=True):\n",
    "    print(update)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fantastic! The AI responded with \"It's sunny in LA!\" as we expected.\n",
    "\n",
    "### Acting as a subgraph node\n",
    "\n",
    "Another way we could update the state is by acting as the `weather_node` ourselves instead of editing the state before `weather_node` is ran as we did above. We can do this by passing the subgraph config and also the `as_node` argument, which allows us to update the state as if we are the node we specify. Thus by setting an interrupt before the `weather_node` and then using the update state function as the `weather_node`, the graph itself never calls `weather_node` directly but instead we decide what the output of `weather_node` should be."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "((), {'router_node': {'route': 'weather'}})\n",
      "(('weather_graph:01697bb1-b7c9-de92-fe7e-015347bfe710',), {'model_node': {'city': 'San Francisco'}})\n",
      "((), {'__interrupt__': ()})\n",
      "interrupted!\n",
      "((), {'weather_graph': {'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='96cbe893-f204-4c06-9253-bf0700bfbc34'), AIMessage(content='rainy', additional_kwargs={}, response_metadata={}, id='12b47fde-603c-4d72-8710-993a896cc890')]}})\n",
      "[HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='96cbe893-f204-4c06-9253-bf0700bfbc34'), AIMessage(content='rainy', additional_kwargs={}, response_metadata={}, id='12b47fde-603c-4d72-8710-993a896cc890')]\n"
     ]
    }
   ],
   "source": [
    "config = {\"configurable\": {\"thread_id\": \"14\"}}\n",
    "inputs = {\"messages\": [{\"role\": \"user\", \"content\": \"what's the weather in sf\"}]}\n",
    "for update in graph.stream(\n",
    "    inputs, config=config, stream_mode=\"updates\", subgraphs=True\n",
    "):\n",
    "    print(update)\n",
    "# Graph execution should stop before the weather node\n",
    "print(\"interrupted!\")\n",
    "\n",
    "state = graph.get_state(config, subgraphs=True)\n",
    "\n",
    "# We update the state by passing in the message we want returned from the weather node, and make sure to use as_node\n",
    "graph.update_state(\n",
    "    state.tasks[0].state.config,\n",
    "    {\"messages\": [{\"role\": \"assistant\", \"content\": \"rainy\"}]},\n",
    "    as_node=\"weather_node\",\n",
    ")\n",
    "for update in graph.stream(None, config=config, stream_mode=\"updates\", subgraphs=True):\n",
    "    print(update)\n",
    "\n",
    "print(graph.get_state(config).values[\"messages\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Perfect! The AI responded with the message we passed in ourselves.\n",
    "\n",
    "### Acting as the entire subgraph\n",
    "\n",
    "Lastly, we could also update the graph just acting as the **entire** subgraph. This is similar to the case above but instead of acting as just the `weather_node` we are acting as the entire subgraph. This is done by passing in the normal graph config as well as the `as_node` argument, where we specify the we are acting as the entire subgraph node."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "((), {'router_node': {'route': 'weather'}})\n",
      "(('weather_graph:45a2c9ac-19b8-f35e-d2bb-80c2c8fe8f86',), {'model_node': {'city': 'San Francisco'}})\n",
      "((), {'__interrupt__': ()})\n",
      "interrupted!\n",
      "[HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='f6c83085-adbe-4eef-a95d-4208cc4432f9'), AIMessage(content='rainy', additional_kwargs={}, response_metadata={}, id='853fa6f1-11a3-41e7-87f3-38eeaf40c69c')]\n"
     ]
    }
   ],
   "source": [
    "config = {\"configurable\": {\"thread_id\": \"8\"}}\n",
    "inputs = {\"messages\": [{\"role\": \"user\", \"content\": \"what's the weather in sf\"}]}\n",
    "for update in graph.stream(\n",
    "    inputs, config=config, stream_mode=\"updates\", subgraphs=True\n",
    "):\n",
    "    print(update)\n",
    "# Graph execution should stop before the weather node\n",
    "print(\"interrupted!\")\n",
    "\n",
    "# We update the state by passing in the message we want returned from the weather graph, making sure to use as_node\n",
    "# Note that we don't need to pass in the subgraph config, since we aren't updating the state inside the subgraph\n",
    "graph.update_state(\n",
    "    config,\n",
    "    {\"messages\": [{\"role\": \"assistant\", \"content\": \"rainy\"}]},\n",
    "    as_node=\"weather_graph\",\n",
    ")\n",
    "for update in graph.stream(None, config=config, stream_mode=\"updates\"):\n",
    "    print(update)\n",
    "\n",
    "print(graph.get_state(config).values[\"messages\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Again, the AI responded with \"rainy\" as we expected.\n",
    "\n",
    "## Double nested subgraphs\n",
    "\n",
    "This same functionality continues to work no matter the level of nesting. Here is an example of doing the same things with a double nested subgraph (although any level of nesting will work). We add another router on top of our already defined graphs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m20:03:18\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n",
      "\u001b[32m20:03:18\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n",
      "\u001b[32m20:03:18\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n"
     ]
    }
   ],
   "source": [
    "from typing import Literal\n",
    "from typing_extensions import TypedDict\n",
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "\n",
    "\n",
    "# Set up Redis connection for checkpointer\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "memory = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    memory = cp\n",
    "\n",
    "\n",
    "class RouterState(MessagesState):\n",
    "    route: Literal[\"weather\", \"other\"]\n",
    "\n",
    "\n",
    "class Router(TypedDict):\n",
    "    route: Literal[\"weather\", \"other\"]\n",
    "\n",
    "\n",
    "router_model = raw_model.with_structured_output(Router)\n",
    "\n",
    "\n",
    "def router_node(state: RouterState):\n",
    "    system_message = \"Classify the incoming query as either about weather or not.\"\n",
    "    messages = [{\"role\": \"system\", \"content\": system_message}] + state[\"messages\"]\n",
    "    route = router_model.invoke(messages)\n",
    "    return {\"route\": route[\"route\"]}\n",
    "\n",
    "\n",
    "def normal_llm_node(state: RouterState):\n",
    "    response = raw_model.invoke(state[\"messages\"])\n",
    "    return {\"messages\": [response]}\n",
    "\n",
    "\n",
    "def route_after_prediction(\n",
    "    state: RouterState,\n",
    ") -> Literal[\"weather_graph\", \"normal_llm_node\"]:\n",
    "    if state[\"route\"] == \"weather\":\n",
    "        return \"weather_graph\"\n",
    "    else:\n",
    "        return \"normal_llm_node\"\n",
    "\n",
    "\n",
    "graph = StateGraph(RouterState)\n",
    "graph.add_node(router_node)\n",
    "graph.add_node(normal_llm_node)\n",
    "graph.add_node(\"weather_graph\", subgraph)\n",
    "graph.add_edge(START, \"router_node\")\n",
    "graph.add_conditional_edges(\"router_node\", route_after_prediction)\n",
    "graph.add_edge(\"normal_llm_node\", END)\n",
    "graph.add_edge(\"weather_graph\", END)\n",
    "graph = graph.compile(checkpointer=memory)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m20:03:18\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n",
      "\u001b[32m20:03:18\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n",
      "\u001b[32m20:03:18\u001b[0m \u001b[34mredisvl.index.index\u001b[0m \u001b[1;30mINFO\u001b[0m   Index already exists, not overwriting.\n"
     ]
    }
   ],
   "source": [
    "from langgraph.checkpoint.redis import RedisSaver\n",
    "\n",
    "# Set up Redis connection for checkpointer\n",
    "REDIS_URI = \"redis://redis:6379\"\n",
    "memory = None\n",
    "with RedisSaver.from_conn_string(REDIS_URI) as cp:\n",
    "    cp.setup()\n",
    "    memory = cp\n",
    "\n",
    "\n",
    "class GrandfatherState(MessagesState):\n",
    "    to_continue: bool\n",
    "\n",
    "\n",
    "def router_node(state: GrandfatherState):\n",
    "    # Dummy logic that will always continue\n",
    "    return {\"to_continue\": True}\n",
    "\n",
    "\n",
    "def route_after_prediction(state: GrandfatherState):\n",
    "    if state[\"to_continue\"]:\n",
    "        return \"graph\"\n",
    "    else:\n",
    "        return END\n",
    "\n",
    "\n",
    "grandparent_graph = StateGraph(GrandfatherState)\n",
    "grandparent_graph.add_node(router_node)\n",
    "grandparent_graph.add_node(\"graph\", graph)\n",
    "grandparent_graph.add_edge(START, \"router_node\")\n",
    "grandparent_graph.add_conditional_edges(\n",
    "    \"router_node\", route_after_prediction, [\"graph\", END]\n",
    ")\n",
    "grandparent_graph.add_edge(\"graph\", END)\n",
    "grandparent_graph = grandparent_graph.compile(checkpointer=memory)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython.display import Image, display\n",
    "\n",
    "# Setting xray to 1 will show the internal structure of the nested graph\n",
    "display(Image(grandparent_graph.get_graph(xray=2).draw_mermaid_png()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we run until the interrupt, we can now see that there are snapshots of the state of all three graphs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "((), {'router_node': {'to_continue': True}})\n",
      "(('graph:ecd08a47-d858-7231-c7a0-aa74b7934e49',), {'router_node': {'route': 'weather'}})\n",
      "(('graph:ecd08a47-d858-7231-c7a0-aa74b7934e49', 'weather_graph:64329b7f-d9e7-1f2c-9a6e-7a3d819eaed6'), {'model_node': {'city': 'San Francisco'}})\n",
      "((), {'__interrupt__': ()})\n"
     ]
    }
   ],
   "source": [
    "config = {\"configurable\": {\"thread_id\": \"2\"}}\n",
    "inputs = {\"messages\": [{\"role\": \"user\", \"content\": \"what's the weather in sf\"}]}\n",
    "for update in grandparent_graph.stream(\n",
    "    inputs, config=config, stream_mode=\"updates\", subgraphs=True\n",
    "):\n",
    "    print(update)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Grandparent State:\n",
      "{'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='0a0cde55-27e8-4c98-bf2a-0707a1d887a1'), HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='cc01dc7a-f5bc-4ed3-8ea7-430941d46c7b')], 'to_continue': True}\n",
      "---------------\n",
      "Parent Graph State:\n",
      "{'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='0a0cde55-27e8-4c98-bf2a-0707a1d887a1'), HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='cc01dc7a-f5bc-4ed3-8ea7-430941d46c7b')], 'route': 'weather'}\n",
      "---------------\n",
      "Subgraph State:\n",
      "{'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='0a0cde55-27e8-4c98-bf2a-0707a1d887a1'), HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='cc01dc7a-f5bc-4ed3-8ea7-430941d46c7b')]}\n"
     ]
    }
   ],
   "source": [
    "state = grandparent_graph.get_state(config, subgraphs=True)\n",
    "print(\"Grandparent State:\")\n",
    "print(state.values)\n",
    "print(\"---------------\")\n",
    "print(\"Parent Graph State:\")\n",
    "print(state.tasks[0].state.values)\n",
    "print(\"---------------\")\n",
    "print(\"Subgraph State:\")\n",
    "print(state.tasks[0].state.tasks[0].state.values)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now continue, acting as the node three levels down"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(('graph:ecd08a47-d858-7231-c7a0-aa74b7934e49',), {'weather_graph': {'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='0a0cde55-27e8-4c98-bf2a-0707a1d887a1'), HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='cc01dc7a-f5bc-4ed3-8ea7-430941d46c7b')]}})\n",
      "((), {'graph': {'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='0a0cde55-27e8-4c98-bf2a-0707a1d887a1'), HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='cc01dc7a-f5bc-4ed3-8ea7-430941d46c7b')]}})\n",
      "[HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='0a0cde55-27e8-4c98-bf2a-0707a1d887a1'), HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='cc01dc7a-f5bc-4ed3-8ea7-430941d46c7b')]\n"
     ]
    }
   ],
   "source": [
    "grandparent_graph_state = state\n",
    "parent_graph_state = grandparent_graph_state.tasks[0].state\n",
    "subgraph_state = parent_graph_state.tasks[0].state\n",
    "grandparent_graph.update_state(\n",
    "    subgraph_state.config,\n",
    "    {\"messages\": [{\"role\": \"assistant\", \"content\": \"rainy\"}]},\n",
    "    as_node=\"weather_node\",\n",
    ")\n",
    "for update in grandparent_graph.stream(\n",
    "    None, config=config, stream_mode=\"updates\", subgraphs=True\n",
    "):\n",
    "    print(update)\n",
    "\n",
    "print(grandparent_graph.get_state(config).values[\"messages\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As in the cases above, we can see that the AI responds with \"rainy\" as we expect.\n",
    "\n",
    "We can explore the state history to see how the state of the grandparent graph was updated at each step."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "StateSnapshot(values={'messages': []}, next=('__start__',), config={'configurable': {'thread_id': '2', 'checkpoint_ns': '', 'checkpoint_id': ''}}, metadata={'source': 'input', 'writes': {'__start__': {'messages': [{'role': 'user', 'content': \"what's the weather in sf\"}]}}, 'step': -1, 'parents': {}, 'thread_id': '2'}, created_at='2025-04-29T20:03:10.223564+00:00', parent_config=None, tasks=(PregelTask(id='21d8f2f8-46c3-3701-812b-6bcf24bda147', name='__start__', path=('__pregel_pull', '__start__'), error=None, interrupts=(), state=None, result=None),), interrupts=())\n",
      "-----\n",
      "StateSnapshot(values={'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='0a0cde55-27e8-4c98-bf2a-0707a1d887a1')]}, next=('router_node',), config={'configurable': {'thread_id': '2', 'checkpoint_ns': '', 'checkpoint_id': '1f02534f-9757-6061-bfff-ad28e8ed1a58'}}, metadata={'source': 'loop', 'writes': None, 'step': 0, 'parents': {}, 'thread_id': '2'}, created_at='2025-04-29T20:03:10.225471+00:00', parent_config=None, tasks=(PregelTask(id='4c5096be-5c6b-8732-8623-0c6106f96dfa', name='router_node', path=('__pregel_pull', 'router_node'), error=None, interrupts=(), state=None, result=None),), interrupts=())\n",
      "-----\n",
      "StateSnapshot(values={'messages': []}, next=('__start__',), config={'configurable': {'thread_id': '2', 'checkpoint_ns': 'weather_graph:ed8b1cf5-2ebb-102e-1d28-4d7bd2d7c597', 'checkpoint_id': '', 'checkpoint_map': {'': '1f02534f-9ceb-61f3-8001-e0d2101e26b7', 'weather_graph:ed8b1cf5-2ebb-102e-1d28-4d7bd2d7c597': ''}}}, metadata={'source': 'input', 'writes': {'__start__': {'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'schema', 'messages', 'HumanMessage'], 'kwargs': {'content': \"what's the weather in sf\", 'type': 'human', 'id': '0a0cde55-27e8-4c98-bf2a-0707a1d887a1'}}], 'route': 'weather'}}, 'step': -1, 'parents': {'': '1f02534f-9ceb-61f3-8001-e0d2101e26b7'}, 'thread_id': '2', 'langgraph_step': 2, 'langgraph_node': 'weather_graph', 'langgraph_triggers': ['branch:to:weather_graph'], 'langgraph_path': ['__pregel_pull', 'weather_graph'], 'langgraph_checkpoint_ns': 'weather_graph:ed8b1cf5-2ebb-102e-1d28-4d7bd2d7c597'}, created_at='2025-04-29T20:03:10.812412+00:00', parent_config=None, tasks=(PregelTask(id='30fd433b-43cf-7dce-f6cf-09c0b098387a', name='__start__', path=('__pregel_pull', '__start__'), error=None, interrupts=(), state=None, result=None),), interrupts=())\n",
      "-----\n",
      "StateSnapshot(values={'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='0a0cde55-27e8-4c98-bf2a-0707a1d887a1')]}, next=(), config={'configurable': {'thread_id': '2', 'checkpoint_ns': 'weather_graph:ed8b1cf5-2ebb-102e-1d28-4d7bd2d7c597', 'checkpoint_id': '1f02534f-9cf4-6a2b-bfff-036966fe6cce', 'checkpoint_map': {'': '1f02534f-9ceb-61f3-8001-e0d2101e26b7', 'weather_graph:ed8b1cf5-2ebb-102e-1d28-4d7bd2d7c597': '1f02534f-9cf4-6a2b-bfff-036966fe6cce'}}}, metadata={'source': 'loop', 'writes': None, 'step': 0, 'parents': {'': '1f02534f-9ceb-61f3-8001-e0d2101e26b7'}, 'thread_id': '2', 'langgraph_step': 2, 'langgraph_node': 'weather_graph', 'langgraph_triggers': ['branch:to:weather_graph'], 'langgraph_path': ['__pregel_pull', 'weather_graph'], 'langgraph_checkpoint_ns': 'weather_graph:ed8b1cf5-2ebb-102e-1d28-4d7bd2d7c597'}, created_at='2025-04-29T20:03:10.815786+00:00', parent_config=None, tasks=(), interrupts=())\n",
      "-----\n",
      "StateSnapshot(values={'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='0a0cde55-27e8-4c98-bf2a-0707a1d887a1')]}, next=(), config={'configurable': {'thread_id': '2', 'checkpoint_ns': '', 'checkpoint_id': '1f02534f-975b-6af2-8000-d525c5020c98'}}, metadata={'source': 'loop', 'writes': {'router_node': {'route': 'weather'}}, 'step': 1, 'parents': {}, 'thread_id': '2'}, created_at='2025-04-29T20:03:10.808486+00:00', parent_config=None, tasks=(), interrupts=())\n",
      "-----\n",
      "StateSnapshot(values={'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='0a0cde55-27e8-4c98-bf2a-0707a1d887a1')]}, next=(), config={'configurable': {'thread_id': '2', 'checkpoint_ns': 'weather_graph:ed8b1cf5-2ebb-102e-1d28-4d7bd2d7c597', 'checkpoint_id': '1f02534f-9cfc-6e34-8000-e4c77de3aaf7', 'checkpoint_map': {'': '1f02534f-9ceb-61f3-8001-e0d2101e26b7', 'weather_graph:ed8b1cf5-2ebb-102e-1d28-4d7bd2d7c597': '1f02534f-9cfc-6e34-8000-e4c77de3aaf7'}}}, metadata={'source': 'loop', 'writes': {'model_node': {'city': 'sf'}}, 'step': 1, 'parents': {'': '1f02534f-9ceb-61f3-8001-e0d2101e26b7'}, 'thread_id': '2', 'langgraph_step': 2, 'langgraph_node': 'weather_graph', 'langgraph_triggers': ['branch:to:weather_graph'], 'langgraph_path': ['__pregel_pull', 'weather_graph'], 'langgraph_checkpoint_ns': 'weather_graph:ed8b1cf5-2ebb-102e-1d28-4d7bd2d7c597'}, created_at='2025-04-29T20:03:11.359276+00:00', parent_config=None, tasks=(), interrupts=())\n",
      "-----\n",
      "StateSnapshot(values={'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='0a0cde55-27e8-4c98-bf2a-0707a1d887a1')]}, next=('__start__',), config={'configurable': {'thread_id': '2', 'checkpoint_ns': '', 'checkpoint_id': '1f02534f-9ceb-61f3-8001-e0d2101e26b7'}}, metadata={'source': 'input', 'writes': {'__start__': {'messages': [{'role': 'user', 'content': \"what's the weather in sf\"}]}}, 'step': 2, 'parents': {}, 'thread_id': '2'}, created_at='2025-04-29T20:03:18.341546+00:00', parent_config=None, tasks=(PregelTask(id='59ceba0c-a86b-9f80-d2d4-bdc1ef42d60f', name='__start__', path=('__pregel_pull', '__start__'), error=None, interrupts=(), state=None, result=None),), interrupts=())\n",
      "-----\n",
      "StateSnapshot(values={'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='0a0cde55-27e8-4c98-bf2a-0707a1d887a1'), HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='cc01dc7a-f5bc-4ed3-8ea7-430941d46c7b')]}, next=('router_node',), config={'configurable': {'thread_id': '2', 'checkpoint_ns': '', 'checkpoint_id': '1f02534f-e4c2-6500-8002-607354b38b9c'}}, metadata={'source': 'loop', 'writes': None, 'step': 3, 'parents': {}, 'thread_id': '2'}, created_at='2025-04-29T20:03:18.342922+00:00', parent_config=None, tasks=(PregelTask(id='40f6faec-869b-587b-074a-3988857a8011', name='router_node', path=('__pregel_pull', 'router_node'), error=None, interrupts=(), state=None, result=None),), interrupts=())\n",
      "-----\n",
      "StateSnapshot(values={'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='0a0cde55-27e8-4c98-bf2a-0707a1d887a1'), HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='cc01dc7a-f5bc-4ed3-8ea7-430941d46c7b')], 'to_continue': True}, next=('graph',), config={'configurable': {'thread_id': '2', 'checkpoint_ns': '', 'checkpoint_id': '1f02534f-e4c5-6aa6-8003-00a8d2565f11'}}, metadata={'source': 'loop', 'writes': {'router_node': {'to_continue': True}}, 'step': 4, 'parents': {}, 'thread_id': '2'}, created_at='2025-04-29T20:03:18.345047+00:00', parent_config=None, tasks=(PregelTask(id='ecd08a47-d858-7231-c7a0-aa74b7934e49', name='graph', path=('__pregel_pull', 'graph'), error=None, interrupts=(), state={'configurable': {'thread_id': '2', 'checkpoint_ns': 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49'}}, result=None),), interrupts=())\n",
      "-----\n",
      "StateSnapshot(values={'messages': []}, next=('__start__',), config={'configurable': {'thread_id': '2', 'checkpoint_ns': 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49', 'checkpoint_id': '', 'checkpoint_map': {'': '1f02534f-e4ca-6df0-8004-ff0a69394644', 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49': ''}}}, metadata={'source': 'input', 'writes': {'__start__': {'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'schema', 'messages', 'HumanMessage'], 'kwargs': {'content': \"what's the weather in sf\", 'type': 'human', 'id': '0a0cde55-27e8-4c98-bf2a-0707a1d887a1'}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'schema', 'messages', 'HumanMessage'], 'kwargs': {'content': \"what's the weather in sf\", 'type': 'human', 'id': 'cc01dc7a-f5bc-4ed3-8ea7-430941d46c7b'}}], 'to_continue': True}}, 'step': -1, 'parents': {'': '1f02534f-e4ca-6df0-8004-ff0a69394644'}, 'thread_id': '2', 'langgraph_step': 5, 'langgraph_node': 'graph', 'langgraph_triggers': ['branch:to:graph'], 'langgraph_path': ['__pregel_pull', 'graph'], 'langgraph_checkpoint_ns': 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49'}, created_at='2025-04-29T20:03:18.348322+00:00', parent_config=None, tasks=(PregelTask(id='2cd6780d-5584-5481-476f-f46eb3ab707c', name='__start__', path=('__pregel_pull', '__start__'), error=None, interrupts=(), state=None, result=None),), interrupts=())\n",
      "-----\n",
      "StateSnapshot(values={'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='0a0cde55-27e8-4c98-bf2a-0707a1d887a1'), HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='cc01dc7a-f5bc-4ed3-8ea7-430941d46c7b')]}, next=('router_node',), config={'configurable': {'thread_id': '2', 'checkpoint_ns': 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49', 'checkpoint_id': '1f02534f-e4d2-6d80-bfff-0da28d2d90d1', 'checkpoint_map': {'': '1f02534f-e4ca-6df0-8004-ff0a69394644', 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49': '1f02534f-e4d2-6d80-bfff-0da28d2d90d1'}}}, metadata={'source': 'loop', 'writes': None, 'step': 0, 'parents': {'': '1f02534f-e4ca-6df0-8004-ff0a69394644'}, 'thread_id': '2', 'langgraph_step': 5, 'langgraph_node': 'graph', 'langgraph_triggers': ['branch:to:graph'], 'langgraph_path': ['__pregel_pull', 'graph'], 'langgraph_checkpoint_ns': 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49'}, created_at='2025-04-29T20:03:18.350141+00:00', parent_config=None, tasks=(PregelTask(id='ffce42bc-3dcb-79d6-9684-007d1556c852', name='router_node', path=('__pregel_pull', 'router_node'), error=None, interrupts=(), state=None, result=None),), interrupts=())\n",
      "-----\n",
      "StateSnapshot(values={'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='0a0cde55-27e8-4c98-bf2a-0707a1d887a1'), HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='cc01dc7a-f5bc-4ed3-8ea7-430941d46c7b')]}, next=(), config={'configurable': {'thread_id': '2', 'checkpoint_ns': 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49', 'checkpoint_id': '1f02534f-e4d7-64b8-8000-42a577aa117a', 'checkpoint_map': {'': '1f02534f-e4ca-6df0-8004-ff0a69394644', 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49': '1f02534f-e4d7-64b8-8000-42a577aa117a'}}}, metadata={'source': 'loop', 'writes': {'router_node': {'route': 'weather'}}, 'step': 1, 'parents': {'': '1f02534f-e4ca-6df0-8004-ff0a69394644'}, 'thread_id': '2', 'langgraph_step': 5, 'langgraph_node': 'graph', 'langgraph_triggers': ['branch:to:graph'], 'langgraph_path': ['__pregel_pull', 'graph'], 'langgraph_checkpoint_ns': 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49'}, created_at='2025-04-29T20:03:18.945545+00:00', parent_config=None, tasks=(), interrupts=())\n",
      "-----\n",
      "StateSnapshot(values={'messages': []}, next=(), config={'configurable': {'thread_id': '2', 'checkpoint_ns': 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49|weather_graph:64329b7f-d9e7-1f2c-9a6e-7a3d819eaed6', 'checkpoint_id': '1f02534f-ea97-6e0c-8001-4cb845379071', 'checkpoint_map': {'': '1f02534f-e4ca-6df0-8004-ff0a69394644', 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49': '1f02534f-ea85-604e-8001-fd2c19df9a62', 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49|weather_graph:64329b7f-d9e7-1f2c-9a6e-7a3d819eaed6': '1f02534f-ea97-6e0c-8001-4cb845379071'}}}, metadata={'source': 'loop', 'writes': None, 'step': 2, 'parents': {'': '1f02534f-e4ca-6df0-8004-ff0a69394644', 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49': '1f02534f-ea85-604e-8001-fd2c19df9a62'}, 'thread_id': '2', 'langgraph_step': 2, 'langgraph_node': 'weather_graph', 'langgraph_triggers': ['branch:to:weather_graph'], 'langgraph_path': ['__pregel_pull', 'weather_graph'], 'langgraph_checkpoint_ns': 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49|weather_graph:64329b7f-d9e7-1f2c-9a6e-7a3d819eaed6'}, created_at='2025-04-29T20:03:18.955348+00:00', parent_config=None, tasks=(), interrupts=())\n",
      "-----\n",
      "StateSnapshot(values={'messages': []}, next=(), config={'configurable': {'thread_id': '2', 'checkpoint_ns': 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49|weather_graph:64329b7f-d9e7-1f2c-9a6e-7a3d819eaed6', 'checkpoint_id': '1f02534f-ea9c-6dc8-8002-9eaf091dda7c', 'checkpoint_map': {'': '1f02534f-e4ca-6df0-8004-ff0a69394644', 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49': '1f02534f-ea85-604e-8001-fd2c19df9a62', 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49|weather_graph:64329b7f-d9e7-1f2c-9a6e-7a3d819eaed6': '1f02534f-ea9c-6dc8-8002-9eaf091dda7c'}}}, metadata={'source': 'loop', 'writes': {'model_node': {'city': 'San Francisco'}}, 'step': 3, 'parents': {'': '1f02534f-e4ca-6df0-8004-ff0a69394644', 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49': '1f02534f-ea85-604e-8001-fd2c19df9a62'}, 'thread_id': '2', 'langgraph_step': 2, 'langgraph_node': 'weather_graph', 'langgraph_triggers': ['branch:to:weather_graph'], 'langgraph_path': ['__pregel_pull', 'weather_graph'], 'langgraph_checkpoint_ns': 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49|weather_graph:64329b7f-d9e7-1f2c-9a6e-7a3d819eaed6'}, created_at='2025-04-29T20:03:20.277729+00:00', parent_config=None, tasks=(), interrupts=())\n",
      "-----\n",
      "StateSnapshot(values={'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='0a0cde55-27e8-4c98-bf2a-0707a1d887a1'), HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='cc01dc7a-f5bc-4ed3-8ea7-430941d46c7b')]}, next=(), config={'configurable': {'thread_id': '2', 'checkpoint_ns': 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49|weather_graph:64329b7f-d9e7-1f2c-9a6e-7a3d819eaed6', 'checkpoint_id': '1f02534f-e4d7-64b8-8000-42a577aa117a', 'checkpoint_map': {'': '1f02534f-e4ca-6df0-8004-ff0a69394644', 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49|weather_graph:64329b7f-d9e7-1f2c-9a6e-7a3d819eaed6': '1f02534f-e4d7-64b8-8000-42a577aa117a'}}}, metadata={'source': 'update', 'writes': {'weather_node': {'messages': [{'role': 'assistant', 'content': 'rainy'}]}}, 'step': 2, 'parents': {'': '1f02534f-e4ca-6df0-8004-ff0a69394644'}, 'thread_id': '2', 'langgraph_step': 5, 'langgraph_node': 'graph', 'langgraph_triggers': ['branch:to:graph'], 'langgraph_path': ['__pregel_pull', 'graph'], 'langgraph_checkpoint_ns': 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49', 'checkpoint_ns': 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49|weather_graph:64329b7f-d9e7-1f2c-9a6e-7a3d819eaed6', 'checkpoint_id': '1f02534f-e4d7-64b8-8000-42a577aa117a'}, created_at='2025-04-29T20:03:20.313043+00:00', parent_config=None, tasks=(), interrupts=())\n",
      "-----\n",
      "StateSnapshot(values={'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='0a0cde55-27e8-4c98-bf2a-0707a1d887a1'), HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='cc01dc7a-f5bc-4ed3-8ea7-430941d46c7b')]}, next=(), config={'configurable': {'thread_id': '2', 'checkpoint_ns': 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49', 'checkpoint_id': '1f02534f-ea85-604e-8001-fd2c19df9a62', 'checkpoint_map': {'': '1f02534f-e4ca-6df0-8004-ff0a69394644', 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49': '1f02534f-ea85-604e-8001-fd2c19df9a62'}}}, metadata={'source': 'loop', 'writes': {'weather_graph': {'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'schema', 'messages', 'HumanMessage'], 'kwargs': {'content': \"what's the weather in sf\", 'type': 'human', 'id': '0a0cde55-27e8-4c98-bf2a-0707a1d887a1'}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'schema', 'messages', 'HumanMessage'], 'kwargs': {'content': \"what's the weather in sf\", 'type': 'human', 'id': 'cc01dc7a-f5bc-4ed3-8ea7-430941d46c7b'}}]}}, 'step': 2, 'parents': {'': '1f02534f-e4ca-6df0-8004-ff0a69394644'}, 'thread_id': '2', 'langgraph_step': 5, 'langgraph_node': 'graph', 'langgraph_triggers': ['branch:to:graph'], 'langgraph_path': ['__pregel_pull', 'graph'], 'langgraph_checkpoint_ns': 'graph:ecd08a47-d858-7231-c7a0-aa74b7934e49'}, created_at='2025-04-29T20:03:20.321696+00:00', parent_config=None, tasks=(), interrupts=())\n",
      "-----\n",
      "StateSnapshot(values={'messages': [HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='0a0cde55-27e8-4c98-bf2a-0707a1d887a1'), HumanMessage(content=\"what's the weather in sf\", additional_kwargs={}, response_metadata={}, id='cc01dc7a-f5bc-4ed3-8ea7-430941d46c7b')], 'to_continue': True}, next=(), config={'configurable': {'thread_id': '2', 'checkpoint_ns': '', 'checkpoint_id': '1f02534f-e4ca-6df0-8004-ff0a69394644'}}, metadata={'source': 'loop', 'writes': {'graph': {'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'schema', 'messages', 'HumanMessage'], 'kwargs': {'content': \"what's the weather in sf\", 'type': 'human', 'id': '0a0cde55-27e8-4c98-bf2a-0707a1d887a1'}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'schema', 'messages', 'HumanMessage'], 'kwargs': {'content': \"what's the weather in sf\", 'type': 'human', 'id': 'cc01dc7a-f5bc-4ed3-8ea7-430941d46c7b'}}]}}, 'step': 5, 'parents': {}, 'thread_id': '2'}, created_at='2025-04-29T20:03:20.324070+00:00', parent_config=None, tasks=(), interrupts=())\n",
      "-----\n"
     ]
    }
   ],
   "source": [
    "for state in grandparent_graph.get_state_history(config):\n",
    "    print(state)\n",
    "    print(\"-----\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

================
File: langgraph/checkpoint/redis/__init__.py
================
logger = logging.getLogger(__name__)
class RedisSaver(BaseRedisSaver[Union[Redis, RedisCluster], SearchIndex])
⋮----
"""Standard Redis implementation for checkpoint saving."""
_redis: Union[Redis, RedisCluster]  # Support both standalone and cluster clients
# Whether to assume the Redis server is a cluster; None triggers auto-detection
cluster_mode: Optional[bool] = None
⋮----
"""Configure the Redis client."""
⋮----
def create_indexes(self) -> None
def setup(self) -> None
⋮----
"""Initialize the indices in Redis and detect cluster mode."""
⋮----
def _detect_cluster_mode(self) -> None
⋮----
"""Detect if the Redis client is a cluster client by inspecting its class."""
⋮----
# Determine cluster mode based on client class
⋮----
"""List checkpoints from Redis."""
# Construct the filter expression
filter_expression = []
⋮----
# Reproducing the logic from the Postgres implementation, we'll
# search for checkpoints with any namespace, including an empty
# string, while `checkpoint_id` has to have a value.
⋮----
# if before:
#     filter_expression.append(Tag("checkpoint_id") < get_checkpoint_id(before))
# Combine all filter expressions
combined_filter = filter_expression[0] if filter_expression else "*"
⋮----
# Construct the Redis query
query = FilterQuery(
# Execute the query
results = self.checkpoints_index.search(query)
# Process the results
⋮----
thread_id = from_storage_safe_id(doc["thread_id"])
checkpoint_ns = from_storage_safe_str(doc["checkpoint_ns"])
checkpoint_id = from_storage_safe_id(doc["checkpoint_id"])
parent_checkpoint_id = from_storage_safe_id(doc["parent_checkpoint_id"])
# Fetch channel_values
channel_values = self.get_channel_values(
# Fetch pending_sends from parent checkpoint
pending_sends = []
⋮----
pending_sends = self._load_pending_sends(
# Fetch and parse metadata
raw_metadata = getattr(doc, "$.metadata", "{}")
metadata_dict = (
# Ensure metadata matches CheckpointMetadata type
sanitized_metadata = {
metadata = cast(CheckpointMetadata, sanitized_metadata)
config_param: RunnableConfig = {
checkpoint_param = self._load_checkpoint(
pending_writes = self._load_pending_writes(
⋮----
"""Store a checkpoint to Redis."""
configurable = config["configurable"].copy()
thread_id = configurable.pop("thread_id")
checkpoint_ns = configurable.pop("checkpoint_ns")
thread_ts = configurable.pop("thread_ts", "")
checkpoint_id = (
# For values we store in Redis, we need to convert empty strings to the
# sentinel value.
storage_safe_thread_id = to_storage_safe_id(thread_id)
storage_safe_checkpoint_ns = to_storage_safe_str(checkpoint_ns)
storage_safe_checkpoint_id = to_storage_safe_id(checkpoint_id)
copy = checkpoint.copy()
# When we return the config, we need to preserve empty strings that
# were passed in, instead of the sentinel value.
next_config = {
# Store checkpoint data.
checkpoint_data = {
# store at top-level for filters in list()
⋮----
# Create the checkpoint key
checkpoint_key = BaseRedisSaver._make_redis_checkpoint_key(
⋮----
# Store blob values.
blobs = self._dump_blobs(
blob_keys = []
⋮----
# Unzip the list of tuples into separate lists for keys and data
⋮----
blob_keys = list(keys)
⋮----
# Apply TTL to checkpoint and blob keys if configured
⋮----
def get_tuple(self, config: RunnableConfig) -> Optional[CheckpointTuple]
⋮----
"""Get a checkpoint tuple from Redis.
        Args:
            config (RunnableConfig): The config to use for retrieving the checkpoint.
        Returns:
            Optional[CheckpointTuple]: The retrieved checkpoint tuple, or None if no matching checkpoint was found.
        """
thread_id = config["configurable"]["thread_id"]
checkpoint_id = get_checkpoint_id(config)
checkpoint_ns = config["configurable"].get("checkpoint_ns", "")
ascending = True
⋮----
checkpoint_filter_expression = (
⋮----
ascending = False
# Construct the query
checkpoints_query = FilterQuery(
⋮----
results = self.checkpoints_index.search(checkpoints_query)
⋮----
doc = results.docs[0]
doc_thread_id = from_storage_safe_id(doc["thread_id"])
doc_checkpoint_ns = from_storage_safe_str(doc["checkpoint_ns"])
doc_checkpoint_id = from_storage_safe_id(doc["checkpoint_id"])
doc_parent_checkpoint_id = from_storage_safe_id(doc["parent_checkpoint_id"])
# If refresh_on_read is enabled, refresh TTL for checkpoint key and related keys
⋮----
# Get the checkpoint key
⋮----
# Get all blob keys related to this checkpoint
⋮----
# Get the blob keys using search index instead of keys()
blob_query = FilterQuery(
⋮----
return_fields=["key"],  # Assuming the key field exists in the index
⋮----
blob_results = self.checkpoint_blobs_index.search(blob_query)
blob_keys = [
# Get checkpoint write keys using search index
write_query = FilterQuery(
write_results = self.checkpoint_writes_index.search(write_query)
write_keys = [
# Apply TTL to checkpoint, blob keys, and write keys
all_related_keys = blob_keys + write_keys
⋮----
# Fetch channel_values
⋮----
# Fetch pending_sends from parent checkpoint
⋮----
# Fetch and parse metadata
⋮----
# Ensure metadata matches CheckpointMetadata type
⋮----
"""Create a new RedisSaver instance."""
saver: Optional[RedisSaver] = None
⋮----
saver = cls(
⋮----
if saver and saver._owns_its_client:  # Ensure saver is not None
⋮----
"""Retrieve channel_values dictionary with properly constructed message objects."""
⋮----
checkpoint_query = FilterQuery(
checkpoint_result = self.checkpoints_index.search(checkpoint_query)
⋮----
channel_versions = json.loads(
⋮----
channel_values = {}
⋮----
blob_doc = blob_results.docs[0]
blob_type = getattr(blob_doc, "type", None)
blob_data = getattr(blob_doc, "$.blob", None)
⋮----
# Ensure blob_data is bytes for deserialization
⋮----
blob_data = blob_data.encode("utf-8")
⋮----
"""Load pending sends for a parent checkpoint.
        Args:
            thread_id: The thread ID
            checkpoint_ns: The checkpoint namespace
            parent_checkpoint_id: The ID of the parent checkpoint
        Returns:
            List of (type, blob) tuples representing pending sends
        """
storage_safe_thread_id = to_storage_safe_str(thread_id)
⋮----
storage_safe_parent_checkpoint_id = to_storage_safe_str(parent_checkpoint_id)
# Query checkpoint_writes for parent checkpoint's TASKS channel
parent_writes_query = FilterQuery(
⋮----
num_results=100,  # Adjust as needed
⋮----
parent_writes_results = self.checkpoint_writes_index.search(parent_writes_query)
# Sort results by task_path, task_id, idx (matching Postgres implementation)
sorted_writes = sorted(
# Extract type and blob pairs
⋮----
def delete_thread(self, thread_id: str) -> None
⋮----
"""Delete all checkpoints and writes associated with a specific thread ID.
        Args:
            thread_id: The thread ID whose checkpoints should be deleted.
        """
⋮----
# Delete all checkpoints for this thread
⋮----
num_results=10000,  # Get all checkpoints for this thread
⋮----
checkpoint_results = self.checkpoints_index.search(checkpoint_query)
# Collect all keys to delete
keys_to_delete = []
⋮----
checkpoint_ns = getattr(doc, "checkpoint_ns", "")
checkpoint_id = getattr(doc, "checkpoint_id", "")
# Delete checkpoint key
⋮----
# Delete all blobs for this thread
⋮----
channel = getattr(doc, "channel", "")
version = getattr(doc, "version", "")
blob_key = BaseRedisSaver._make_redis_checkpoint_blob_key(
⋮----
# Delete all writes for this thread
writes_query = FilterQuery(
writes_results = self.checkpoint_writes_index.search(writes_query)
⋮----
task_id = getattr(doc, "task_id", "")
idx = getattr(doc, "idx", 0)
write_key = BaseRedisSaver._make_redis_checkpoint_writes_key(
⋮----
# Execute all deletions based on cluster mode
⋮----
# For cluster mode, delete keys individually
⋮----
# For non-cluster mode, use pipeline for efficiency
pipeline = self._redis.pipeline()
⋮----
__all__ = [

================
File: langgraph/checkpoint/redis/aio.py
================
"""Async implementation of Redis checkpoint saver."""
⋮----
logger = logging.getLogger(__name__)
class AsyncRedisSaver(
⋮----
"""Async Redis implementation for checkpoint saver."""
_redis_url: str
checkpoints_index: AsyncSearchIndex
checkpoint_blobs_index: AsyncSearchIndex
checkpoint_writes_index: AsyncSearchIndex
_redis: Union[
⋮----
]  # Support both standalone and cluster clients
# Whether to assume the Redis server is a cluster; None triggers auto-detection
cluster_mode: Optional[bool] = None
⋮----
"""Configure the Redis client."""
⋮----
# Use direct AsyncRedis.from_url to avoid the deprecated get_async_redis_connection
⋮----
redis_url = os.environ.get("REDIS_URL")
⋮----
def create_indexes(self) -> None
⋮----
"""Create indexes without connecting to Redis."""
⋮----
async def __aenter__(self) -> AsyncRedisSaver
⋮----
"""Async context manager enter."""
⋮----
# Set client info once Redis is set up
⋮----
"""Async context manager exit."""
⋮----
coro = self._redis.connection_pool.disconnect()
⋮----
# Prevent RedisVL from attempting to close the client
# on an event loop in a separate thread.
⋮----
async def asetup(self) -> None
⋮----
"""Set up the checkpoint saver."""
⋮----
# Detect cluster mode if not explicitly set
⋮----
async def _detect_cluster_mode(self) -> None
⋮----
"""Detect if the Redis client is a cluster client by inspecting its class."""
⋮----
# Determine cluster mode based on client class
⋮----
"""Apply Redis native TTL to keys asynchronously.
        Args:
            main_key: The primary Redis key
            related_keys: Additional Redis keys that should expire at the same time
            ttl_minutes: Time-to-live in minutes, overrides default_ttl if provided
        Returns:
            Result of the Redis operation
        """
⋮----
# Check if there's a default TTL in config
⋮----
ttl_minutes = self.ttl_config.get("default_ttl")
⋮----
ttl_seconds = int(ttl_minutes * 60)
⋮----
# For cluster mode, execute TTL operations individually
⋮----
# For non-cluster mode, use pipeline for efficiency
pipeline = self._redis.pipeline()
# Set TTL for main key
⋮----
# Set TTL for related keys
⋮----
async def aget_tuple(self, config: RunnableConfig) -> Optional[CheckpointTuple]
⋮----
"""Get a checkpoint tuple from Redis asynchronously."""
thread_id = config["configurable"]["thread_id"]
checkpoint_id = get_checkpoint_id(config)
checkpoint_ns = config["configurable"].get("checkpoint_ns", "")
ascending = True
⋮----
checkpoint_filter_expression = (
⋮----
ascending = False
# Construct the query
checkpoints_query = FilterQuery(
⋮----
# Execute the query
results = await self.checkpoints_index.search(checkpoints_query)
⋮----
doc = results.docs[0]
doc_thread_id = from_storage_safe_id(doc["thread_id"])
doc_checkpoint_ns = from_storage_safe_str(doc["checkpoint_ns"])
doc_checkpoint_id = from_storage_safe_id(doc["checkpoint_id"])
doc_parent_checkpoint_id = from_storage_safe_id(doc["parent_checkpoint_id"])
# If refresh_on_read is enabled, refresh TTL for checkpoint key and related keys
⋮----
# Get the checkpoint key
checkpoint_key = BaseRedisSaver._make_redis_checkpoint_key(
# Get all blob keys related to this checkpoint
⋮----
# Get the blob keys
blob_key_pattern = f"{CHECKPOINT_BLOB_PREFIX}:{to_storage_safe_id(doc_thread_id)}:{to_storage_safe_str(doc_checkpoint_ns)}:*"
blob_keys = await self._redis.keys(blob_key_pattern)
# Use safely_decode to handle both string and bytes responses
blob_keys = [safely_decode(key) for key in blob_keys]
# Also get checkpoint write keys that should have the same TTL
write_key_pattern = f"{CHECKPOINT_WRITE_PREFIX}:{to_storage_safe_id(doc_thread_id)}:{to_storage_safe_str(doc_checkpoint_ns)}:{to_storage_safe_id(doc_checkpoint_id)}:*"
write_keys = await self._redis.keys(write_key_pattern)
⋮----
write_keys = [safely_decode(key) for key in write_keys]
# Apply TTL to checkpoint, blob keys, and write keys
all_related_keys = blob_keys + write_keys
⋮----
# Fetch channel_values
channel_values = await self.aget_channel_values(
# Fetch pending_sends from parent checkpoint
pending_sends = []
⋮----
pending_sends = await self._aload_pending_sends(
# Fetch and parse metadata
raw_metadata = getattr(doc, "$.metadata", "{}")
metadata_dict = (
# Ensure metadata matches CheckpointMetadata type
sanitized_metadata = {
metadata = cast(CheckpointMetadata, sanitized_metadata)
config_param: RunnableConfig = {
checkpoint_param = self._load_checkpoint(
pending_writes = await self._aload_pending_writes(
⋮----
"""List checkpoints from Redis asynchronously."""
# Construct the filter expression
filter_expression = []
⋮----
# Reproducing the logic from the Postgres implementation, we'll
# search for checkpoints with any namespace, including an empty
# string, while `checkpoint_id` has to have a value.
⋮----
# if before:
#     filter_expression.append(Tag("checkpoint_id") < get_checkpoint_id(before))
# Combine all filter expressions
combined_filter = filter_expression[0] if filter_expression else "*"
⋮----
# Construct the Redis query
query = FilterQuery(
# Execute the query asynchronously
results = await self.checkpoints_index.search(query)
# Process the results
⋮----
thread_id = from_storage_safe_id(doc["thread_id"])
checkpoint_ns = from_storage_safe_str(doc["checkpoint_ns"])
checkpoint_id = from_storage_safe_id(doc["checkpoint_id"])
parent_checkpoint_id = from_storage_safe_id(doc["parent_checkpoint_id"])
# Fetch channel_values
⋮----
# Fetch pending_sends from parent checkpoint
⋮----
# Fetch and parse metadata
⋮----
# Ensure metadata matches CheckpointMetadata type
⋮----
"""Store a checkpoint to Redis with proper transaction handling.
        This method ensures that all Redis operations are performed atomically
        using Redis transactions. In case of interruption (asyncio.CancelledError),
        the transaction will be aborted, ensuring consistency.
        Args:
            config: The config to associate with the checkpoint
            checkpoint: The checkpoint data to store
            metadata: Additional metadata to save with the checkpoint
            new_versions: New channel versions as of this write
            stream_mode: The streaming mode being used (values, updates, etc.)
        Returns:
            Updated configuration after storing the checkpoint
        Raises:
            asyncio.CancelledError: If the operation is cancelled/interrupted
        """
configurable = config["configurable"].copy()
thread_id = configurable.pop("thread_id")
checkpoint_ns = configurable.pop("checkpoint_ns")
thread_ts = configurable.pop("thread_ts", "")
checkpoint_id = (
# For values we store in Redis, we need to convert empty strings to the
# sentinel value.
storage_safe_thread_id = to_storage_safe_id(thread_id)
storage_safe_checkpoint_ns = to_storage_safe_str(checkpoint_ns)
storage_safe_checkpoint_id = to_storage_safe_id(checkpoint_id)
copy = checkpoint.copy()
next_config = {
# Store checkpoint data with cluster-aware handling
⋮----
# Store checkpoint data
checkpoint_data = {
# store at top-level for filters in list()
⋮----
# Prepare checkpoint key
⋮----
# Store blob values
blobs = self._dump_blobs(
⋮----
# For cluster mode, execute operations individually
await self._redis.json().set(checkpoint_key, "$", checkpoint_data)  # type: ignore[misc]
⋮----
await self._redis.json().set(key, "$", data)  # type: ignore[misc]
# Apply TTL if configured
⋮----
# For non-cluster mode, use pipeline with transaction for atomicity
pipeline = self._redis.pipeline(transaction=True)
# Add checkpoint data to pipeline
⋮----
# Add all blob operations to the pipeline
⋮----
# Execute all operations atomically
⋮----
# Apply TTL to checkpoint and blob keys if configured
⋮----
# Handle cancellation/interruption based on stream mode
⋮----
# For these modes, we want to ensure any partial state is committed
# to allow resuming the stream later
⋮----
# Store minimal checkpoint data
⋮----
# Prepare checkpoint key
⋮----
# For cluster mode, execute operation directly
await self._redis.json().set(  # type: ignore[misc]
⋮----
# For non-cluster mode, use pipeline
⋮----
# If this also fails, we just propagate the original cancellation
⋮----
# Re-raise the cancellation
⋮----
# Re-raise other exceptions
⋮----
"""Store intermediate writes linked to a checkpoint using Redis JSON with transaction handling.
        This method uses Redis pipeline with transaction=True to ensure atomicity of all
        write operations. In case of interruption, all operations will be aborted.
        Args:
            config (RunnableConfig): Configuration of the related checkpoint.
            writes (List[Tuple[str, Any]]): List of writes to store.
            task_id (str): Identifier for the task creating the writes.
            task_path (str): Path of the task creating the writes.
        Raises:
            asyncio.CancelledError: If the operation is cancelled/interrupted
        """
⋮----
checkpoint_id = config["configurable"]["checkpoint_id"]
# Transform writes into appropriate format
writes_objects = []
⋮----
write_obj = {
⋮----
# Determine if this is an upsert case
upsert_case = all(w[0] in WRITES_IDX_MAP for w in writes)
created_keys = []
⋮----
key = self._make_redis_checkpoint_writes_key(
⋮----
write_obj["idx"],  # type: ignore[arg-type]
⋮----
# For upsert case, check if key exists and update differently
exists = await self._redis.exists(key)
⋮----
# Update existing key
await self._redis.json().set(key, "$.channel", write_obj["channel"])  # type: ignore[misc, arg-type]
await self._redis.json().set(key, "$.type", write_obj["type"])  # type: ignore[misc, arg-type]
await self._redis.json().set(key, "$.blob", write_obj["blob"])  # type: ignore[misc, arg-type]
⋮----
# Create new key
await self._redis.json().set(key, "$", write_obj)  # type: ignore[misc]
⋮----
# For non-upsert case, only set if key doesn't exist
⋮----
# Apply TTL to newly created keys
⋮----
# For non-cluster mode, use transaction pipeline for atomicity
⋮----
# Add all write operations to the pipeline
⋮----
# For upsert case, we need to check if the key exists and update differently
⋮----
write_obj["channel"],  # type: ignore[arg-type]
⋮----
write_obj["type"],  # type: ignore[arg-type]
⋮----
write_obj["blob"],  # type: ignore[arg-type]
⋮----
# Handle cancellation/interruption
# Pipeline will be automatically discarded
# Either all operations succeed or none do
⋮----
"""Synchronous wrapper for aput_writes.
        Args:
            config (RunnableConfig): Configuration of the related checkpoint.
            writes (List[Tuple[str, Any]]): List of writes to store.
            task_id (str): Identifier for the task creating the writes.
            task_path (str): Path of the task creating the writes.
        """
⋮----
def get_tuple(self, config: RunnableConfig) -> Optional[CheckpointTuple]
⋮----
"""Get a checkpoint tuple from Redis.
        Args:
            config (RunnableConfig): The config to use for retrieving the checkpoint.
        Returns:
            Optional[CheckpointTuple]: The retrieved checkpoint tuple, or None if no matching checkpoint was found.
        Raises:
            asyncio.InvalidStateError: If called from the wrong thread/event loop
        """
⋮----
# check if we are in the main thread, only bg threads can block
⋮----
"""Store a checkpoint to Redis.
        Args:
            config (RunnableConfig): The config to associate with the checkpoint.
            checkpoint (Checkpoint): The checkpoint to save.
            metadata (CheckpointMetadata): Additional metadata to save with the checkpoint.
            new_versions (ChannelVersions): New channel versions as of this write.
        Returns:
            RunnableConfig: Updated configuration after storing the checkpoint.
        Raises:
            asyncio.InvalidStateError: If called from the wrong thread/event loop
        """
⋮----
"""Retrieve channel_values dictionary with properly constructed message objects."""
⋮----
checkpoint_query = FilterQuery(
checkpoint_result = await self.checkpoints_index.search(checkpoint_query)
⋮----
channel_versions = json.loads(
⋮----
channel_values = {}
⋮----
blob_query = FilterQuery(
blob_results = await self.checkpoint_blobs_index.search(blob_query)
⋮----
blob_doc = blob_results.docs[0]
blob_type = blob_doc.type
blob_data = getattr(blob_doc, "$.blob", None)
⋮----
"""Load pending sends for a parent checkpoint.
        Args:
            thread_id: The thread ID
            checkpoint_ns: The checkpoint namespace
            parent_checkpoint_id: The ID of the parent checkpoint
        Returns:
            List of (type, blob) tuples representing pending sends
        """
# Query checkpoint_writes for parent checkpoint's TASKS channel
parent_writes_query = FilterQuery(
res = await self.checkpoint_writes_index.search(parent_writes_query)
# Sort results for deterministic order
docs = sorted(
# Convert to expected format
⋮----
return []  # Early return if no checkpoint_id
# Use search index instead of keys() to avoid CrossSlot errors
# Note: For checkpoint_ns, we use the raw value for tag searches
# because RediSearch may not handle sentinel values correctly in tag fields
writes_query = FilterQuery(
⋮----
num_results=1000,  # Adjust as needed
⋮----
writes_results = await self.checkpoint_writes_index.search(writes_query)
# Sort results by idx to maintain order
sorted_writes = sorted(writes_results.docs, key=lambda x: getattr(x, "idx", 0))
# Build the writes dictionary
writes_dict: Dict[Tuple[str, str], Dict[str, Any]] = {}
⋮----
task_id = str(getattr(doc, "task_id", ""))
idx = str(getattr(doc, "idx", 0))
blob_data = getattr(doc, "$.blob", "")
# Ensure blob is bytes for deserialization
⋮----
blob_data = blob_data.encode("utf-8")
⋮----
pending_writes = BaseRedisSaver._load_writes(self.serde, writes_dict)
⋮----
async def adelete_thread(self, thread_id: str) -> None
⋮----
"""Delete all checkpoints and writes associated with a specific thread ID.
        Args:
            thread_id: The thread ID whose checkpoints should be deleted.
        """
⋮----
# Delete all checkpoints for this thread
⋮----
num_results=10000,  # Get all checkpoints for this thread
⋮----
checkpoint_results = await self.checkpoints_index.search(checkpoint_query)
# Collect all keys to delete
keys_to_delete = []
⋮----
checkpoint_ns = getattr(doc, "checkpoint_ns", "")
checkpoint_id = getattr(doc, "checkpoint_id", "")
# Delete checkpoint key
⋮----
# Delete all blobs for this thread
⋮----
channel = getattr(doc, "channel", "")
version = getattr(doc, "version", "")
blob_key = BaseRedisSaver._make_redis_checkpoint_blob_key(
⋮----
# Delete all writes for this thread
⋮----
task_id = getattr(doc, "task_id", "")
idx = getattr(doc, "idx", 0)
write_key = BaseRedisSaver._make_redis_checkpoint_writes_key(
⋮----
# Execute all deletions based on cluster mode
⋮----
# For cluster mode, delete keys individually
⋮----
# For non-cluster mode, use pipeline for efficiency

================
File: langgraph/checkpoint/redis/ashallow.py
================
"""Async shallow Redis implementation for LangGraph checkpoint saving."""
⋮----
SCHEMAS = [
class AsyncShallowRedisSaver(BaseRedisSaver[AsyncRedis, AsyncSearchIndex])
⋮----
"""Async Redis implementation that only stores the most recent checkpoint."""
_redis_url: str
checkpoints_index: AsyncSearchIndex
checkpoint_blobs_index: AsyncSearchIndex
checkpoint_writes_index: AsyncSearchIndex
_redis: AsyncRedis  # Override the type from the base class
⋮----
async def __aenter__(self) -> AsyncShallowRedisSaver
⋮----
"""Async context manager enter."""
⋮----
# Set client info once Redis is set up
⋮----
coro = self._redis.connection_pool.disconnect()
⋮----
# Prevent RedisVL from attempting to close the client
# on an event loop in a separate thread.
⋮----
"""Create a new AsyncShallowRedisSaver instance."""
⋮----
async def asetup(self) -> None
⋮----
"""Initialize Redis indexes asynchronously."""
# Create indexes in Redis asynchronously
⋮----
"""Store only the latest checkpoint asynchronously and clean up old blobs with transaction handling.
        This method uses Redis pipeline with transaction=True to ensure atomicity of checkpoint operations.
        In case of interruption, all operations will be aborted, maintaining consistency.
        Args:
            config: The config to associate with the checkpoint
            checkpoint: The checkpoint data to store
            metadata: Additional metadata to save with the checkpoint
            new_versions: New channel versions as of this write
        Returns:
            Updated configuration after storing the checkpoint
        Raises:
            asyncio.CancelledError: If the operation is cancelled/interrupted
        """
configurable = config["configurable"].copy()
thread_id = configurable.pop("thread_id")
checkpoint_ns = configurable.pop("checkpoint_ns")
copy = checkpoint.copy()
next_config = {
⋮----
# Create a pipeline with transaction=True for atomicity
pipeline = self._redis.pipeline(transaction=True)
# Store checkpoint data
checkpoint_data = {
# store at top-level for filters in list()
⋮----
# Note: Need to keep track of the current versions to keep
current_channel_versions = new_versions.copy()
# Prepare the checkpoint key
checkpoint_key = AsyncShallowRedisSaver._make_shallow_redis_checkpoint_key(
# Add checkpoint data to pipeline
⋮----
# Before storing the new blobs, clean up old ones that won't be needed
# - Get a list of all blob keys for this thread_id and checkpoint_ns
# - Then delete the ones that aren't in new_versions
# Get all blob keys for this thread/namespace (this is done outside the pipeline)
blob_key_pattern = (
existing_blob_keys = await self._redis.keys(blob_key_pattern)
# Process each existing blob key to determine if it should be kept or deleted
⋮----
# Use safely_decode to handle both string and bytes responses
decoded_key = safely_decode(blob_key)
key_parts = decoded_key.split(REDIS_KEY_SEPARATOR)
# The key format is checkpoint_blob:thread_id:checkpoint_ns:channel:version
⋮----
channel = key_parts[3]
version = key_parts[4]
# Only keep the blob if it's referenced by the current versions
⋮----
# This is a current version, keep it
⋮----
# This is an old version, delete it
⋮----
# Store the new blob values
blobs = self._dump_blobs(
⋮----
# Add all blob data to pipeline
⋮----
# Execute all operations atomically
⋮----
# Apply TTL to checkpoint and blob keys if configured
⋮----
# Prepare the list of keys to apply TTL
ttl_keys = [checkpoint_key]
⋮----
# Apply TTL to all keys
ttl_minutes = self.ttl_config.get("default_ttl")
ttl_seconds = int(ttl_minutes * 60)
ttl_pipeline = self._redis.pipeline()
⋮----
# Handle cancellation/interruption
# Pipeline will be automatically discarded
# Either all operations succeed or none do
⋮----
# Re-raise other exceptions
⋮----
"""List checkpoints from Redis asynchronously."""
query_filter = []
⋮----
combined_filter = query_filter[0] if query_filter else "*"
⋮----
query = FilterQuery(
⋮----
num_results=limit or 100,  # Set higher limit to retrieve more results
⋮----
results = await self.checkpoints_index.search(query)
⋮----
async def aget_tuple(self, config: RunnableConfig) -> Optional[CheckpointTuple]
⋮----
"""Retrieve a checkpoint tuple from Redis asynchronously."""
thread_id = config["configurable"]["thread_id"]
checkpoint_ns = config["configurable"].get("checkpoint_ns", "")
checkpoint_filter_expression = (Tag("thread_id") == thread_id) & (
# Construct the query
checkpoints_query = FilterQuery(
# Execute the query
results = await self.checkpoints_index.search(checkpoints_query)
⋮----
doc = results.docs[0]
# If refresh_on_read is enabled, refresh TTL for checkpoint key and related keys
⋮----
thread_id = getattr(doc, "thread_id", "")
checkpoint_ns = getattr(doc, "checkpoint_ns", "")
# Get the checkpoint key
⋮----
# Get all blob keys related to this checkpoint
⋮----
blob_keys = await self._redis.keys(blob_key_pattern)
# Use safely_decode to handle both string and bytes responses
blob_keys = [safely_decode(key) for key in blob_keys]
# Apply TTL
⋮----
pipeline = self._redis.pipeline()
⋮----
checkpoint = json.loads(doc["$.checkpoint"])
# Fetch channel_values
channel_values = await self.aget_channel_values(
# Fetch pending_sends from parent checkpoint
pending_sends = await self._aload_pending_sends(
# Fetch and parse metadata
raw_metadata = getattr(doc, "$.metadata", "{}")
metadata_dict = (
# Ensure metadata matches CheckpointMetadata type
sanitized_metadata = {
metadata = cast(CheckpointMetadata, sanitized_metadata)
config_param: RunnableConfig = {
checkpoint_param = self._load_checkpoint(
pending_writes = await self._aload_pending_writes(
⋮----
"""Store intermediate writes for the latest checkpoint and clean up old writes with transaction handling.
        This method uses Redis pipeline with transaction=True to ensure atomicity of all
        write operations. In case of interruption, all operations will be aborted.
        Args:
            config (RunnableConfig): Configuration of the related checkpoint.
            writes (List[Tuple[str, Any]]): List of writes to store.
            task_id (str): Identifier for the task creating the writes.
            task_path (str): Path of the task creating the writes.
        Raises:
            asyncio.CancelledError: If the operation is cancelled/interrupted
        """
⋮----
checkpoint_id = config["configurable"]["checkpoint_id"]
⋮----
# Create a transaction pipeline for atomicity
⋮----
# Transform writes into appropriate format
writes_objects = []
⋮----
write_obj = {
⋮----
# First get all writes keys for this thread/namespace (outside the pipeline)
writes_key_pattern = AsyncShallowRedisSaver._make_shallow_redis_checkpoint_writes_key_pattern(
existing_writes_keys = await self._redis.keys(writes_key_pattern)
# Process each existing writes key to determine if it should be kept or deleted
⋮----
decoded_key = safely_decode(write_key)
⋮----
# The key format is checkpoint_write:thread_id:checkpoint_ns:checkpoint_id:task_id:idx
⋮----
key_checkpoint_id = key_parts[3]
# If the write is for a different checkpoint_id, delete it
⋮----
# Add new writes to the pipeline
upsert_case = all(w[0] in WRITES_IDX_MAP for w in writes)
⋮----
key = self._make_redis_checkpoint_writes_key(
⋮----
# For upsert case, we need to check if the key exists (outside the pipeline)
exists = await self._redis.exists(key)
⋮----
# Update existing key
⋮----
# Create new key
⋮----
# For shallow implementation, always set the full object
⋮----
"""Retrieve channel_values dictionary with properly constructed message objects."""
checkpoint_query = FilterQuery(
checkpoint_result = await self.checkpoints_index.search(checkpoint_query)
⋮----
channel_versions = json.loads(
⋮----
channel_values = {}
⋮----
blob_query = FilterQuery(
blob_results = await self.checkpoint_blobs_index.search(blob_query)
⋮----
blob_doc = blob_results.docs[0]
blob_type = blob_doc.type
blob_data = getattr(blob_doc, "$.blob", None)
⋮----
"""Load pending sends for a parent checkpoint.
        Args:
            thread_id: The thread ID
            checkpoint_ns: The checkpoint namespace
            parent_checkpoint_id: The ID of the parent checkpoint
        Returns:
            List of (type, blob) tuples representing pending sends
        """
# Query checkpoint_writes for parent checkpoint's TASKS channel
parent_writes_query = FilterQuery(
parent_writes_results = await self.checkpoint_writes_index.search(
# Sort results by task_path, task_id, idx (matching Postgres implementation)
sorted_writes = sorted(
# Extract type and blob pairs
⋮----
return []  # Early return if no checkpoint_id
writes_key = BaseRedisSaver._make_redis_checkpoint_writes_key(
matching_keys = await self._redis.keys(pattern=writes_key)
# Use safely_decode to handle both string and bytes responses
decoded_keys = [safely_decode(key) for key in matching_keys]
parsed_keys = [
pending_writes = BaseRedisSaver._load_writes(
⋮----
)  # type: ignore[misc]
⋮----
"""Configure the Redis client."""
⋮----
# Use direct AsyncRedis.from_url to avoid the deprecated get_async_redis_connection
⋮----
redis_url = os.environ.get("REDIS_URL")
⋮----
def create_indexes(self) -> None
⋮----
"""Create indexes without connecting to Redis."""
⋮----
def setup(self) -> None
⋮----
"""Initialize the checkpoint_index in Redis."""
⋮----
def get_tuple(self, config: RunnableConfig) -> Optional[CheckpointTuple]
⋮----
"""Retrieve a checkpoint tuple from Redis synchronously."""
⋮----
"""Store only the latest checkpoint synchronously."""
⋮----
"""Store intermediate writes synchronously."""
⋮----
@staticmethod
    def _make_shallow_redis_checkpoint_key(thread_id: str, checkpoint_ns: str) -> str
⋮----
"""Create a key for shallow checkpoints using only thread_id and checkpoint_ns."""
⋮----
"""Create a pattern to match all blob keys for a thread and namespace."""
⋮----
"""Create a pattern to match all writes keys for a thread and namespace."""

================
File: langgraph/checkpoint/redis/base.py
================
REDIS_KEY_SEPARATOR = ":"
CHECKPOINT_PREFIX = "checkpoint"
CHECKPOINT_BLOB_PREFIX = "checkpoint_blob"
CHECKPOINT_WRITE_PREFIX = "checkpoint_write"
SCHEMAS = [
class BaseRedisSaver(BaseCheckpointSaver[str], Generic[RedisClientType, IndexType])
⋮----
"""Base Redis implementation for checkpoint saving.
    Uses Redis JSON for storing checkpoints and related data, with RediSearch for querying.
    """
_redis: RedisClientType
_owns_its_client: bool = False
SCHEMAS = SCHEMAS
checkpoints_index: IndexType
checkpoint_blobs_index: IndexType
checkpoint_writes_index: IndexType
⋮----
"""Initialize Redis-backed checkpoint saver.
        Args:
            redis_url: Redis connection URL
            redis_client: Redis client instance to use (alternative to redis_url)
            connection_args: Additional arguments for Redis connection
            ttl: Optional TTL configuration dict with optional keys:
                - default_ttl: TTL in minutes for all checkpoint keys
                - refresh_on_read: Whether to refresh TTL on reads
        """
⋮----
# Store TTL configuration
⋮----
# Initialize indexes
⋮----
@abstractmethod
    def create_indexes(self) -> None
⋮----
"""Create appropriate SearchIndex instances."""
⋮----
"""Configure the Redis client."""
⋮----
def set_client_info(self) -> None
⋮----
"""Set client info for Redis monitoring."""
⋮----
# Try to use client_setinfo command if available
⋮----
# Fall back to a simple echo if client_setinfo is not available
⋮----
# Silently fail if even echo doesn't work
⋮----
async def aset_client_info(self) -> None
⋮----
"""Set client info for Redis monitoring asynchronously."""
⋮----
# Create the client info string with only the redisvl version
client_info = f"redis-py(redisvl_v{__redisvl_version__})"
⋮----
# Call with await to ensure it's an async call
echo_result = self._redis.echo(client_info)
⋮----
def setup(self) -> None
⋮----
"""Initialize the indices in Redis."""
# Create indexes in Redis
⋮----
loaded = json.loads(checkpoint)  # type: ignore[arg-type]
# Note: TTL refresh is now handled in get_tuple() to ensure it works
# with all Redis operations, not just internal deserialization
⋮----
"""Apply Redis native TTL to keys.
        Args:
            main_key: The primary Redis key
            related_keys: Additional Redis keys that should expire at the same time
            ttl_minutes: Time-to-live in minutes, overrides default_ttl if provided
        Returns:
            Result of the Redis operation
        """
⋮----
# Check if there's a default TTL in config
⋮----
ttl_minutes = self.ttl_config.get("default_ttl")
⋮----
ttl_seconds = int(ttl_minutes * 60)
# Check if cluster mode is detected (for sync checkpoint savers)
cluster_mode = getattr(self, "cluster_mode", False)
⋮----
# For cluster mode, execute TTL operations individually
⋮----
# For non-cluster mode, use pipeline for efficiency
pipeline = self._redis.pipeline()
# Set TTL for main key
⋮----
# Set TTL for related keys
⋮----
def _dump_checkpoint(self, checkpoint: Checkpoint) -> dict[str, Any]
⋮----
"""Convert checkpoint to Redis format."""
⋮----
# Decode bytes to avoid double serialization
checkpoint_data = json.loads(data)
⋮----
def _load_blobs(self, blob_values: dict[str, Any]) -> dict[str, Any]
⋮----
"""Load binary data from Redis."""
⋮----
def _get_type_and_blob(self, value: Any) -> Tuple[str, Optional[bytes]]
⋮----
"""Helper to get type and blob from a value."""
⋮----
"""Convert blob data for Redis storage."""
⋮----
storage_safe_thread_id = to_storage_safe_id(thread_id)
storage_safe_checkpoint_ns = to_storage_safe_str(checkpoint_ns)
# Ensure all versions are converted to strings to avoid TypeError with Tag filters
str_versions = {k: str(v) for k, v in versions.items()}
⋮----
str_versions[k],  # Use the string version
⋮----
"version": str_versions[k],  # Use the string version
⋮----
"""Convert write operations for Redis storage."""
⋮----
def _load_metadata(self, metadata: dict[str, Any]) -> CheckpointMetadata
⋮----
"""Load metadata from Redis-compatible dictionary.
        Args:
            metadata: Dictionary representation from Redis.
        Returns:
            Original metadata dictionary.
        """
⋮----
def _dump_metadata(self, metadata: CheckpointMetadata) -> str
⋮----
"""Convert metadata to a Redis-compatible dictionary.
        Args:
            metadata: Metadata to convert.
        Returns:
            Dictionary representation of metadata for Redis storage.
        """
serialized_metadata = self.serde.dumps(metadata)
# NOTE: we're using JSON serializer (not msgpack), so we need to remove null characters before writing
⋮----
def get_next_version(  # type: ignore[override]
⋮----
"""Generate next version number."""
⋮----
current_v = 0
⋮----
current_v = current
⋮----
current_v = int(current.split(".")[0])
next_v = current_v + 1
next_h = random.random()
⋮----
def _encode_blob(self, blob: Any) -> str
⋮----
"""Encode blob data for Redis storage."""
⋮----
def _decode_blob(self, blob: str) -> bytes
⋮----
"""Decode blob data from Redis storage."""
⋮----
# Handle both malformed base64 data and incorrect input types
⋮----
def _load_writes_from_redis(self, write_key: str) -> List[Tuple[str, str, Any]]
⋮----
"""Load writes from Redis JSON storage by key."""
⋮----
# Get the full JSON document
result = self._redis.json().get(write_key)
⋮----
writes = []
for write in result["writes"]:  # type: ignore[call-overload]
⋮----
"""Store intermediate writes linked to a checkpoint.
        Args:
            config: Configuration of the related checkpoint.
            writes: List of writes to store, each as (channel, value) pair.
            task_id: Identifier for the task creating the writes.
            task_path: Optional path info for the task.
        """
thread_id = config["configurable"]["thread_id"]
checkpoint_ns = config["configurable"].get("checkpoint_ns", "")
checkpoint_id = config["configurable"]["checkpoint_id"]
# Transform writes into appropriate format
writes_objects = []
⋮----
write_obj = {
⋮----
"checkpoint_ns": checkpoint_ns,  # Don't use sentinel for tag fields in RediSearch
⋮----
# For each write, check existence and then perform appropriate operation
⋮----
# Keep track of keys we're creating
created_keys = []
⋮----
key = self._make_redis_checkpoint_writes_key(
# First check if key exists
key_exists = self._redis.exists(key) == 1
⋮----
# UPSERT case - only update specific fields
⋮----
# Update only channel, type, and blob fields
⋮----
# For new records, set the complete object
⋮----
# INSERT case - only insert if doesn't exist
⋮----
# Apply TTL to newly created keys
⋮----
return []  # Early return if no checkpoint_id
# Use search index instead of keys() to avoid CrossSlot errors
# Note: For checkpoint_ns, we use the raw value for tag searches
# because RediSearch may not handle sentinel values correctly in tag fields
writes_query = FilterQuery(
⋮----
num_results=1000,  # Adjust as needed
⋮----
writes_results = self.checkpoint_writes_index.search(writes_query)
# Sort results by idx to maintain order
sorted_writes = sorted(writes_results.docs, key=lambda x: getattr(x, "idx", 0))
# Build the writes dictionary
writes_dict: Dict[Tuple[str, str], Dict[str, Any]] = {}
⋮----
task_id = str(getattr(doc, "task_id", ""))
idx = str(getattr(doc, "idx", 0))
blob_data = getattr(doc, "$.blob", "")
# Ensure blob is bytes for deserialization
⋮----
blob_data = blob_data.encode("utf-8")
⋮----
pending_writes = BaseRedisSaver._load_writes(self.serde, writes_dict)
⋮----
"""Deserialize pending writes."""
writes = [
⋮----
@staticmethod
    def _parse_redis_checkpoint_writes_key(redis_key: str) -> dict
⋮----
# Ensure redis_key is a string
redis_key = safely_decode(redis_key)
parts = redis_key.split(REDIS_KEY_SEPARATOR)
# Ensure we have at least 6 parts
⋮----
# Extract the first 6 parts regardless of total length
⋮----
storage_safe_thread_id = str(to_storage_safe_id(thread_id))
⋮----
storage_safe_checkpoint_id = str(to_storage_safe_id(checkpoint_id))

================
File: langgraph/checkpoint/redis/jsonplus_redis.py
================
logger = logging.getLogger(__name__)
class JsonPlusRedisSerializer(JsonPlusSerializer)
⋮----
"""Redis-optimized serializer that stores strings directly."""
SENTINEL_FIELDS = [
def dumps_typed(self, obj: Any) -> tuple[str, str]:  # type: ignore[override]
def loads_typed(self, data: tuple[str, Union[str, bytes]]) -> Any
⋮----
decoded = base64.b64decode(
⋮----
data_bytes = data_ if isinstance(data_, bytes) else data_.encode()

================
File: langgraph/checkpoint/redis/shallow.py
================
SCHEMAS = [
class ShallowRedisSaver(BaseRedisSaver[Redis, SearchIndex])
⋮----
"""Redis implementation that only stores the most recent checkpoint."""
⋮----
"""Create a new ShallowRedisSaver instance."""
saver: Optional[ShallowRedisSaver] = None
⋮----
saver = cls(
⋮----
"""Store only the latest checkpoint and clean up old blobs."""
configurable = config["configurable"].copy()
thread_id = configurable.pop("thread_id")
checkpoint_ns = configurable.pop("checkpoint_ns")
copy = checkpoint.copy()
next_config = {
# Store checkpoint data
checkpoint_data = {
# store at top-level for filters in list()
⋮----
# Note: Need to keep track of the current versions to keep
current_channel_versions = new_versions.copy()
⋮----
# Before storing the new blobs, clean up old ones that won't be needed
# - Get a list of all blob keys for this thread_id and checkpoint_ns
# - Then delete the ones that aren't in new_versions
cleanup_pipeline = self._redis.json().pipeline(transaction=False)
# Get all blob keys for this thread/namespace
blob_key_pattern = (
existing_blob_keys = self._redis.keys(blob_key_pattern)
# Process each existing blob key to determine if it should be kept or deleted
⋮----
# Use safely_decode to handle both string and bytes responses
decoded_key = safely_decode(blob_key)
key_parts = decoded_key.split(REDIS_KEY_SEPARATOR)
# The key format is checkpoint_blob:thread_id:checkpoint_ns:channel:version
⋮----
channel = key_parts[3]
version = key_parts[4]
# Only keep the blob if it's referenced by the current versions
⋮----
# This is a current version, keep it
⋮----
# This is an old version, delete it
⋮----
# Execute the cleanup
⋮----
# Store blob values
blobs = self._dump_blobs(
blob_keys = []
⋮----
# Unzip the list of tuples into separate lists for keys and data
⋮----
blob_keys = list(keys)
⋮----
# Apply TTL to checkpoint and blob keys if configured
checkpoint_key = ShallowRedisSaver._make_shallow_redis_checkpoint_key(
⋮----
"""List checkpoints from Redis."""
# Construct the filter expression
filter_expression = []
⋮----
# if before:
#     filter_expression.append(Tag("checkpoint_id") < get_checkpoint_id(before))
# Combine all filter expressions
combined_filter = filter_expression[0] if filter_expression else "*"
⋮----
# Construct the Redis query
query = FilterQuery(
# Execute the query
results = self.checkpoints_index.search(query)
# Process the results
⋮----
thread_id = cast(str, getattr(doc, "thread_id", ""))
checkpoint_ns = cast(str, getattr(doc, "checkpoint_ns", ""))
checkpoint = json.loads(doc["$.checkpoint"])
# Fetch channel_values
channel_values = self.get_channel_values(
# Fetch pending_sends from parent checkpoint
pending_sends = self._load_pending_sends(
# Fetch and parse metadata
raw_metadata = getattr(doc, "$.metadata", "{}")
metadata_dict = (
# Ensure metadata matches CheckpointMetadata type
sanitized_metadata = {
metadata = cast(CheckpointMetadata, sanitized_metadata)
checkpoint_param = self._load_checkpoint(
config_param: RunnableConfig = {
pending_writes = self._load_pending_writes(
⋮----
def get_tuple(self, config: RunnableConfig) -> Optional[CheckpointTuple]
⋮----
"""Get a checkpoint tuple from Redis.
        Args:
            config (RunnableConfig): The config to use for retrieving the checkpoint.
        Returns:
            Optional[CheckpointTuple]: The retrieved checkpoint tuple, or None if no matching checkpoint was found.
        """
thread_id = config["configurable"]["thread_id"]
checkpoint_ns = config["configurable"].get("checkpoint_ns", "")
checkpoint_filter_expression = (Tag("thread_id") == thread_id) & (
# Construct the query
checkpoints_query = FilterQuery(
⋮----
results = self.checkpoints_index.search(checkpoints_query)
⋮----
doc = results.docs[0]
# If refresh_on_read is enabled, refresh TTL for checkpoint key and related keys
⋮----
thread_id = getattr(doc, "thread_id", "")
checkpoint_ns = getattr(doc, "checkpoint_ns", "")
# Get the checkpoint key
⋮----
# Get all blob keys related to this checkpoint
⋮----
# Use safely_decode to handle both string and bytes responses
blob_keys = [
# Apply TTL
⋮----
# Fetch channel_values
⋮----
# Fetch pending_sends from parent checkpoint
⋮----
# Fetch and parse metadata
⋮----
# Ensure metadata matches CheckpointMetadata type
⋮----
"""Configure the Redis client."""
⋮----
# Set client info for Redis monitoring
⋮----
def create_indexes(self) -> None
⋮----
"""Store intermediate writes linked to a checkpoint and clean up old writes.
        Args:
            config: Configuration of the related checkpoint.
            writes: List of writes to store, each as (channel, value) pair.
            task_id: Identifier for the task creating the writes.
            task_path: Optional path info for the task.
        """
⋮----
checkpoint_id = config["configurable"]["checkpoint_id"]
# Transform writes into appropriate format
writes_objects = []
⋮----
write_obj = {
⋮----
# First clean up old writes for this thread and namespace if they're for a different checkpoint_id
⋮----
# Get all writes keys for this thread/namespace
writes_key_pattern = (
existing_writes_keys = self._redis.keys(writes_key_pattern)
# Process each existing writes key to determine if it should be kept or deleted
⋮----
decoded_key = safely_decode(write_key)
⋮----
# The key format is checkpoint_write:thread_id:checkpoint_ns:checkpoint_id:task_id:idx
⋮----
key_checkpoint_id = key_parts[3]
# If the write is for a different checkpoint_id, delete it
⋮----
# For each write, check existence and then perform appropriate operation
⋮----
key = self._make_redis_checkpoint_writes_key(
# First check if key exists
key_exists = self._redis.exists(key) == 1
⋮----
# UPSERT case - only update specific fields
⋮----
# Update only channel, type, and blob fields
⋮----
# For new records, set the complete object
⋮----
# INSERT case
⋮----
"""Convert blob data for Redis storage.
        In the shallow implementation, we use the version in the key to allow
        storing multiple versions without conflicts and to facilitate cleanup.
        """
⋮----
# Use the base Redis checkpoint blob key to include version, enabling version tracking
⋮----
"version": ver,  # Include version in the data as well
⋮----
"""Retrieve channel_values dictionary with properly constructed message objects."""
checkpoint_query = FilterQuery(
checkpoint_result = self.checkpoints_index.search(checkpoint_query)
⋮----
channel_versions = json.loads(
⋮----
channel_values = {}
⋮----
blob_query = FilterQuery(
blob_results = self.checkpoint_blobs_index.search(blob_query)
⋮----
blob_doc = blob_results.docs[0]
blob_type = blob_doc.type
blob_data = getattr(blob_doc, "$.blob", None)
⋮----
"""Load pending sends for a parent checkpoint.
        Args:
            thread_id: The thread ID
            checkpoint_ns: The checkpoint namespace
            parent_checkpoint_id: The ID of the parent checkpoint
        Returns:
            List of (type, blob) tuples representing pending sends
        """
# Query checkpoint_writes for parent checkpoint's TASKS channel
parent_writes_query = FilterQuery(
parent_writes_results = self.checkpoint_writes_index.search(parent_writes_query)
# Sort results by task_path, task_id, idx (matching Postgres implementation)
sorted_writes = sorted(
# Extract type and blob pairs
⋮----
@staticmethod
    def _make_shallow_redis_checkpoint_key(thread_id: str, checkpoint_ns: str) -> str
⋮----
"""Create a key for shallow checkpoints using only thread_id and checkpoint_ns."""
⋮----
"""Create a key for a blob in a shallow checkpoint."""
⋮----
"""Create a pattern to match all blob keys for a thread and namespace."""
⋮----
"""Create a pattern to match all writes keys for a thread and namespace."""

================
File: langgraph/checkpoint/redis/types.py
================
RedisClientType = TypeVar(
IndexType = TypeVar("IndexType", bound=Union[SearchIndex, AsyncSearchIndex])
MetadataInput = Optional[dict[str, Any]]

================
File: langgraph/checkpoint/redis/util.py
================
"""
RediSearch versions below 2.10 don't support indexing and querying
empty strings, so we use a sentinel value to represent empty strings.
Because checkpoint queries are sorted by checkpoint_id, we use a UUID
that is lexicographically sortable. Typically, checkpoints that need
sentinel values are from the first run of the graph, so this should
generally be correct.
This module also includes utility functions for safely handling Redis responses,
including handling bytes vs string responses depending on how the Redis client is
configured with decode_responses.
"""
⋮----
EMPTY_STRING_SENTINEL = "__empty__"
EMPTY_ID_SENTINEL = "00000000-0000-0000-0000-000000000000"
def to_storage_safe_str(value: str) -> str
⋮----
"""
    Prepare a value for storage in Redis as a string.
    Convert an empty string to a sentinel value, otherwise return the
    value as a string.
    Args:
        value (str): The value to convert.
    Returns:
        str: The converted value.
    """
⋮----
def from_storage_safe_str(value: str) -> str
⋮----
"""
    Convert a value from a sentinel value to an empty string if present,
    otherwise return the value unchanged.
    Args:
        value (str): The value to convert.
    Returns:
        str: The converted value.
    """
⋮----
def to_storage_safe_id(value: str) -> str
⋮----
"""
    Prepare a value for storage in Redis as an ID.
    Convert an empty string to a sentinel value for empty ID strings, otherwise
    return the value as a string.
    Args:
        value (str): The value to convert.
    Returns:
        str: The converted value.
    """
⋮----
def from_storage_safe_id(value: str) -> str
⋮----
"""
    Convert a value from a sentinel value for empty ID strings to an empty
    ID string if present, otherwise return the value unchanged.
    Args:
        value (str): The value to convert.
    Returns:
        str: The converted value.
    """
⋮----
def safely_decode(obj: Any) -> Any
⋮----
"""
    Safely decode Redis responses, handling both string and bytes types.
    This is especially useful when working with Redis clients configured with
    different decode_responses settings. It recursively processes nested
    data structures (dicts, lists, tuples, sets).
    Based on RedisVL's convert_bytes function (redisvl.redis.utils.convert_bytes)
    but implemented directly to avoid runtime import issues and ensure consistent
    behavior with sets and other data structures. See PR #34 and referenced
    implementation: https://github.com/redis/redis-vl-python/blob/9f22a9ad4c2166af6462b007833b456448714dd9/redisvl/redis/utils.py#L20
    Args:
        obj: The object to decode. Can be a string, bytes, or a nested structure
            containing strings/bytes (dict, list, tuple, set).
    Returns:
        The decoded object with all bytes converted to strings.
    """
⋮----
# If decoding fails, return the original bytes
⋮----
# For other types (int, float, bool, etc.), return as is

================
File: langgraph/checkpoint/redis/version.py
================
__version__ = "0.0.4"
__lib_name__ = f"langgraph-checkpoint-redis_v{__version__}"
__full_lib_name__ = f"redis-py(redisvl_v{__redisvl_version__};{__lib_name__})"

================
File: langgraph/store/redis/__init__.py
================
"""Synchronous Redis store implementation."""
⋮----
_token_escaper = TokenEscaper()
_token_unescaper = TokenUnescaper()
logger = logging.getLogger(__name__)
def _convert_redis_score_to_similarity(score: float, distance_type: str) -> float
⋮----
"""Convert Redis vector distance to similarity score."""
⋮----
# Redis returns cosine distance (1 - cosine_similarity)
# Convert back to similarity
⋮----
# For L2, smaller distance means more similar
# Use a simple exponential decay
⋮----
# For inner product, Redis already returns what we want
⋮----
class RedisStore(BaseStore, BaseRedisStore[Redis, SearchIndex])
⋮----
"""Redis-backed store with optional vector search.
    Provides synchronous operations for storing and retrieving data with optional
    vector similarity search support.
    """
# Enable TTL support
supports_ttl = True
ttl_config: Optional[TTLConfig] = None
⋮----
# Detection will happen in setup()
⋮----
"""Create store from Redis connection string."""
client = None
⋮----
client = RedisConnectionFactory.get_redis_connection(conn_string)
store = cls(client, index=index, ttl=ttl)
# Client info will already be set in __init__, but we set it up here
# to make the method behavior consistent with AsyncRedisStore
⋮----
def setup(self) -> None
⋮----
"""Initialize store indices."""
# Detect if we're connected to a Redis cluster
⋮----
def batch(self, ops: Iterable[Op]) -> list[Result]
⋮----
"""Execute batch of operations."""
⋮----
results: list[Result] = [None] * num_ops
⋮----
def _detect_cluster_mode(self) -> None
⋮----
"""Detect if the Redis client is a cluster client by inspecting its class."""
# If we passed in_cluster_mode explicitly, respect it
⋮----
"""Execute list namespaces operations in batch."""
⋮----
# Construct base query for namespace search
base_query = "*"  # Start with all documents
⋮----
conditions = []
⋮----
prefix = _namespace_to_text(
⋮----
suffix = _namespace_to_text(
⋮----
base_query = " ".join(conditions)
# Execute search with return_fields=["prefix"] to get just namespaces
query = FilterQuery(filter_expression=base_query, return_fields=["prefix"])
res = self.store_index.search(query)
# Extract unique namespaces
namespaces = set()
⋮----
ns = tuple(_token_unescaper.unescape(doc.prefix).split("."))
# Apply max_depth if specified
⋮----
ns = ns[: op.max_depth]
⋮----
# Sort and apply pagination
sorted_namespaces = sorted(namespaces)
⋮----
offset = op.offset or 0
limit = op.limit or 10
sorted_namespaces = sorted_namespaces[offset : offset + limit]
⋮----
"""Execute GET operations in batch."""
refresh_keys_by_idx: dict[int, list[str]] = (
⋮----
)  # Track keys that need TTL refreshed by op index
⋮----
res = self.store_index.search(Query(query))
# Parse JSON from each document
key_to_row = {
⋮----
# Find the corresponding operation by looking it up in the operation list
# This is needed because idx is the index in the overall operation list
op_idx = None
⋮----
op_idx = i
⋮----
op = get_ops[op_idx][1]
⋮----
# Also add vector keys for the same document
doc_uuid = doc_id.split(":")[-1]
vector_key = (
⋮----
# Now refresh TTLs for any keys that need it
⋮----
# Get default TTL from config
ttl_minutes = None
⋮----
ttl_minutes = self.ttl_config.get("default_ttl")
⋮----
ttl_seconds = int(ttl_minutes * 60)
⋮----
ttl = self._redis.ttl(key)
⋮----
pipeline = self._redis.pipeline(transaction=True)
⋮----
# Only refresh TTL if the key exists and has a TTL
⋮----
if ttl > 0:  # Only refresh if key exists and has TTL
⋮----
"""Execute PUT operations in batch."""
⋮----
# First delete any existing documents that are being updated/deleted
⋮----
namespace = _namespace_to_text(op.namespace)
query = f"@prefix:{namespace} @key:{{{_token_escaper.escape(op.key)}}}"
results = self.store_index.search(query)
⋮----
vector_results = self.vector_index.search(query)
⋮----
# Now handle new document creation
doc_ids: dict[tuple[str, str], str] = {}
store_docs: list[RedisDocument] = []
store_keys: list[str] = []
ttl_tracking: dict[str, tuple[list[str], Optional[float]]] = (
⋮----
)  # Tracks keys that need TTL + their TTL values
# Generate IDs for PUT operations
⋮----
generated_doc_id = str(ULID())
⋮----
# Track TTL for this document if specified
⋮----
main_key = f"{STORE_PREFIX}{REDIS_KEY_SEPARATOR}{generated_doc_id}"
⋮----
# Load store docs with explicit keys
⋮----
store_key = (doc["prefix"], doc["key"])
doc_id = doc_ids[store_key]
# Remove TTL fields - they're not needed with Redis native TTL
⋮----
redis_key = f"{STORE_PREFIX}{REDIS_KEY_SEPARATOR}{doc_id}"
⋮----
# Load individually if cluster
⋮----
# Handle vector embeddings with same IDs
⋮----
vectors = self.embeddings.embed_documents(
vector_docs: list[dict[str, Any]] = []
vector_keys: list[str] = []
# Check if we're using hash storage for vectors
vector_storage_type = "json"  # default
⋮----
index_dict = dict(self.index_config)
vector_storage_type = index_dict.get("vector_storage_type", "json")
⋮----
vector_key: tuple[str, str] = (ns, key)
doc_id = doc_ids[vector_key]
# Prepare vector based on storage type
⋮----
# For hash storage, convert vector to byte string
⋮----
vector_list = (
embedding_value = array_to_buffer(vector_list, "float32")
⋮----
# For JSON storage, keep as list
embedding_value = (
⋮----
redis_vector_key = f"{STORE_VECTOR_PREFIX}{REDIS_KEY_SEPARATOR}{doc_id}"
⋮----
# Add this vector key to the related keys list for TTL
main_key = f"{STORE_PREFIX}{REDIS_KEY_SEPARATOR}{doc_id}"
⋮----
# Load individually if cluster
⋮----
# Now apply TTLs after all documents are loaded
⋮----
"""Execute search operations in batch."""
⋮----
# Handle vector search
query_vectors = {}
⋮----
query_vectors = dict(zip([idx for idx, _ in embedding_requests], vectors))
# Process each search operation
⋮----
# Vector similarity search
vector = query_vectors[idx]
vector_query = VectorQuery(
⋮----
num_results=limit,  # Use the user-specified limit
⋮----
vector_results = self.vector_index.query(vector_query)
# Get matching store docs
result_map = {}  # Map store key to vector result with distances
⋮----
store_docs = []
# Direct JSON GET for cluster mode
⋮----
doc_id = (
⋮----
doc_uuid = doc_id.split(":")[1]
store_key = f"{STORE_PREFIX}{REDIS_KEY_SEPARATOR}{doc_uuid}"
⋮----
# Fetch individually in cluster mode
store_doc_item = self._redis.json().get(store_key)
⋮----
store_docs_raw = store_docs
⋮----
pipe = self._redis.pipeline(transaction=True)
⋮----
# Execute all lookups in one batch
store_docs_raw = pipe.execute()
# Process results maintaining order and applying filters
items = []
refresh_keys = []  # Track keys that need TTL refreshed
store_docs_iter = iter(store_docs_raw)
⋮----
store_doc = next(store_docs_iter, None)
⋮----
vector_result = result_map[store_key]
# Get vector_distance from original search result
dist = (
# Convert to similarity score
score = (1.0 - float(dist)) if dist is not None else 0.0
⋮----
store_doc = json.loads(
⋮----
store_doc  # type: ignore[arg-type]
)  # Attempt to parse if it's a JSON string
⋮----
continue  # Skip this problematic document
⋮----
):  # Check again after potential parsing
⋮----
# if still not a dict, this means it's a problematic entry
⋮----
# Apply value filters if needed
⋮----
matches = True
value = store_doc.get("value", {})
⋮----
actual = value.get(key)
⋮----
matches = False
⋮----
# If refresh_ttl is true, add to list for refreshing
⋮----
# Also find associated vector keys with same ID
doc_id = store_key.split(":")[-1]
⋮----
# Refresh TTL if requested
⋮----
# Get default TTL from config
⋮----
# Only refresh TTL if the key exists and has a TTL
⋮----
if ttl > 0:  # Only refresh if key exists and has TTL
⋮----
# Regular search
# Create a query with LIMIT and OFFSET parameters
query = Query(query_str).paging(offset, limit)
# Execute search with limit and offset applied by Redis
⋮----
data = json.loads(doc.json)
# Apply value filters
⋮----
value = data.get("value", {})
⋮----
# If refresh_ttl is true, add the key to refresh list
⋮----
# Also find associated vector keys with same ID
doc_id = doc.id.split(":")[-1]
⋮----
async def abatch(self, ops: Iterable[Op]) -> list[Result]
⋮----
"""Execute batch of operations asynchronously."""
⋮----
__all__ = ["AsyncRedisStore", "RedisStore"]

================
File: langgraph/store/redis/aio.py
================
_token_escaper = TokenEscaper()
_token_unescaper = TokenUnescaper()
⋮----
class AsyncRedisStore(
⋮----
"""Async Redis store with optional vector search."""
store_index: AsyncSearchIndex
vector_index: AsyncSearchIndex
_owns_its_client: bool
supports_ttl: bool = True
# Use a different name to avoid conflicting with the base class attribute
_async_ttl_stop_event: asyncio.Event | None = None
_ttl_sweeper_task: asyncio.Task | None = None
ttl_config: Optional[TTLConfig] = None
# Whether to assume the Redis server is a cluster; None triggers auto-detection
cluster_mode: Optional[bool] = None
⋮----
"""Initialize store with Redis connection and optional index config."""
⋮----
# Initialize base classes
⋮----
# Set up store configuration
⋮----
fields = (
⋮----
fields = [fields]
⋮----
# Configure client
⋮----
# Validate and store cluster_mode; None means auto-detect later
⋮----
# Create store index
⋮----
# Configure vector index if needed
⋮----
vector_schema = self.SCHEMAS[1].copy()
vector_fields = vector_schema.get("fields", [])
vector_field = None
⋮----
vector_field = f
⋮----
# Configure vector field with index config values
⋮----
"algorithm": "flat",  # Default to flat
⋮----
# Apply any additional vector type config
⋮----
"""Configure the Redis client."""
⋮----
# Use direct AsyncRedis.from_url to avoid the deprecated get_async_redis_connection
⋮----
redis_url = os.environ.get("REDIS_URL")
⋮----
async def setup(self) -> None
⋮----
"""Initialize store indices."""
# Handle embeddings in same way as sync store
⋮----
# Auto-detect cluster mode if not explicitly set
⋮----
# Create indices in Redis
⋮----
async def _detect_cluster_mode(self) -> None
⋮----
"""Detect if the Redis client is a cluster client by inspecting its class."""
# Determine cluster mode based on client class
⋮----
# This can't be properly typed due to covariance issues with async methods
⋮----
"""Apply Redis native TTL to keys asynchronously.
        Args:
            main_key: The primary Redis key
            related_keys: Additional Redis keys that should expire at the same time
            ttl_minutes: Time-to-live in minutes
        """
⋮----
# Check if there's a default TTL in config
⋮----
ttl_minutes = self.ttl_config.get("default_ttl")
⋮----
ttl_seconds = int(ttl_minutes * 60)
⋮----
pipeline = self._redis.pipeline(transaction=True)
# Set TTL for main key
⋮----
# Set TTL for related keys
if related_keys:  # Check if related_keys is not None
⋮----
async def sweep_ttl(self) -> int:  # type: ignore[override]
⋮----
"""Clean up any remaining expired items.
        This is not needed with Redis native TTL, but kept for API compatibility.
        Redis automatically removes expired keys.
        Returns:
            int: Always returns 0 as Redis handles expiration automatically
        """
⋮----
async def start_ttl_sweeper(  # type: ignore[override]
⋮----
"""Start TTL sweeper.
        This is a no-op with Redis native TTL, but kept for API compatibility.
        Redis automatically removes expired keys.
        Args:
            sweep_interval_minutes: Ignored parameter, kept for API compatibility
        """
# No-op: Redis handles TTL expiration automatically
⋮----
async def stop_ttl_sweeper(self, timeout: Optional[float] = None) -> bool:  # type: ignore[override]
⋮----
"""Stop TTL sweeper.
        This is a no-op with Redis native TTL, but kept for API compatibility.
        Args:
            timeout: Ignored parameter, kept for API compatibility
        Returns:
            bool: Always True as there's no sweeper to stop
        """
⋮----
"""Create store from Redis connection string."""
⋮----
# Set client information after setup
⋮----
def create_indexes(self) -> None
⋮----
"""Create async indices."""
⋮----
async def __aenter__(self) -> AsyncRedisStore
⋮----
"""Async context manager enter."""
# Client info was already set in __init__,
# but we'll set it again here to be consistent with checkpoint code
⋮----
"""Async context manager exit."""
# Cancel the background task created by AsyncBatchedBaseStore
⋮----
# Close Redis connections if we own them
⋮----
async def abatch(self, ops: Iterable[Op]) -> list[Result]
⋮----
"""Execute batch of operations asynchronously."""
⋮----
results: list[Result] = [None] * num_ops
tasks = []
⋮----
def batch(self: AsyncRedisStore, ops: Iterable[Op]) -> list[Result]
⋮----
"""Execute batch of operations synchronously.
        Args:
            ops: Operations to execute in batch
        Returns:
            Results from batch execution
        Raises:
            asyncio.InvalidStateError: If called from the main event loop
        """
⋮----
"""Execute GET operations in batch asynchronously."""
refresh_keys_by_idx: dict[int, list[str]] = (
⋮----
)  # Track keys that need TTL refreshed by op index
⋮----
res = await self.store_index.search(Query(query))
# Parse JSON from each document
key_to_row = {
⋮----
# Find the corresponding operation by looking it up in the operation list
# This is needed because idx is the index in the overall operation list
op_idx = None
⋮----
op_idx = i
⋮----
op = get_ops[op_idx][1]
⋮----
# Also add vector keys for the same document
doc_uuid = doc_id.split(":")[-1]
vector_key = (
⋮----
# Now refresh TTLs for any keys that need it
⋮----
# Get default TTL from config
ttl_minutes = None
⋮----
ttl = await self._redis.ttl(key)
⋮----
# In cluster mode, we must use transaction=False # Comment no longer relevant
pipeline = self._redis.pipeline(
⋮----
)  # Assuming non-cluster or single node for now
⋮----
# Only refresh TTL if the key exists and has a TTL
⋮----
if ttl > 0:  # Only refresh if key exists and has TTL
⋮----
"""Prepare queries - no Redis operations in async version."""
# Last-write wins
dedupped_ops: dict[tuple[tuple[str, ...], str], PutOp] = {}
⋮----
inserts: list[PutOp] = []
deletes: list[PutOp] = []
⋮----
operations: list[RedisDocument] = []
embedding_request = None
to_embed: list[tuple[str, str, str, str]] = []
⋮----
# Delete matching documents
⋮----
prefix = _namespace_to_text(op.namespace)
query = f"(@prefix:{prefix} @key:{{{op.key}}})"
results = await self.store_index.search(query)
⋮----
# Handle inserts
⋮----
now = int(datetime.now(timezone.utc).timestamp() * 1_000_000)
# Handle TTL
⋮----
expires_at = None
⋮----
ttl_minutes = op.ttl
expires_at = int(
doc = RedisDocument(
⋮----
paths = (
⋮----
texts = get_text_at_path(op.value, tokenized_path)
⋮----
embedding_request = ("", to_embed)
⋮----
"""Execute PUT operations in batch asynchronously."""
⋮----
# First delete any existing documents that are being updated/deleted
⋮----
namespace = _namespace_to_text(op.namespace)
query = f"@prefix:{namespace} @key:{{{_token_escaper.escape(op.key)}}}"
⋮----
vector_results = await self.vector_index.search(query)
⋮----
):  # Check if pipeline has commands before executing
⋮----
# Now handle new document creation
doc_ids: dict[tuple[str, str], str] = {}
store_docs: list[RedisDocument] = []
store_keys: list[str] = []
ttl_tracking: dict[str, tuple[list[str], Optional[float]]] = (
⋮----
)  # Tracks keys that need TTL + their TTL values
# Generate IDs for PUT operations
⋮----
generated_doc_id = str(ULID())
⋮----
# Track TTL for this document if specified
⋮----
main_key = f"{STORE_PREFIX}{REDIS_KEY_SEPARATOR}{generated_doc_id}"
⋮----
# Load store docs with explicit keys
⋮----
store_key = (doc["prefix"], doc["key"])
doc_id = doc_ids[store_key]
# Remove TTL fields - they're not needed with Redis native TTL
⋮----
redis_key = f"{STORE_PREFIX}{REDIS_KEY_SEPARATOR}{doc_id}"
⋮----
# For cluster mode, load documents individually if SearchIndex.load isn't cluster-safe for batching.
# This is a conservative approach. If redisvl's load is cluster-safe, this can be optimized.
⋮----
# Handle vector embeddings with same IDs
⋮----
vectors = await self.embeddings.aembed_documents(
vector_docs: list[dict[str, Any]] = []
vector_keys: list[str] = []
⋮----
vector_key: tuple[str, str] = (ns, key)
doc_id = doc_ids[vector_key]
⋮----
redis_vector_key = f"{STORE_VECTOR_PREFIX}{REDIS_KEY_SEPARATOR}{doc_id}"
⋮----
# Add this vector key to the related keys list for TTL
main_key = f"{STORE_PREFIX}{REDIS_KEY_SEPARATOR}{doc_id}"
⋮----
# Similar to store_docs, load vector docs individually in cluster mode as a precaution.
⋮----
# Now apply TTLs after all documents are loaded
⋮----
"""Execute search operations in batch asynchronously."""
⋮----
# Handle vector search
query_vectors = {}
⋮----
query_vectors = dict(zip([idx for idx, _ in embedding_requests], vectors))
# Process each search operation
⋮----
# Vector similarity search
vector = query_vectors[idx]
vector_query = VectorQuery(
⋮----
num_results=limit,  # Use the user-specified limit
⋮----
vector_results_docs = await self.vector_index.query(vector_query)
# Get matching store docs
result_map = {}
⋮----
store_docs = []
⋮----
doc_id = (
⋮----
doc_uuid = doc_id.split(":")[1]
store_key = f"{STORE_PREFIX}{REDIS_KEY_SEPARATOR}{doc_uuid}"
⋮----
# Fetch individually in cluster mode
store_doc_item = await self._redis.json().get(store_key)  # type: ignore
⋮----
store_docs_raw = store_docs
⋮----
pipeline = self._redis.pipeline(transaction=False)
⋮----
):  # doc_vr is now an individual doc from the list
⋮----
store_docs_raw = await pipeline.execute()
# Process results maintaining order and applying filters
items = []
refresh_keys = []  # Track keys that need TTL refreshed
store_docs_iter = iter(store_docs_raw)
⋮----
store_doc = next(store_docs_iter, None)
⋮----
vector_result = result_map[store_key]
# Get vector_distance from original search result
dist = (
# Convert to similarity score
score = (1.0 - float(dist)) if dist is not None else 0.0
# Ensure store_doc is a dictionary before trying to assign to it
⋮----
store_doc = json.loads(
⋮----
)  # Attempt to parse if it's a JSON string
⋮----
continue  # Skip this problematic document
⋮----
):  # Check again after potential parsing
⋮----
# if still not a dict, this means it's a problematic entry
⋮----
# Apply value filters if needed
⋮----
matches = True
value = store_doc.get("value", {})
⋮----
actual = value.get(key)
⋮----
matches = False
⋮----
# If refresh_ttl is true, add to list for refreshing
⋮----
# Also find associated vector keys with same ID
doc_id = store_key.split(":")[-1]
⋮----
# Refresh TTL if requested
⋮----
# Get default TTL from config
⋮----
# Only refresh TTL if the key exists and has a TTL
⋮----
if ttl > 0:  # Only refresh if key exists and has TTL
⋮----
# Regular search
# Create a query with LIMIT and OFFSET parameters
query = Query(query_str).paging(offset, limit)
# Execute search with limit and offset applied by Redis
res = await self.store_index.search(query)
⋮----
data = json.loads(doc.json)
# Apply value filters
⋮----
value = data.get("value", {})
⋮----
# If refresh_ttl is true, add the key to refresh list
⋮----
# Also find associated vector keys with same ID
doc_id = doc.id.split(":")[-1]
⋮----
"""Execute list namespaces operations in batch."""
⋮----
# Construct base query for namespace search
base_query = "*"  # Start with all documents
⋮----
conditions = []
⋮----
prefix = _namespace_to_text(
⋮----
suffix = _namespace_to_text(
⋮----
base_query = " ".join(conditions)
# Execute search with return_fields=["prefix"] to get just namespaces
query = FilterQuery(filter_expression=base_query, return_fields=["prefix"])
⋮----
# Extract unique namespaces
namespaces = set()
⋮----
ns = tuple(_token_unescaper.unescape(doc.prefix).split("."))
# Apply max_depth if specified
⋮----
ns = ns[: op.max_depth]
⋮----
# Sort and apply pagination
sorted_namespaces = sorted(namespaces)
⋮----
offset = op.offset or 0
limit = op.limit or 10
sorted_namespaces = sorted_namespaces[offset : offset + limit]
⋮----
# We don't need _run_background_tasks anymore as AsyncBatchedBaseStore provides this

================
File: langgraph/store/redis/base.py
================
"""Base implementation for Redis-backed store with optional vector search capabilities."""
⋮----
_token_escaper = TokenEscaper()
_token_unescaper = TokenUnescaper()
logger = logging.getLogger(__name__)
REDIS_KEY_SEPARATOR = ":"
STORE_PREFIX = "store"
STORE_VECTOR_PREFIX = "store_vectors"
# Schemas for Redis Search indices
SCHEMAS = [
def _ensure_string_or_literal(value: Any) -> str
⋮----
"""Convert value to string safely."""
⋮----
C = TypeVar("C", bound=Union[Redis, AsyncRedis])
class RedisDocument(TypedDict, total=False)
⋮----
prefix: str
key: str
value: Optional[str]
created_at: int
updated_at: int
ttl_minutes: Optional[float]
expires_at: Optional[int]
class BaseRedisStore(Generic[RedisClientType, IndexType])
⋮----
"""Base Redis implementation for persistent key-value store with optional vector search."""
_redis: RedisClientType
store_index: IndexType
vector_index: IndexType
_ttl_sweeper_thread: Optional[threading.Thread] = None
_ttl_stop_event: threading.Event | None = None
# Whether to operate in Redis cluster mode; None triggers auto-detection
cluster_mode: Optional[bool] = None
SCHEMAS = SCHEMAS
supports_ttl: bool = True
ttl_config: Optional[TTLConfig] = None
⋮----
"""Apply Redis native TTL to keys.
        Args:
            main_key: The primary Redis key
            related_keys: Additional Redis keys that should expire at the same time
            ttl_minutes: Time-to-live in minutes
        """
⋮----
# Check if there's a default TTL in config
⋮----
ttl_minutes = self.ttl_config.get("default_ttl")
⋮----
ttl_seconds = int(ttl_minutes * 60)
# Use the cluster_mode attribute to determine the approach
⋮----
# Cluster path: direct expire calls
⋮----
# Non-cluster path: transactional pipeline
pipeline = self._redis.pipeline(transaction=True)
⋮----
def sweep_ttl(self) -> int
⋮----
"""Clean up any remaining expired items.
        This is not needed with Redis native TTL, but kept for API compatibility.
        Redis automatically removes expired keys.
        Returns:
            int: Always returns 0 as Redis handles expiration automatically
        """
⋮----
def start_ttl_sweeper(self, sweep_interval_minutes: Optional[int] = None) -> None
⋮----
"""Start TTL sweeper.
        This is a no-op with Redis native TTL, but kept for API compatibility.
        Redis automatically removes expired keys.
        Args:
            sweep_interval_minutes: Ignored parameter, kept for API compatibility
        """
# No-op: Redis handles TTL expiration automatically
⋮----
def stop_ttl_sweeper(self, timeout: Optional[float] = None) -> bool
⋮----
"""Stop TTL sweeper.
        This is a no-op with Redis native TTL, but kept for API compatibility.
        Args:
            timeout: Ignored parameter, kept for API compatibility
        Returns:
            bool: Always True as there's no sweeper to stop
        """
⋮----
ttl: Optional[TTLConfig] = None,  # Corrected type hint for ttl
⋮----
"""Initialize store with Redis connection and optional index config."""
⋮----
# Store cluster_mode; None means auto-detect in RedisStore or AsyncRedisStore
⋮----
fields = self.index_config.get("fields", ["$"]) or []
⋮----
fields = [fields]
⋮----
# Initialize search indices
⋮----
# Configure vector index if needed
⋮----
# Get storage type from index config, default to "json" for backward compatibility
# Cast to dict to safely access potential extra fields
index_dict = dict(self.index_config)
vector_storage_type = index_dict.get("vector_storage_type", "json")
vector_schema: Dict[str, Any] = copy.deepcopy(self.SCHEMAS[1])
# Update storage type in schema
⋮----
vector_fields = vector_schema.get("fields", [])
vector_field = None
⋮----
vector_field = f
⋮----
# Configure vector field with index config values
⋮----
"algorithm": "flat",  # Default to flat
⋮----
# Map distance metrics to Redis-accepted literals
⋮----
# Apply any additional vector type config
⋮----
# Set client information in Redis
⋮----
def set_client_info(self) -> None
⋮----
"""Set client info for Redis monitoring."""
⋮----
# Create the client info string with only the redisvl version
client_info = f"redis-py(redisvl_v{__redisvl_version__})"
⋮----
# Try to use client_setinfo command if available
⋮----
# Fall back to a simple echo if client_setinfo is not available
⋮----
# Silently fail if even echo doesn't work
⋮----
async def aset_client_info(self) -> None
⋮----
"""Set client info for Redis monitoring asynchronously."""
⋮----
# Call with await to ensure it's an async call
echo_result = self._redis.echo(client_info)
⋮----
"""Convert GET operations into Redis queries."""
namespace_groups = defaultdict(list)
⋮----
results: list[tuple[str, Sequence, tuple[str, ...], list]] = []
⋮----
# Use Tag helper to properly escape all special characters
prefix_filter = Text("prefix") == _namespace_to_text(namespace)
filter_str = f"({prefix_filter} "
⋮----
key_filter = Tag("key") == list(keys)
⋮----
# Last-write wins
dedupped_ops: dict[tuple[tuple[str, ...], str], PutOp] = {}
⋮----
inserts: list[PutOp] = []
deletes: list[PutOp] = []
⋮----
operations: list[RedisDocument] = []
embedding_request = None
to_embed: list[tuple[str, str, str, str]] = []
⋮----
# Delete matching documents
⋮----
prefix = _namespace_to_text(op.namespace)
query = f"(@prefix:{prefix} @key:{{{op.key}}})"
results = self.store_index.search(query)
⋮----
# Handle inserts
⋮----
now = int(datetime.now(timezone.utc).timestamp() * 1_000_000)
# With native Redis TTL, we don't need to store TTL in document
# but store it for backward compatibility and metadata purposes
ttl_minutes = None
expires_at = None
⋮----
ttl_minutes = op.ttl
# Calculate expiration but don't rely on it for actual expiration
# as we'll use Redis native TTL
expires_at = int(
doc = RedisDocument(
⋮----
paths = (
⋮----
texts = get_text_at_path(op.value, tokenized_path)
⋮----
embedding_request = ("", to_embed)
⋮----
"""Convert search operations into Redis queries."""
queries = []
embedding_requests = []
⋮----
filter_conditions = []
⋮----
prefix = _namespace_to_text(op.namespace_prefix)
⋮----
query = " ".join(filter_conditions) if filter_conditions else "*"
limit = op.limit if op.limit is not None else 10
offset = op.offset if op.offset is not None else 0
params = [limit, offset]
⋮----
"""Convert list namespaces operations into Redis queries."""
⋮----
conditions = []
⋮----
path = _namespace_to_text(condition.path, handle_wildcards=True)
⋮----
query = " ".join(conditions) if conditions else "*"
params = [op.limit, op.offset] if op.limit or op.offset else []
⋮----
def _get_filter_condition(self, key: str, op: str, value: Any) -> str
⋮----
"""Get Redis search filter condition for an operator."""
⋮----
"""Compute cosine similarity between vectors."""
# Note: For production use, consider importing numpy for better performance
similarities = []
⋮----
dot_product = sum(a * b for a, b in zip(vec1, vec2))
norm1 = (sum(x * x for x in vec1)) ** 0.5
norm2 = (sum(x * x for x in vec2)) ** 0.5
⋮----
"""Convert namespace tuple to text string with proper escaping.
    Args:
        namespace: Tuple of strings representing namespace components
        handle_wildcards: Whether to handle wildcard characters specially
    Returns:
        Properly escaped string representation of namespace
    """
⋮----
namespace = tuple("%" if val == "*" else val for val in namespace)
# First join with dots
ns_text = _token_escaper.escape(".".join(namespace))
⋮----
def _decode_ns(ns: str) -> tuple[str, ...]
⋮----
"""Convert a dotted namespace string back into a tuple."""
⋮----
def _row_to_item(namespace: tuple[str, ...], row: dict[str, Any]) -> Item
⋮----
"""Convert a row from Redis to an Item."""
⋮----
"""Convert a row from Redis to a SearchItem."""
⋮----
def _group_ops(ops: Iterable[Op]) -> tuple[dict[type, list[tuple[int, Op]]], int]
⋮----
"""Group operations by type for batch processing."""
grouped_ops: dict[type, list[tuple[int, Op]]] = defaultdict(list)
tot = 0

================
File: langgraph/store/redis/token_unescaper.py
================
class TokenUnescaper
⋮----
"""Unescape previously escaped punctuation within an input string.
    Handles unescaping of RediSearch escaped characters. Should be used to unescape
    strings that were previously escaped using TokenEscaper.
    """
# Pattern to match escaped characters (backslash followed by any character)
DEFAULT_UNESCAPED_PATTERN = r"\\(.)"
def __init__(self, unescape_pattern: Optional[Pattern] = None)
def unescape(self, value: str) -> str
⋮----
"""Unescape a RedisSearch escaped string.
        Args:
            value: The string to unescape
        Returns:
            The unescaped string with backslash escapes removed
        Raises:
            TypeError: If input value is not a string
        """
⋮----
def unescape_symbol(match: Match[str]) -> str
⋮----
# Return just the character after the backslash

================
File: langgraph/store/redis/types.py
================
RedisClientType = TypeVar("RedisClientType", bound=Union[Redis, AsyncRedis])
IndexType = TypeVar("IndexType", bound=Union[SearchIndex, AsyncSearchIndex])

================
File: tests/conftest.py
================
VECTOR_TYPES = ["vector", "halfvec"]
⋮----
@pytest.fixture(autouse=True)
def set_tokenizers_parallelism()
⋮----
"""Disable tokenizers parallelism in tests to avoid deadlocks"""
⋮----
@pytest.fixture(scope="session", autouse=True)
def redis_container(request)
⋮----
"""
    If using xdist, create a unique Compose project for each xdist worker by
    setting COMPOSE_PROJECT_NAME. That prevents collisions on container/volume
    names.
    """
# In xdist, the config has "workerid" in workerinput
workerinput = getattr(request.config, "workerinput", {})
worker_id = workerinput.get("workerid", "master")
# Set the Compose project name so containers do not clash across workers
⋮----
compose = DockerCompose(
⋮----
# Ignore compose startup errors (e.g., existing containers)
⋮----
# Ignore compose stop errors
⋮----
@pytest.fixture(scope="session")
def redis_url(redis_container)
⋮----
"""
    Use the `DockerCompose` fixture to get host/port of the 'redis' service
    on container port 6379 (mapped to an ephemeral port on the host).
    """
⋮----
# Wait up to 15 seconds for the container to accept TCP connections.
deadline = time.time() + 15
⋮----
break  # Redis is accepting connections
⋮----
@pytest.fixture
async def async_client(redis_url)
⋮----
"""
    An async Redis client that uses the dynamic `redis_url`.
    """
⋮----
@pytest.fixture
def client(redis_url)
⋮----
"""
    A sync Redis client that uses the dynamic `redis_url`.
    """
conn = RedisConnectionFactory.get_redis_connection(redis_url)
⋮----
@pytest.fixture(autouse=True)
async def clear_redis(redis_url: str) -> None
⋮----
"""Clear Redis before each test."""
# Add a small delay to allow container to stabilize between tests
⋮----
client = Redis.from_url(redis_url)
⋮----
# Ignore clear_redis errors when Redis container is unavailable
⋮----
def pytest_addoption(parser: pytest.Parser) -> None
def pytest_configure(config: pytest.Config) -> None
⋮----
skip_api = pytest.mark.skip(

================
File: tests/docker-compose.yml
================
version: "3.9"
services:
  redis:
    image: "${REDIS_IMAGE}"
    ports:
      - target: 6379
        published: 0
        protocol: tcp
        mode: host
    environment:
      - "REDIS_ARGS=--save '' --appendonly no"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

================
File: tests/embed_test_utils.py
================
"""Embedding utilities for testing."""
⋮----
class CharacterEmbeddings(Embeddings)
⋮----
"""Simple character-frequency based embeddings using random projections."""
def __init__(self, dims: int = 50, seed: int = 42)
⋮----
"""Initialize with embedding dimensions and random seed."""
⋮----
# Create projection vector for each character lazily
⋮----
def _embed_one(self, text: str) -> list[float]
⋮----
"""Embed a single text."""
counts = Counter(text)
total = sum(counts.values())
⋮----
embedding = [0.0] * self.dims
⋮----
weight = count / total
char_proj = self._char_projections[char]
⋮----
norm = math.sqrt(sum(x * x for x in embedding))
⋮----
embedding = [x / norm for x in embedding]
⋮----
def embed_documents(self, texts: list[str]) -> list[list[float]]
⋮----
"""Embed a list of documents."""
⋮----
def embed_query(self, text: str) -> list[float]
⋮----
"""Embed a query string."""
⋮----
def __eq__(self, other: Any) -> bool
class AsyncCharacterEmbeddings(CharacterEmbeddings)
⋮----
"""Character-based embeddings with both sync and async methods for testing."""
async def aembed_documents(self, texts: list[str]) -> list[list[float]]
⋮----
"""Async version of embed_documents."""
⋮----
async def aembed_query(self, text: str) -> list[float]
⋮----
"""Async version of embed_query."""

================
File: tests/test_async_aget_tuple_checkpoint_id.py
================
"""Test for AsyncRedisSaver aget_tuple checkpoint_id issue (GitHub issue #64)."""
⋮----
@pytest.fixture
async def saver(redis_url: str) -> AsyncGenerator[AsyncRedisSaver, None]
⋮----
"""Async saver fixture for this test."""
saver = AsyncRedisSaver(redis_url)
⋮----
@pytest.mark.asyncio
async def test_aget_tuple_returns_correct_checkpoint_id(saver: AsyncRedisSaver)
⋮----
"""Test that aget_tuple returns the correct checkpoint_id when not specified in config.
    This test reproduces the issue described in GitHub issue #64 where AsyncRedisSaver
    aget_tuple was returning None for checkpoint_id while the sync version worked correctly.
    """
# Create a unique thread ID
thread_id = str(uuid.uuid4())
# Config with only thread_id and checkpoint_ns (no checkpoint_id)
runnable_config: RunnableConfig = {
# Put several checkpoints
checkpoint_ids = []
⋮----
checkpoint_id = str(run)
⋮----
# Get the tuple using the config without checkpoint_id
# This should return the latest checkpoint
get_tuple = await saver.aget_tuple(runnable_config)
# Verify the checkpoint_id is not None and matches the expected value
⋮----
returned_checkpoint_id = get_tuple.config["configurable"]["checkpoint_id"]
⋮----
# Since we're getting the latest checkpoint each time, it should be the current checkpoint_id
⋮----
@pytest.mark.asyncio
async def test_aget_tuple_with_explicit_checkpoint_id(saver: AsyncRedisSaver)
⋮----
"""Test that aget_tuple works correctly when checkpoint_id is explicitly provided."""
⋮----
# Test retrieving each checkpoint by explicit checkpoint_id
⋮----
config_with_id: RunnableConfig = {
get_tuple = await saver.aget_tuple(config_with_id)
⋮----
@pytest.mark.asyncio
async def test_aget_tuple_no_checkpoint_returns_none(saver: AsyncRedisSaver)
⋮----
"""Test that aget_tuple returns None when no checkpoint exists for the thread."""
# Use a thread ID that doesn't exist

================
File: tests/test_async_cluster_mode.py
================
"""Tests for Redis Cluster mode functionality with AsyncRedisStore."""
⋮----
RedisCluster as AsyncRedisCluster,  # Import actual for isinstance checks if needed by store
⋮----
# Override session-scoped redis_container fixture to prevent Docker operations and provide dummy host/port
class DummyCompose
⋮----
def get_service_host_and_port(self, service, port)
⋮----
# Return localhost and specified port for dummy usage
⋮----
@pytest.fixture(scope="session", autouse=True)
def redis_container()
⋮----
"""Override redis_container to use DummyCompose instead of real DockerCompose."""
⋮----
# Basic Mock for non-cluster async client
class AsyncMockRedis(AsyncRedis)
⋮----
def __init__(self, *args, **kwargs)
⋮----
# Add other attributes/methods to track if needed
def pipeline(self, transaction=True)
⋮----
# print(f"AsyncMockRedis.pipeline called with transaction={transaction}")
⋮----
mock_pipeline = AsyncMock()  # Use AsyncMock for awaitable methods
⋮----
# Mock json().get() behavior within pipeline
mock_json_pipeline = AsyncMock()
⋮----
async def expire(self, key, ttl)
⋮----
# print(f"AsyncMockRedis.expire called with key={key}, ttl={ttl}")
⋮----
async def delete(self, key)
async def ttl(self, key)
⋮----
return 3600  # Default TTL
def json(self)
⋮----
mock_json = AsyncMock()
⋮----
# Mock cluster method to simulate a non-cluster client
async def cluster(self, command, *args, **kwargs)
# Mock for cluster async client
class AsyncMockRedisCluster(
⋮----
):  # Inherit from real to pass isinstance checks in store
⋮----
# super().__init__ might be tricky to call if it requires actual cluster setup
# For mocking purposes, we often bypass the real __init__ or simplify it.
# If AsyncRedisCluster.__init__ is simple enough or can be called with None/mock args:
# try:
#     super().__init__(startup_nodes=None) # Example, adjust as needed
# except: # pylint: disable=bare-except
#     pass # Fallback if super().__init__ is problematic
⋮----
# Add required cluster attributes to prevent AttributeError
⋮----
# Mock the client_setinfo method that's called during setup
async def client_setinfo(self, *args, **kwargs)
# Mock execute_command to avoid cluster-specific execution
async def execute_command(self, *args, **kwargs)
⋮----
command = args[0] if args else ""
⋮----
# Add other command responses as needed
⋮----
# Mock module_list method for Redis modules check
async def module_list(self)
⋮----
# Return mock modules that satisfy the validation requirements
⋮----
# Mock pipeline to record calls and simulate async behavior
⋮----
# print(f"AsyncMockRedisCluster.pipeline called with transaction={transaction}")
⋮----
mock_pipeline = MagicMock()
⋮----
mock_json_pipeline = MagicMock()
⋮----
# print(f"AsyncMockRedisCluster.expire called with key={key}, ttl={ttl}")
⋮----
# Mock cluster method to simulate a cluster client
⋮----
@pytest.fixture
async def mock_async_redis_cluster_client(redis_url)
⋮----
# This fixture provides a mock that IS an instance of AsyncRedisCluster
# but with mocked methods for testing.
# For simplicity, we're not trying to fully initialize a real AsyncRedisCluster connection.
mock_client = AsyncMockRedisCluster(
⋮----
)  # host arg may be needed by parent
# If AsyncRedisStore relies on specific attributes from the client, mock them here:
# mock_client.connection_pool = AsyncMock()
⋮----
@pytest.fixture
async def mock_async_redis_client(redis_url)
⋮----
# This provides a mock non-cluster client
return AsyncMockRedis.from_url(redis_url)  # Standard way to get an async client
⋮----
"""Test that AsyncRedisStore behavior differs for cluster vs. non-cluster clients."""
async_cluster_store = AsyncRedisStore(redis_client=mock_async_redis_cluster_client)
mock_index_cluster = AsyncMock()
⋮----
mock_index_cluster.query = AsyncMock(return_value=[])  # For vector search mocks
mock_index_cluster.create = AsyncMock(return_value=None)  # For setup
⋮----
await async_cluster_store.setup()  # Call setup to initialize indices
⋮----
# --- Test with AsyncMockRedis (simulates non-cluster) ---
async_non_cluster_store = AsyncRedisStore(redis_client=mock_async_redis_client)
# Mock indices for async_non_cluster_store
mock_index_non_cluster = AsyncMock()
⋮----
@pytest.fixture(params=[False, True])
async def async_checkpoint_saver(request)
⋮----
"""Parameterized fixture for AsyncRedisSaver with regular or cluster client."""
is_cluster = request.param
client = AsyncMockRedisCluster() if is_cluster else AsyncMockRedis()
saver = AsyncRedisSaver(redis_client=client)
# Mock the search indices
⋮----
# Skip asetup() to avoid complex RedisVL index creation, just test cluster detection
⋮----
@pytest.mark.asyncio
async def test_async_checkpoint_saver_cluster_detection(async_checkpoint_saver)
⋮----
"""Test that async checkpoint saver cluster_mode is set correctly."""
is_client_cluster = isinstance(async_checkpoint_saver._redis, AsyncRedisCluster)
⋮----
@pytest.mark.asyncio
async def test_async_checkpoint_saver_aput_ttl_behavior(async_checkpoint_saver)
⋮----
"""Test TTL behavior in aput for async checkpoint saver in cluster vs. non-cluster mode."""
⋮----
client = async_checkpoint_saver._redis
⋮----
# Set up TTL config
⋮----
# Mock the JSON operations to avoid actual data operations
⋮----
# Create mock checkpoint and metadata
config = {
checkpoint: Checkpoint = {"channel_values": {}, "version": "1.0"}
metadata: CheckpointMetadata = {"source": "test", "step": 1}
new_versions = {}
# Call aput which should trigger TTL operations
⋮----
# In cluster mode, TTL operations should be called directly
assert len(client.expire_calls) >= 1  # At least one TTL call for the checkpoint
# Check that expire was called with correct TTL (5 minutes = 300 seconds)
ttl_calls = [call for call in client.expire_calls if call.get("ttl") == 300]
⋮----
# In non-cluster mode, pipeline should be used for TTL operations
⋮----
# Should have pipeline calls for the main operations and potentially TTL operations
⋮----
@pytest.mark.asyncio
async def test_async_checkpoint_saver_delete_thread_behavior(async_checkpoint_saver)
⋮----
"""Test delete_thread behavior for async checkpoint saver in cluster vs. non-cluster mode."""
⋮----
# Mock search results to simulate existing data
mock_checkpoint_doc = MagicMock()
⋮----
mock_blob_doc = MagicMock()
⋮----
mock_write_doc = MagicMock()
⋮----
# In cluster mode, delete operations should be called directly
assert len(client.delete_calls) > 0  # At least one checkpoint key deletion
# Pipeline should not be used for deletions in cluster mode
# (it might be called for other reasons but not for delete operations)
⋮----
# In non-cluster mode, pipeline should be used for deletions
assert len(client.pipeline_calls) > 0  # At least one pipeline used
# Direct delete calls should not be made in non-cluster mode

================
File: tests/test_async_search_limit.py
================
"""Tests for AsyncRedisStore search limits."""
⋮----
@pytest_asyncio.fixture(scope="function")
async def async_store(redis_url) -> AsyncRedisStore
⋮----
"""Fixture to create an AsyncRedisStore."""
⋮----
await store.setup()  # Initialize indices
⋮----
@pytest.mark.asyncio
async def test_async_search_with_larger_limit(async_store: AsyncRedisStore) -> None
⋮----
"""Test async search with limit > 10."""
# Create 15 test documents
⋮----
# Search with a limit of 15
results = await async_store.asearch(("test_namespace",), limit=15)
# Should return all 15 results
⋮----
# Verify we have all the items
result_keys = {item.key for item in results}
expected_keys = {f"key{i}" for i in range(15)}
⋮----
@pytest.mark.asyncio
async def test_async_vector_search_with_larger_limit(redis_url) -> None
⋮----
"""Test async vector search with limit > 10."""
⋮----
# Create vector store with embeddings
embeddings = CharacterEmbeddings(dims=4)
index_config = {
⋮----
# Create 15 test documents
⋮----
# Create documents with slightly different texts
⋮----
# Search with a limit of 15
results = await store.asearch(("test_namespace",), query="sample", limit=15)
# Should return all 15 results
⋮----
# Verify we have all the items

================
File: tests/test_async_store.py
================
"""Tests for AsyncRedisStore."""
⋮----
TTL_SECONDS = 2
TTL_MINUTES = TTL_SECONDS / 60
⋮----
@pytest.fixture
def fake_embeddings() -> CharacterEmbeddings
⋮----
"""Create test embeddings for vector search."""
⋮----
@pytest.fixture(scope="function")
async def store(redis_url) -> AsyncIterator[AsyncRedisStore]
⋮----
"""Create an async Redis store with TTL enabled."""
ttl_config = {
⋮----
await store.setup()  # Initialize indices
⋮----
"""Create an async Redis store with vector search capabilities."""
vector_type = request.param
distance_type = "cosine"
# Include fields parameter in index_config
index_config = {
⋮----
"fields": ["text"],  # Field to embed
⋮----
ttl_config = {"default_ttl": 2, "refresh_on_read": True}
# Create a unique index name for each test run
unique_id = str(uuid4())[:8]
# Use different Redis prefix for vector store tests to avoid conflicts
⋮----
@pytest.mark.asyncio
async def test_basic_ops(store: AsyncRedisStore) -> None
⋮----
"""Test basic CRUD operations with async store."""
namespace = ("test", "documents")
item_id = "doc1"
item_value = {"title": "Test Document", "content": "Hello, World!"}
⋮----
item = await store.aget(namespace, item_id)
⋮----
# Test update
updated_value = {"title": "Updated Document", "content": "Hello, Updated!"}
⋮----
updated_item = await store.aget(namespace, item_id)
⋮----
# Test non-existent namespace
different_namespace = ("test", "other_documents")
item_in_different_namespace = await store.aget(different_namespace, item_id)
⋮----
# Test delete
⋮----
deleted_item = await store.aget(namespace, item_id)
⋮----
@pytest.mark.asyncio
async def test_search(store: AsyncRedisStore) -> None
⋮----
"""Test search functionality with async store."""
# Create test data
test_data = [
⋮----
# Test basic search
all_items = await store.asearch(["test"])
⋮----
# Test namespace filtering
docs_items = await store.asearch(["test", "docs"])
⋮----
# Test value filtering
alice_items = await store.asearch(["test"], filter={"author": "Alice"})
⋮----
# Test pagination
paginated_items = await store.asearch(["test"], limit=2)
⋮----
offset_items = await store.asearch(["test"], offset=2)
⋮----
# Cleanup
⋮----
@pytest.mark.asyncio
async def test_batch_put_ops(store: AsyncRedisStore) -> None
⋮----
"""Test batch put operations with async store."""
ops = [
⋮----
PutOp(namespace=("test",), key="key3", value=None),  # Delete operation
⋮----
results = await store.abatch(ops)
⋮----
# Verify the puts worked
item1 = await store.aget(("test",), "key1")
item2 = await store.aget(("test",), "key2")
item3 = await store.aget(("test",), "key3")
⋮----
@pytest.mark.asyncio
async def test_batch_search_ops(store: AsyncRedisStore) -> None
⋮----
"""Test batch search operations with async store."""
# Setup test data
⋮----
# First search should find items with tag "a"
⋮----
# Second search should return first 2 items
⋮----
# Third search should only find items in test/foo namespace
⋮----
@pytest.mark.asyncio
async def test_batch_list_namespaces_ops(store: AsyncRedisStore) -> None
⋮----
"""Test batch list namespaces operations with async store."""
# Setup test data with various namespaces
⋮----
# First operation should list all namespaces
⋮----
# Second operation should only return namespaces up to depth 2
⋮----
@pytest.mark.asyncio
async def test_list_namespaces(store: AsyncRedisStore) -> None
⋮----
"""Test listing namespaces with async store."""
# Create test data with various namespaces
test_namespaces = [
# Insert test data
⋮----
# Test listing with various filters
all_namespaces = await store.alist_namespaces()
⋮----
# Test prefix filtering
test_prefix_namespaces = await store.alist_namespaces(prefix=["test"])
⋮----
# Test suffix filtering
public_namespaces = await store.alist_namespaces(suffix=["public"])
⋮----
# Test max depth
depth_2_namespaces = await store.alist_namespaces(max_depth=2)
⋮----
paginated_namespaces = await store.alist_namespaces(limit=3)
⋮----
@pytest.mark.asyncio
async def test_batch_order(store: AsyncRedisStore) -> None
⋮----
"""Test batch operations with async store.
    This test focuses on verifying that multiple operations can be executed
    successfully in a batch, rather than testing strict sequential ordering.
    """
namespace = ("test", "batch")
# First, put multiple items in a batch
put_ops = [
# Execute the batch of puts
put_results = await store.abatch(put_ops)
⋮----
# Then get multiple items in a batch
get_ops = [GetOp(namespace=namespace, key=f"key{i}") for i in range(5)]
# Execute the batch of gets
get_results = await store.abatch(get_ops)
⋮----
# Verify all items were retrieved correctly
⋮----
# Create additional items individually
namespace2 = ("test", "batch_mixed")
⋮----
# Now search for items in a separate operation
fruit_items = await store.asearch(namespace2, filter={"category": "fruit"})
⋮----
# Cleanup - delete all the items we created
⋮----
@pytest.mark.asyncio
async def test_vector_search(vector_store: AsyncRedisStore) -> None
⋮----
"""Test vector search functionality with async store."""
# Insert documents with text that can be embedded
docs = [
⋮----
# Search with query
results = await vector_store.asearch(("test",), query="longer text")
⋮----
# Doc2 and doc3 should be closer matches to "longer text"
doc_keys = [r.key for r in results]
⋮----
"""Test that updating items properly updates their embeddings with async store."""
⋮----
# Search for a term similar to doc1's content
results_initial = await vector_store.asearch(("test",), query="zany xylophone")
⋮----
initial_score = results_initial[0].score
# Update doc1 to be about dogs instead
⋮----
# The original query should now match doc1 less strongly
results_after = await vector_store.asearch(("test",), query="zany xylophone")
⋮----
after_score = next((r.score for r in results_after if r.key == "doc1"), None)
⋮----
# A dog-related query should now match doc1 more strongly
results_new = await vector_store.asearch(("test",), query="dogs text")
doc1_score = next((r.score for r in results_new if r.key == "doc1"), None)
⋮----
@pytest.mark.asyncio
async def test_large_batches(store: AsyncRedisStore) -> None
⋮----
"""Test large batch operations with async store."""
# Reduce number of operations for stability
N = 20  # Smaller number for async test to avoid timeouts
ops = []
# Add many put operations
⋮----
# Execute puts first to make sure data exists before querying
put_results = await store.abatch(ops)
⋮----
# Create operations for gets, search, and list
get_ops = []
# Add get operations
⋮----
# Add search operations
⋮----
# Add list namespaces operations
⋮----
# Execute get, search, and list operations
⋮----
expected_results_len = N // 5 + N // 10 + 1
⋮----
# Verify gets (they should return Items)
⋮----
result = get_results[i]
⋮----
# Verify searches (they should return lists)
⋮----
# Verify list namespaces (it should return a list)
⋮----
@pytest.mark.asyncio
async def test_store_ttl(store: AsyncRedisStore) -> None
⋮----
"""Test TTL functionality in async Redis store."""
# Assumes a TTL of TTL_MINUTES
ns = ("foo",)
# Store an item with TTL
⋮----
# Check item exists and refresh TTL
res = await store.aget(ns, key="item1", refresh_ttl=True)
⋮----
# Search for the item with refresh
results = await store.asearch(ns, query="foo", refresh_ttl=True)
⋮----
# Do one more get without refreshing TTL
res = await store.aget(ns, key="item1", refresh_ttl=False)
⋮----
# Wait for the TTL to expire
⋮----
# Force a sweep to remove expired items
⋮----
# Verify item is gone due to TTL expiration
res = await store.asearch(ns, query="bar", refresh_ttl=False)
⋮----
@pytest.mark.asyncio
async def test_async_store_with_memory_persistence(redis_url: str) -> None
⋮----
"""Test basic persistence operations with Redis.
    This test verifies that data persists in Redis after
    creating a new store connection.
    """
# Create a unique namespace for this test
namespace = ("test", "persistence", str(uuid4()))
key = "persisted_item"
value = {"data": "persist_me", "timestamp": time.time()}
# First store instance - write data
⋮----
# Verify the data was written
item = await store1.aget(namespace, key)
⋮----
# Use approximate comparison for floating point values
⋮----
# Second store instance - verify data persisted
⋮----
# Read the item with the new store instance
persisted_item = await store2.aget(namespace, key)
⋮----
# Cleanup
⋮----
@pytest.mark.asyncio
async def test_async_redis_store_client_info(redis_url: str, monkeypatch) -> None
⋮----
"""Test that AsyncRedisStore sets client info correctly."""
⋮----
# Expected client info format
expected_client_info = f"redis-py(redisvl_v{__redisvl_version__})"
# Track if client_setinfo was called with the right parameters
client_info_called = False
# Store the original method
original_client_setinfo = Redis.client_setinfo
# Create a mock function for client_setinfo
async def mock_client_setinfo(self, key, value)
⋮----
# Note: RedisVL might call this with its own lib name first
# We only track calls with our full lib name
⋮----
client_info_called = True
# Call original method to ensure normal function
⋮----
# Apply the mock
⋮----
# Test client info setting when creating a new async store
⋮----
# Verify client_setinfo was called with our library info
⋮----
"""Test that AsyncRedisStore falls back to echo when client_setinfo is not available."""
⋮----
# Remove client_setinfo to simulate older Redis version
⋮----
# Track if echo was called as fallback
echo_called = False
original_echo = Redis.echo
# Create mock for echo
async def mock_echo(self, message)
⋮----
echo_called = True
⋮----
# Apply the mocks
⋮----
# Test client info setting with fallback
⋮----
# Verify echo was called as fallback
⋮----
@pytest.mark.asyncio
async def test_async_redis_store_graceful_failure(redis_url: str, monkeypatch) -> None
⋮----
"""Test that async store client info setting fails gracefully when all methods fail."""
⋮----
# Create a patch for the RedisVL validation to avoid it using echo
⋮----
original_validate = RedisConnectionFactory.validate_async_redis
# Create a replacement validation function that doesn't use echo
async def mock_validate(redis_client, lib_name=None)
# Apply the validation mock first to prevent echo from being called by RedisVL
⋮----
# Simulate failures for both methods
⋮----
# Apply the Redis mocks
⋮----
# Should not raise any exceptions when both methods fail

================
File: tests/test_async.py
================
"""Tests for AsyncRedisSaver."""
⋮----
@pytest.fixture
async def test_data() -> Dict[str, Any]
⋮----
"""Test data fixture."""
config_1: RunnableConfig = {
config_2: RunnableConfig = {
config_3: RunnableConfig = {
chkpnt_1: Checkpoint = empty_checkpoint()
chkpnt_2: Checkpoint = create_checkpoint(chkpnt_1, {}, 1)
chkpnt_3: Checkpoint = empty_checkpoint()
metadata_1: CheckpointMetadata = {
metadata_2: CheckpointMetadata = {
metadata_3: CheckpointMetadata = {
⋮----
@pytest.fixture
async def saver(redis_url: str) -> AsyncGenerator[AsyncRedisSaver, None]
⋮----
"""Async saver fixture."""
saver = AsyncRedisSaver(redis_url)
⋮----
({"source": "input"}, 1),  # Matches metadata.source
({"step": 1}, 1),  # Matches metadata.step
({}, 3),  # Retrieve all checkpoints
({"source": "update"}, 0),  # No matches
⋮----
"""Test search functionality with different queries."""
configs = test_data["configs"]
checkpoints = test_data["checkpoints"]
metadata = test_data["metadata"]
# Save test data
⋮----
# Execute search
search_results = [c async for c in saver.alist(None, filter=query)]
⋮----
("source", "\x00abc"),  # Null character in value
⋮----
config = await saver.aput(
⋮----
{key: value},  # type: ignore[misc]
⋮----
result = await saver.aget_tuple(config)
⋮----
sanitized_value = value.replace("\x00", "")
assert result.metadata[key] == sanitized_value  # type: ignore[literal-required]
⋮----
@pytest.mark.asyncio
async def test_put_writes_async(redis_url: str, test_data: Dict[str, Any]) -> None
⋮----
"""Test storing writes in Redis asynchronously."""
⋮----
config = test_data["configs"][0]
checkpoint = test_data["checkpoints"][0]
metadata = test_data["metadata"][0]
# First store a checkpoint
saved_config = await saver.aput(config, checkpoint, metadata, {})
# Test regular writes
writes = [("channel1", "value1"), ("channel2", "value2")]
task_id = "task1"
⋮----
# Test special writes (using WRITES_IDX_MAP)
special_writes = [("__error__", "error_value"), ("channel3", "value3")]
task_id2 = "task2"
⋮----
# Verify writes through get_tuple
result = await saver.aget_tuple(saved_config)
⋮----
pending_writes = result.pending_writes
⋮----
# Verify regular writes
found_writes = {(w[1], w[2]) for w in pending_writes}
⋮----
# Verify special writes
⋮----
"""Test concurrent writes to Redis."""
⋮----
# Create multiple write operations
tasks = []
⋮----
writes = [(f"channel{i}", f"value{i}")]
⋮----
# Execute writes concurrently
⋮----
# Verify all writes were stored
⋮----
# Verify each write was stored
⋮----
@pytest.mark.asyncio
async def test_from_conn_string_with_url(redis_url: str) -> None
⋮----
"""Test creating an AsyncRedisSaver with a connection URL."""
⋮----
# Verify connection works by creating and checking a key
⋮----
value = await saver._redis.get("test_key")
⋮----
@pytest.mark.asyncio
async def test_from_conn_string_with_client(redis_url: str) -> None
⋮----
"""Test creating an AsyncRedisSaver with an existing Redis client."""
client = Redis.from_url(redis_url)
⋮----
# Verify connection works
⋮----
value = await saver._redis.get("test_key2")
⋮----
await client.aclose()  # type: ignore[attr-defined]
⋮----
@pytest.mark.asyncio
async def test_from_conn_string_with_connection_args(redis_url: str) -> None
⋮----
"""Test creating an AsyncRedisSaver with connection arguments."""
⋮----
# Test with decode_responses=True, so we get str instead of bytes
⋮----
value = await saver._redis.get("test_key3")
assert isinstance(value, str)  # not bytes
⋮----
@pytest.mark.asyncio
async def test_from_conn_string_cleanup(redis_url: str) -> None
⋮----
"""Test proper cleanup of Redis connections."""
# When creating from URL
client = None
saver = None
⋮----
saver = s
client = s._redis
assert await client.ping()  # Connection works
# When passing external client, should not close it
ext_client = Redis.from_url(redis_url)
⋮----
client = saver._redis
⋮----
assert await ext_client.ping()  # Should still work
⋮----
await ext_client.aclose()  # type: ignore[attr-defined]
⋮----
@pytest.mark.asyncio
async def test_async_client_info_setting(redis_url: str, monkeypatch) -> None
⋮----
"""Test that async client_setinfo is called with correct library information."""
⋮----
# Expected client info format
expected_client_info = f"redis-py(redisvl_v{__redisvl_version__})"
# Track if client_setinfo was called with the right parameters
client_info_called = False
# Store the original method
original_client_setinfo = Redis.client_setinfo
# Create a mock function for client_setinfo
async def mock_client_setinfo(self, key, value)
⋮----
# Note: RedisVL might call this with its own lib name first
# We only track calls with our full lib name
⋮----
client_info_called = True
# Call original method to ensure normal function
⋮----
# Apply the mock
⋮----
# Test client info setting when creating a new saver with async context manager
⋮----
# __aenter__ should have called aset_client_info
# Verify client_setinfo was called with our library info
⋮----
@pytest.mark.asyncio
async def test_async_client_info_fallback_to_echo(redis_url: str, monkeypatch) -> None
⋮----
"""Test that async client_setinfo falls back to echo when not available."""
⋮----
# Remove client_setinfo to simulate older Redis version
⋮----
# Track if echo was called as fallback
echo_called = False
original_echo = Redis.echo
# Create mock for echo
async def mock_echo(self, message)
⋮----
echo_called = True
⋮----
# Apply the mocks
⋮----
# Test client info setting with fallback
⋮----
# __aenter__ should have called aset_client_info with fallback to echo
# Verify echo was called as fallback
⋮----
@pytest.mark.asyncio
async def test_async_client_info_graceful_failure(redis_url: str, monkeypatch) -> None
⋮----
"""Test that async client info setting fails gracefully when all methods fail."""
⋮----
# Create a patch for the RedisVL validation to avoid it using echo
⋮----
original_validate = RedisConnectionFactory.validate_async_redis
# Create a replacement validation function that doesn't use echo
async def mock_validate(redis_client, lib_name=None)
# Apply the validation mock first to prevent echo from being called by RedisVL
⋮----
# Simulate failures for both methods
⋮----
# Apply the Redis mocks
⋮----
# Should not raise any exceptions when both methods fail
⋮----
# __aenter__ should handle failures gracefully
⋮----
@pytest.mark.asyncio
async def test_from_conn_string_errors() -> None
⋮----
"""Test error conditions for from_conn_string."""
# Test with neither URL nor client provided
⋮----
# Test with empty URL - should fail
⋮----
# Test with invalid connection URL
⋮----
# Test with non-functional client
client = Redis.from_url("redis://nonexistent:6379")
⋮----
"""Test that writes are properly stored in Redis JSON format."""
⋮----
# First store a checkpoint to get proper config
⋮----
writes = [("channel1", "value1")]
⋮----
# Store write
⋮----
# Verify JSON structure directly
thread_id = saved_config["configurable"]["thread_id"]
checkpoint_ns = saved_config["configurable"].get("checkpoint_ns", "")
checkpoint_id = saved_config["configurable"]["checkpoint_id"]
⋮----
write_key = BaseRedisSaver._make_redis_checkpoint_writes_key(
# Get raw JSON
json_data = await saver._redis.json().get(write_key)
# Verify structure
⋮----
@pytest.mark.asyncio
async def test_search_writes_async(redis_url: str) -> None
⋮----
"""Test searching writes using Redis Search."""
⋮----
# Set up test data with proper typing
config: RunnableConfig = {
checkpoint = empty_checkpoint()
metadata: CheckpointMetadata = {"source": "test", "step": 1, "writes": {}}
# Store checkpoint to get proper config
⋮----
# Add writes for multiple channels
writes1 = [("channel1", "value1"), ("channel2", "value2")]
⋮----
writes2 = [("channel1", "value3")]
⋮----
# Search by channel
query = "(@channel:{channel1})"
results = await saver.checkpoint_writes_index.search(query)
assert len(results.docs) == 2  # One document per channel1 writes
doc1 = json.loads(results.docs[0].json)
doc2 = json.loads(results.docs[1].json)
⋮----
# Search by task
query = "(@task_id:{task1})"
⋮----
# Search by thread/namespace
query = "(@thread_id:{thread1} @checkpoint_ns:{ns1})"
⋮----
assert len(results.docs) == 3  # Contains all three writes
⋮----
doc3 = json.loads(results.docs[2].json)
⋮----
@pytest.mark.asyncio
async def test_no_running_loop(redis_url: str, test_data: dict[str, Any]) -> None
⋮----
"""Test that sync operations raise error when called from async loop."""
⋮----
saver.loop = asyncio.get_running_loop()  # Set the loop explicitly
# Test get_tuple which has the explicit check
⋮----
# Other sync operations from background threads should work
⋮----
future = pool.submit(
result = await asyncio.wrap_future(future)
⋮----
@pytest.mark.asyncio
async def test_large_batches(redis_url: str, test_data: dict[str, Any]) -> None
⋮----
"""Test handling large numbers of operations with thread pool."""
⋮----
N = 1000
M = 5
⋮----
futures = []
⋮----
# Create config and cast to RunnableConfig type
test_config: RunnableConfig = {
⋮----
results = await asyncio.gather(
⋮----
@pytest.mark.asyncio
async def test_large_batches_async(redis_url: str, test_data: dict[str, Any]) -> None
⋮----
"""Test handling large numbers of async operations."""
⋮----
M = 2
# Store configs and their responses
stored_configs = []
coros = []
⋮----
put_results = await asyncio.gather(*coros)
⋮----
# Verify we can retrieve using the configs returned from put
verify_coros = []
⋮----
verify_results = await asyncio.gather(*verify_coros)
⋮----
@tool
def get_weather(city: Literal["nyc", "sf"]) -> str
⋮----
"""Use this to get weather information."""
⋮----
@pytest.fixture
def tools() -> List[BaseTool]
⋮----
@pytest.fixture
def mock_llm() -> Any
⋮----
"""Create a mock LLM for testing without requiring API keys."""
⋮----
# Create a mock that can be used in place of a real LLM
mock = MagicMock()
⋮----
@pytest.fixture
def mock_agent() -> Any
⋮----
"""Create a mock agent that creates checkpoints without requiring a real LLM."""
⋮----
# Create a mock agent that returns a dummy response
⋮----
# Set the ainvoke method to also create a fake chat session
async def mock_ainvoke(messages, config)
⋮----
# Return a dummy response that mimics a chat conversation
⋮----
"""Test AsyncRedisSaver checkpoint functionality using a mock agent."""
⋮----
# Use the mock agent instead of creating a real one
graph = mock_agent
# Use a unique thread_id
thread_id = f"test-{uuid4()}"
# Test initial query
⋮----
# Create a checkpoint manually to simulate what would happen during agent execution
checkpoint = {
# Store the checkpoint
next_config = await checkpointer.aput(
# Verify next_config has the right structure
⋮----
# Test checkpoint retrieval
latest = await checkpointer.aget(config)
⋮----
# Test checkpoint tuple
tuple_result = await checkpointer.aget_tuple(config)
⋮----
# Test listing checkpoints
checkpoints = [c async for c in checkpointer.alist(config)]
⋮----
"""
    A regression test for a bug where queries for checkpoints from the
    root graph were failing to find valid checkpoints. When called from
    a root graph, the `checkpoint_id` and `checkpoint_ns` keys are not
    in the config object.
    """
⋮----
thread_id = f"root-graph-{uuid4()}"
# Create a config with checkpoint_id and checkpoint_ns
# For a root graph test, we need to add an empty checkpoint_ns
# since that's how real root graphs work
⋮----
"checkpoint_ns": "",  # Empty string is valid
⋮----
# Verify the checkpoint was stored
⋮----
# Test retrieving the checkpoint with a root graph config
# that doesn't have checkpoint_id or checkpoint_ns
⋮----
# This is the key test - verify we can retrieve checkpoints
# when called from a root graph configuration
⋮----
)  # Initial + LLM + Tool + Final

================
File: tests/test_checkpoint_ttl.py
================
"""Tests for TTL functionality with RedisSaver."""
⋮----
class State(TypedDict)
⋮----
"""Simple state with count."""
count: int
⋮----
@pytest.fixture(scope="function")
def redis_url(redis_container) -> str
⋮----
"""Get the Redis URL from the container."""
⋮----
@pytest.fixture(scope="function")
def redis_client(redis_url: str) -> Generator[Redis, None, None]
⋮----
"""Create a Redis client for testing."""
client = Redis.from_url(redis_url)
⋮----
# Clean up any test keys
keys = client.keys("checkpoint:test_ttl*")
⋮----
@pytest.fixture(scope="function")
def ttl_checkpoint_saver(redis_client: Redis) -> Generator[RedisSaver, None, None]
⋮----
"""Create a RedisSaver instance with TTL support."""
saver = RedisSaver(
⋮----
},  # 0.1 minutes = 6 seconds TTL
⋮----
def test_ttl_config_in_constructor(redis_client: Redis) -> None
⋮----
"""Test that TTL config can be passed through constructor."""
⋮----
def test_checkpoint_expires(redis_client: Redis) -> None
⋮----
"""Test that a checkpoint expires after the TTL period."""
⋮----
# Create unique identifiers to avoid test collisions
unique_prefix = f"expires_test_{int(time.time())}"
# Create a saver with TTL
ttl_checkpoint_saver = RedisSaver(
⋮----
"default_ttl": 0.1,  # 0.1 minutes = 6 seconds TTL
⋮----
# Create a checkpoint with unique thread ID
thread_id = f"{unique_prefix}_thread"
checkpoint_ns = f"{unique_prefix}_ns"
checkpoint_id = f"{unique_prefix}_checkpoint"
config: RunnableConfig = {
checkpoint: Checkpoint = {
metadata: CheckpointMetadata = {
# Save the checkpoint (with default TTL of 0.1 minutes = 6 seconds)
⋮----
# Verify checkpoint exists immediately after creation
initial_result = ttl_checkpoint_saver.get_tuple(config)
⋮----
# Wait for TTL to expire (plus a small buffer)
time.sleep(7)  # 7 seconds > 6 seconds TTL
# Verify checkpoint no longer exists
result = ttl_checkpoint_saver.get_tuple(config)
⋮----
# Clean up
keys = redis_client.keys(f"checkpoint:*{thread_id}*")
⋮----
# Do not close the client as it's provided by the fixture
def test_ttl_refresh_on_read(redis_client: Redis) -> None
⋮----
"""Test that TTL is refreshed when reading a checkpoint if refresh_on_read is enabled."""
⋮----
unique_prefix = f"refresh_test_{int(time.time())}"
# Create a saver with TTL and refresh_on_read enabled
⋮----
# Wait for 3 seconds (less than TTL)
⋮----
# Read the checkpoint (should refresh TTL)
⋮----
# Wait another 2 seconds (would be 5 seconds total, less than original TTL)
⋮----
# Wait extra time to account for any test delays
⋮----
# Checkpoint should still exist because TTL was refreshed
⋮----
# Wait for TTL to expire again
⋮----
def test_put_writes_with_ttl(redis_client: Redis) -> None
⋮----
"""Test that writes also expire with TTL."""
⋮----
unique_prefix = f"writes_test_{int(time.time())}"
⋮----
# Create some writes
⋮----
# Verify writes exist immediately after creation
initial_writes = ttl_checkpoint_saver._load_pending_writes(
⋮----
# Wait for TTL to expire
⋮----
# Verify writes no longer exist
writes = ttl_checkpoint_saver._load_pending_writes(
⋮----
def test_no_ttl_when_not_configured(redis_client: Redis) -> None
⋮----
"""Test that keys don't expire when TTL is not configured."""
⋮----
unique_prefix = f"no_ttl_test_{int(time.time())}"
# Create a saver without TTL
saver = RedisSaver(redis_client=redis_client)
⋮----
# Save the checkpoint (no TTL configured)
⋮----
initial_result = saver.get_tuple(config)
⋮----
# Wait for the same amount of time that would cause TTL expiration
⋮----
# Verify checkpoint still exists
result = saver.get_tuple(config)
⋮----
def test_simple_graph_with_ttl(redis_client: Redis) -> None
⋮----
"""Test a simple graph with TTL configuration."""
# Use an isolated Redis client to prevent interference from parallel tests
unique_prefix = f"graph_test_{int(time.time())}"
⋮----
def add_one(state)
⋮----
"""Add one to the state."""
⋮----
# Define a simple graph
builder = StateGraph(State)
⋮----
# Create a checkpointer with TTL
⋮----
ttl={"default_ttl": 0.1, "refresh_on_read": True},  # 6 seconds TTL
⋮----
# Compile the graph with the checkpointer
graph = builder.compile(checkpointer=checkpointer)
# Use the graph with a specific thread_id
config = {"configurable": {"thread_id": thread_id}}
# Initial run
result = graph.invoke({"count": 0}, config=config)
⋮----
# Run again immediately - should continue from checkpoint
result = graph.invoke({}, config=config)
⋮----
# Wait for TTL to expire
time.sleep(7)  # Wait longer than the 6 second TTL
# Run again - should start from beginning since checkpoint expired

================
File: tests/test_cluster_mode.py
================
"""Tests for RedisStore Redis Cluster mode functionality."""
⋮----
# Override session-scoped redis_container fixture to prevent Docker operations and provide dummy host/port
class DummyCompose
⋮----
def get_service_host_and_port(self, service, port)
⋮----
# Return localhost and default port for dummy usage
⋮----
@pytest.fixture(scope="session", autouse=True)
def redis_container()
⋮----
"""Override redis_container to use DummyCompose instead of real DockerCompose."""
⋮----
# Synchronous Mock Redis Clients
class BaseMockRedis
⋮----
def __init__(self, *args, **kwargs)
⋮----
# Do not call super().__init__ to avoid real connection
⋮----
# Pipeline mock
⋮----
def pipeline(self, transaction=True)
def expire(self, key, ttl)
def connection_pool(self)
def delete(self, *keys)
def ttl(self, key)
def json(self)
⋮----
json_mock = MagicMock()
⋮----
def cluster(self, subcmd: str, *args, **kwargs)
class MockRedis(BaseMockRedis, Redis)
class MockRedisCluster(BaseMockRedis, SyncRedisCluster)
⋮----
# Do not call super().__init__ from SyncRedisCluster
⋮----
@pytest.fixture(params=[False, True])
def store(request)
⋮----
"""Parameterized fixture for RedisStore with regular or cluster client."""
is_cluster = request.param
client = MockRedisCluster() if is_cluster else MockRedis()
# Basic IndexConfig, embeddings won't be used in these tests
index_config = {
store = RedisStore(conn=client, index=index_config)  # type: ignore
# Mock the search indices
⋮----
def test_cluster_detection(store)
⋮----
"""Test that store.cluster_mode is set correctly."""
is_client_cluster = isinstance(store._redis, SyncRedisCluster)
⋮----
def test_apply_ttl_to_keys_behavior(store)
⋮----
"""Test _apply_ttl_to_keys behavior for cluster vs. non-cluster."""
client = store._redis
⋮----
main_key = "main:key"
related_keys = ["related:key1", "related:key2"]
ttl_minutes = 10.0
⋮----
def test_batch_get_ops_ttl_refresh(store)
⋮----
"""Test TTL refresh in _batch_get_ops."""
⋮----
op_idx = 0
doc_id = str(ULID())
store_doc_id = f"{STORE_PREFIX}{REDIS_KEY_SEPARATOR}{doc_id}"
# Mock store_index.search to return a document
mock_doc_data = {
mock_redis_doc = MagicMock()
⋮----
# Mock client.ttl to control TTL refresh logic
⋮----
get_ops = [
results = [None]
⋮----
def test_batch_put_ops_pre_delete_behavior(store)
⋮----
"""Test pre-delete behavior in _batch_put_ops."""
⋮----
doc_id_to_delete = f"{STORE_PREFIX}{REDIS_KEY_SEPARATOR}{str(ULID())}"
vector_doc_id_to_delete = f"{STORE_VECTOR_PREFIX}{REDIS_KEY_SEPARATOR}{str(ULID())}"
# Mock store_index.search to return a document that needs to be deleted
mock_store_doc = MagicMock(id=doc_id_to_delete)
⋮----
# Mock vector_index.search if index_config is present
⋮----
mock_vector_doc = MagicMock(id=vector_doc_id_to_delete)
⋮----
put_ops = [
⋮----
def test_batch_search_ops_vector_fetch_behavior(store)
⋮----
"""Test fetching store docs after vector search in _batch_search_ops."""
⋮----
mock_vector_doc_id = str(ULID())
mock_vector_result_doc = MagicMock()
⋮----
expected_store_key = f"{STORE_PREFIX}{REDIS_KEY_SEPARATOR}{mock_vector_doc_id}"
mock_store_data_search = {
mock_json = MagicMock(get=MagicMock(return_value=mock_store_data_search))
⋮----
search_ops = [
⋮----
def test_batch_list_namespaces_ops_behavior(store)
⋮----
"""Test listing namespaces in _batch_list_namespaces_ops."""
mock_doc1 = MagicMock(prefix="test.documents.public")
mock_doc2 = MagicMock(prefix="test.documents.private")
mock_doc3 = MagicMock(prefix="test.images.public")
mock_doc4 = MagicMock(prefix="prod.documents.public")
mock_search_result = MagicMock(docs=[mock_doc1, mock_doc2, mock_doc3, mock_doc4])
⋮----
list_ops = [
results: list[Any] = [None, None]
⋮----
# Verify results for full depth
⋮----
# Verify results for depth 2
⋮----
@pytest.fixture(params=[False, True])
def checkpoint_saver(request)
⋮----
"""Parameterized fixture for RedisSaver with regular or cluster client."""
⋮----
saver = RedisSaver(redis_client=client)
⋮----
def test_checkpoint_saver_cluster_detection(checkpoint_saver)
⋮----
"""Test that checkpoint saver cluster_mode is set correctly."""
is_client_cluster = isinstance(checkpoint_saver._redis, SyncRedisCluster)
⋮----
def test_checkpoint_saver_ttl_behavior(checkpoint_saver)
⋮----
"""Test TTL behavior for checkpoint saver in cluster vs. non-cluster mode."""
client = checkpoint_saver._redis
⋮----
# Set up TTL config
⋮----
main_key = "checkpoint:test:key"
blob_keys = ["blob:key1", "blob:key2"]
⋮----
# In cluster mode, TTL operations should be called directly
⋮----
} in client.expire_calls  # 5 minutes = 300 seconds
⋮----
# Pipeline should not be used
⋮----
# In non-cluster mode, pipeline should be used
⋮----
# Direct expire calls should not be made
⋮----
def test_checkpoint_saver_delete_thread_behavior(checkpoint_saver)
⋮----
"""Test delete_thread behavior for checkpoint saver in cluster vs. non-cluster mode."""
⋮----
# Mock search results to simulate existing data
mock_checkpoint_doc = MagicMock()
⋮----
mock_blob_doc = MagicMock()
⋮----
mock_write_doc = MagicMock()
⋮----
# In cluster mode, delete operations should be called directly
⋮----
# Pipeline should not be used for deletions
⋮----
# In non-cluster mode, pipeline should be used for deletions
⋮----
# Direct delete calls should not be made

================
File: tests/test_crossslot_integration.py
================
"""Integration tests for CrossSlot error fix in checkpoint operations."""
⋮----
def test_checkpoint_operations_no_crossslot_errors(redis_url: str) -> None
⋮----
"""Test that checkpoint operations work without CrossSlot errors.
    This test verifies that the fix for using search indexes instead of keys()
    works correctly in a real Redis environment.
    """
# Create a saver
saver = RedisSaver(redis_url)
⋮----
# Create test data
thread_id = "test-thread-crossslot"
checkpoint_ns = "test-ns"
# Create checkpoints with unique IDs
checkpoint1 = create_checkpoint(empty_checkpoint(), {}, 1)
checkpoint2 = create_checkpoint(checkpoint1, {"messages": ["hello"]}, 2)
checkpoint3 = create_checkpoint(checkpoint2, {"messages": ["hello", "world"]}, 3)
# Create metadata
metadata1 = {"source": "input", "step": 1, "writes": {"task1": "value1"}}
metadata2 = {"source": "loop", "step": 2, "writes": {"task2": "value2"}}
metadata3 = {"source": "loop", "step": 3, "writes": {"task3": "value3"}}
# Put checkpoints with writes
config1 = {"configurable": {"thread_id": thread_id, "checkpoint_ns": checkpoint_ns}}
config2 = {"configurable": {"thread_id": thread_id, "checkpoint_ns": checkpoint_ns}}
config3 = {"configurable": {"thread_id": thread_id, "checkpoint_ns": checkpoint_ns}}
# Put checkpoints first to get configs with checkpoint_ids
saved_config1 = saver.put(config1, checkpoint1, metadata1, {})
saved_config2 = saver.put(config2, checkpoint2, metadata2, {})
saved_config3 = saver.put(config3, checkpoint3, metadata3, {})
# Add some pending writes using saved configs
⋮----
# Now test operations that previously used keys() and would fail in cluster mode
# Test 1: Load pending writes (uses _load_pending_writes)
# This should work without CrossSlot errors
tuple1 = saver.get_tuple(saved_config1)
⋮----
# Verify pending writes were loaded
⋮----
pending_channels = [w[1] for w in tuple1.pending_writes]
⋮----
# Test 2: Get tuple with TTL (uses get_tuple which searches for blob and write keys)
saver_with_ttl = RedisSaver(redis_url, ttl={"checkpoint": 3600})
⋮----
# Put a checkpoint with TTL
config_ttl = {
⋮----
# Get the checkpoint - this triggers TTL application which uses key searches
tuple_ttl = saver_with_ttl.get_tuple(config_ttl)
⋮----
# Test 3: List checkpoints - this should work without CrossSlot errors
# List returns only the latest checkpoint by default
checkpoints = list(saver.list(config1))
⋮----
# The latest checkpoint should have the pending writes from checkpoint1
latest_checkpoint = checkpoints[0]
⋮----
# The important part is that all these operations work without CrossSlot errors
# In a Redis cluster, the old keys() based approach would have failed by now
def test_subgraph_checkpoint_operations(redis_url: str) -> None
⋮----
"""Test checkpoint operations with subgraphs work without CrossSlot errors."""
⋮----
# Create nested namespace checkpoints
thread_id = "test-thread-subgraph"
# Parent checkpoint
parent_config = {
parent_checkpoint = empty_checkpoint()
parent_metadata = {"source": "input", "step": 1}
# Child checkpoint in subgraph
child_config = {
child_checkpoint = create_checkpoint(parent_checkpoint, {"subgraph": "data"}, 1)
child_metadata = {"source": "loop", "step": 1}
# Grandchild checkpoint in nested subgraph
grandchild_config = {
grandchild_checkpoint = create_checkpoint(child_checkpoint, {"nested": "data"}, 2)
grandchild_metadata = {"source": "loop", "step": 2}
# Put all checkpoints first to get saved configs
saved_parent_config = saver.put(
saved_child_config = saver.put(child_config, child_checkpoint, child_metadata, {})
saved_grandchild_config = saver.put(
# Put checkpoints with writes using saved configs
⋮----
# Test loading checkpoints with pending writes from different namespaces
parent_tuple = saver.get_tuple(parent_config)
⋮----
child_tuple = saver.get_tuple(child_config)
⋮----
grandchild_tuple = saver.get_tuple(grandchild_config)
⋮----
# List all checkpoints - should work without CrossSlot errors
all_checkpoints = list(saver.list({"configurable": {"thread_id": thread_id}}))

================
File: tests/test_decode_responses.py
================
"""Tests for Redis key decoding functionality."""
⋮----
def test_safely_decode_basic_types()
⋮----
"""Test safely_decode function with basic type inputs."""
# Test with bytes
⋮----
# Test with string
⋮----
# Test with None
⋮----
# Test with other types
⋮----
def test_safely_decode_nested_structures()
⋮----
"""Test safely_decode function with nested data structures."""
# Test with dictionary
⋮----
# Test with nested dictionary
nested_dict = {b"outer": {b"inner": b"value"}}
⋮----
# Test with list
⋮----
# Test with tuple
⋮----
# Test with set
decoded_set = safely_decode({b"item1", b"item2"})
⋮----
# Test with complex nested structure
complex_struct = {
decoded = safely_decode(complex_struct)
⋮----
@pytest.mark.parametrize("decode_responses", [True, False])
def test_safely_decode_with_redis(decode_responses: bool, redis_url)
⋮----
"""Test safely_decode function with actual Redis responses using TestContainers."""
r = Redis.from_url(redis_url, decode_responses=decode_responses)
⋮----
# Clean up before test to ensure a clean state
⋮----
# Set up test data
⋮----
# Test string value
string_val = r.get("test:string")
decoded_string = safely_decode(string_val)
⋮----
# Test hash value
hash_val = r.hgetall("test:hash")
decoded_hash = safely_decode(hash_val)
⋮----
# Test list value
list_val = r.lrange("test:list", 0, -1)
decoded_list = safely_decode(list_val)
⋮----
# Test set value
set_val = r.smembers("test:set")
decoded_set = safely_decode(set_val)
⋮----
# Test key fetching
keys = r.keys("test:*")
decoded_keys = safely_decode(keys)
⋮----
# Clean up after test
⋮----
def test_safely_decode_unicode_error_handling()
⋮----
"""Test safely_decode function with invalid UTF-8 bytes."""
# Create bytes that will cause UnicodeDecodeError
invalid_utf8 = b"\xff\xfe\xfd"
# Should return the original bytes if it can't be decoded
result = safely_decode(invalid_utf8)
⋮----
# Test with mixed valid and invalid in a complex structure
mixed = {
result = safely_decode(mixed)

================
File: tests/test_fix_verification.py
================
"""Final verification tests for Redis key parsing fixes.
This test specifically tests the key parsing fix that was causing issues in:
1. semantic-search.ipynb
2. subgraphs-manage-state.ipynb
3. subgraph-persistence.ipynb
"""
⋮----
# Test for the specific key parsing issue with extra components
def test_key_parsing_fix_handles_extra_components()
⋮----
"""Test that our fix for key parsing correctly handles keys with extra components."""
# Create various keys with different numbers of components
keys = [
⋮----
# Standard key with exactly 6 components (the original expected format)
⋮----
# Key with 7 components (would have failed before the fix)
⋮----
# Key with 8 components (would have failed before the fix)
⋮----
# Key with 9 components (would have failed before the fix)
⋮----
# Key with a common subgraph pattern (from subgraphs-manage-state.ipynb)
⋮----
# Key with a pattern seen in semantic-search.ipynb
⋮----
# Test each key with the _parse_redis_checkpoint_writes_key method
⋮----
# This would have raised a ValueError before the fix
result = BaseRedisSaver._parse_redis_checkpoint_writes_key(key)
# Verify that only the expected fields are present and have the right values
⋮----
# Check the extracted values match what we expect (only the first 6 components)
parts = key.split(REDIS_KEY_SEPARATOR)

================
File: tests/test_interruption.py
================
"""Tests for interruption handling in Redis checkpointers."""
⋮----
class InterruptionError(Exception)
⋮----
"""Error used to simulate an interruption during checkpoint operations."""
⋮----
class MockRedis(Redis)
⋮----
"""Mock Redis class that can simulate interruptions during operations."""
def __init__(self, real_redis: Redis, interrupt_on: str = None) -> None
⋮----
"""Initialize with a real Redis client and optional interruption point.
        Args:
            real_redis: The real Redis client to delegate to
            interrupt_on: Operation name to interrupt on (e.g., 'json().set', 'Pipeline.execute')
        """
# Copy connection info from real_redis to satisfy Redis base class
⋮----
def __getattribute__(self, name)
⋮----
"""Proxy attribute access to the real Redis client, but track operations."""
# For special attributes we've set in __init__, use the parent implementation
⋮----
# For Redis base class attributes
⋮----
attr = getattr(self.real_redis, name)
⋮----
# Fall back to parent class
⋮----
# For methods we want to potentially interrupt
⋮----
# Initialize counter for this operation if not exist
⋮----
async def wrapper(*args, **kwargs)
⋮----
# Increment operation count
⋮----
# Check if we should interrupt
⋮----
# Otherwise, call the real method
⋮----
# Special handling for pipeline to ensure we can intercept pipeline.execute()
⋮----
original_method = attr
def pipeline_wrapper(*args, **kwargs)
⋮----
pipeline = original_method(*args, **kwargs)
⋮----
# For Redis subsystems (like json())
⋮----
def subsystem_wrapper(*args, **kwargs)
⋮----
subsystem = original_method(*args, **kwargs)
⋮----
# For other attributes, return as is
⋮----
class MockRedisSubsystem
⋮----
"""Mock Redis subsystem (like json()) that can simulate interruptions."""
def __init__(self, real_subsystem, parent_mock)
def __getattr__(self, name)
⋮----
attr = getattr(self.real_subsystem, name)
⋮----
operation_name = f"{self.real_subsystem.__class__.__name__}.{name}"
⋮----
# For non-async methods
def sync_wrapper(*args, **kwargs)
⋮----
# Increment operation count
⋮----
# Check if we should interrupt
⋮----
# Otherwise, call the real method
⋮----
# Special handling for pipeline method to track operations within the pipeline
⋮----
# This is likely a pipeline execute method
async def execute_wrapper(*args, **kwargs)
⋮----
# Check if we should interrupt pipeline execution
⋮----
# Otherwise call the real execute
⋮----
"""Create a saver with a mock Redis client that can simulate interruptions.
    Args:
        redis_url: Redis connection URL
        saver_class: The saver class to instantiate (AsyncRedisSaver or AsyncShallowRedisSaver)
        interrupt_on: Operation to interrupt on
        interrupt_after_count: Number of operations to allow before interrupting
    Yields:
        A configured saver instance with interruptible Redis client
    """
# Create real Redis client
real_redis = Redis.from_url(redis_url)
# Create mock Redis client that will interrupt on specified operation
mock_redis = MockRedis(real_redis, interrupt_on)
⋮----
# Create saver with mock Redis
saver = saver_class(redis_client=mock_redis)
⋮----
# Close Redis client
⋮----
# Cleanup manually if __aexit__ doesn't exist
⋮----
"""Create test checkpoint data for the tests."""
thread_id = f"test-{uuid.uuid4()}"
checkpoint_id = str(uuid.uuid4())
config = {
checkpoint = {
metadata = {
new_versions = {"messages": "1"}
⋮----
"""Verify whether checkpoint data exists in Redis as expected."""
# Check if checkpoint data exists in Redis
keys = redis_client.keys(f"*{thread_id}*")
⋮----
# Check if specific checkpoint ID exists
⋮----
@pytest.mark.asyncio
async def test_aput_interruption_regular_saver(redis_url: str) -> None
⋮----
"""Test interruption during AsyncRedisSaver.aput operation."""
# Create test data
⋮----
thread_id = config["configurable"]["thread_id"]
checkpoint_id = checkpoint["id"]
# Create saver with interruption during pipeline execute
⋮----
# Try to save checkpoint, expect interruption
⋮----
# Verify that the checkpoint data is incomplete or inconsistent
⋮----
# Attempt to retrieve the checkpoint
result = await saver.aget(config)
# Either the result should be None or contain incomplete data
⋮----
@pytest.mark.asyncio
async def test_aput_interruption_shallow_saver(redis_url: str) -> None
⋮----
"""Test interruption during AsyncShallowRedisSaver.aput operation."""
⋮----
@pytest.mark.asyncio
async def test_aput_writes_interruption(redis_url: str) -> None
⋮----
"""Test interruption during aput_writes operation."""
⋮----
# Successfully save a checkpoint first
⋮----
next_config = await saver.aput(config, checkpoint, metadata, new_versions)
# Now create a saver that will interrupt during pipeline execution
mock_redis = MockRedis(saver._redis, "Pipeline.execute")
⋮----
# Replace the Redis client with our mock
original_redis = saver._redis
⋮----
# Try to save writes, expect interruption
⋮----
# Restore original Redis client to verify state
⋮----
# Verify that no writes were saved due to transaction abort
checkpoint_tuple = await saver.aget_tuple(next_config)
# Either there are no pending writes or they are not the ones we tried to save
⋮----
# Cleanup
⋮----
@pytest.mark.asyncio
async def test_recovery_after_interruption(redis_url: str) -> None
⋮----
"""Test whether checkpoint operations can recover after an interruption."""
⋮----
# Step 1: Try to save with interruption
⋮----
# Step 2: Try to save again with a new saver (simulate process restart after interruption)
⋮----
# Try to save the same checkpoint again
next_config = await new_saver.aput(config, checkpoint, metadata, new_versions)
# Verify the checkpoint was saved successfully
result = await new_saver.aget(config)
⋮----
# Clean up
⋮----
@pytest.mark.asyncio
async def test_graph_simulation_with_interruption(redis_url: str) -> None
⋮----
"""Test a more complete scenario simulating a graph execution with interruption."""
# Create a mock graph execution
⋮----
# Config without checkpoint_id to simulate first run
initial_config = {
# Create initial checkpoint
initial_checkpoint = {
# First save the initial checkpoint
⋮----
next_config = await saver.aput(
# Verify initial checkpoint was saved
initial_result = await saver.aget(initial_config)
⋮----
# Now prepare update with interruption
second_checkpoint = {
# Replace Redis client with mock that will interrupt
⋮----
mock_redis = MockRedis(original_redis, "Pipeline.execute")
⋮----
# Try to update, expect interruption
⋮----
# Restore original Redis for verification
⋮----
# Check checkpoint state - with transaction handling, we expect to see the initial checkpoint
# since the transaction should have been rolled back
current = await saver.aget(next_config)
# With transaction handling, we should still see the initial checkpoint

================
File: tests/test_issue_51_adelete_thread.py
================
"""Test for issue #51 - adelete_thread implementation."""
⋮----
@pytest.mark.asyncio
async def test_adelete_thread_implemented(redis_url)
⋮----
"""Test that adelete_thread method is now implemented in AsyncRedisSaver."""
⋮----
# Create a checkpoint
thread_id = "test-thread-to-delete"
config: RunnableConfig = {
checkpoint = Checkpoint(
# Store checkpoint
⋮----
# Verify checkpoint exists
result = await checkpointer.aget_tuple(config)
⋮----
# Delete the thread
⋮----
# Verify checkpoint is deleted
⋮----
def test_delete_thread_implemented(redis_url)
⋮----
"""Test that delete_thread method is now implemented in RedisSaver."""
⋮----
checkpointer.setup()  # Initialize Redis indices
⋮----
thread_id = "test-thread-to-delete-sync"
⋮----
result = checkpointer.get_tuple(config)
⋮----
@pytest.mark.asyncio
async def test_adelete_thread_comprehensive(redis_url)
⋮----
"""Comprehensive test for adelete_thread with multiple checkpoints and namespaces."""
⋮----
thread_id = "test-thread-comprehensive"
other_thread_id = "other-thread"
# Create multiple checkpoints for the thread
checkpoints_data = [
# Also create checkpoints for another thread that should not be deleted
other_checkpoints_data = [
# Store all checkpoints
⋮----
# Also add some writes
⋮----
# Store checkpoints for other thread
⋮----
# Verify all checkpoints exist
⋮----
# Verify other thread checkpoints exist
⋮----
# Verify all checkpoints for the thread are deleted
⋮----
# Verify other thread checkpoints still exist

================
File: tests/test_key_parsing.py
================
"""Tests for Redis key parsing in the BaseRedisSaver class."""
⋮----
def test_parse_redis_checkpoint_writes_key_with_exact_parts()
⋮----
"""Test parsing a Redis key with exactly 6 parts."""
# Create a key with exactly 6 parts
key = REDIS_KEY_SEPARATOR.join(
# Parse the key
result = BaseRedisSaver._parse_redis_checkpoint_writes_key(key)
# Verify the result
⋮----
def test_parse_redis_checkpoint_writes_key_with_extra_parts()
⋮----
"""Test parsing a Redis key with more than 6 parts."""
# Create a key with more than 6 parts
⋮----
# Verify the result - should only include the first 6 parts
⋮----
# Extra parts should be ignored
⋮----
def test_parse_redis_checkpoint_writes_key_with_insufficient_parts()
⋮----
"""Test parsing a Redis key with fewer than 6 parts."""
# Create a key with fewer than 6 parts
⋮----
# Parse the key - should raise ValueError
⋮----
def test_parse_redis_checkpoint_writes_key_with_incorrect_prefix()
⋮----
"""Test parsing a Redis key with an incorrect prefix."""
# Create a key with an incorrect prefix
⋮----
def test_parse_redis_checkpoint_writes_key_with_escaped_special_characters()
⋮----
"""Test parsing a Redis key with escaped special characters in the parts."""
# In practice, special characters would be escaped before creating the key
# This test makes sure the to_storage_safe_str function is being called
# Create a key with parts that don't contain the separator character

================
File: tests/test_numeric_version_fix.py
================
"""
Test for the fix to issue #40 - Fixing numeric version handling with Tag type.
"""
⋮----
@pytest.fixture(autouse=True)
async def clear_test_redis(redis_url: str) -> None
⋮----
"""Clear Redis before each test."""
client = Redis.from_url(redis_url)
⋮----
@contextmanager
def patched_redis_saver(redis_url)
⋮----
"""
    Create a RedisSaver with a patched _dump_blobs method to fix the issue.
    This demonstrates the fix approach.
    """
original_dump_blobs = RedisSaver._dump_blobs
def patched_dump_blobs(self, thread_id, checkpoint_ns, values, versions)
⋮----
"""
        Patched version of _dump_blobs that ensures version is a string.
        """
# Convert version to string in versions dictionary
string_versions = {k: str(v) for k, v in versions.items()}
# Call the original method with string versions
⋮----
# Apply the patch
⋮----
# Create the saver with patched method
saver = RedisSaver(redis_url)
⋮----
# Restore the original method
⋮----
# Clean up
⋮----
def test_numeric_version_fix(redis_url: str) -> None
⋮----
"""
    Test that demonstrates the fix for issue #40.
    This shows how to handle numeric versions correctly by ensuring
    they are converted to strings before being used with Tag.
    """
# Use our patched version that converts numeric versions to strings
⋮----
# Set up a basic config
config = {
# Create a basic checkpoint
checkpoint = empty_checkpoint()
# Store the checkpoint with our patched method
saved_config = saver.put(
⋮----
)  # Numeric version
# Get the checkpoint ID from the saved config
thread_id = saved_config["configurable"]["thread_id"]
checkpoint_ns = saved_config["configurable"].get("checkpoint_ns", "")
# Now query the data - this should work with the fix
query = f"@channel:{{test_channel}}"
# This should not raise an error now with our patch
results = saver.checkpoint_blobs_index.search(query)
# Verify we can find the data
⋮----
# Load one document and verify the version is a string
doc = results.docs[0]
data = saver._redis.json().get(doc.id)
# The key test: version should be a string even though we passed a numeric value

================
File: tests/test_numeric_version_issue.py
================
"""
Test for issue #40 - Error when comparing numeric version with Tag type.
"""
⋮----
@pytest.fixture(autouse=True)
async def clear_test_redis(redis_url: str) -> None
⋮----
"""Clear Redis before each test."""
client = Redis.from_url(redis_url)
⋮----
def test_numeric_version_issue(redis_url: str) -> None
⋮----
"""
    Test reproduction for issue #40.
    This test explicitly creates a scenario where a numeric version field
    is compared with a Tag type, which should cause a TypeError.
    """
# Create a Redis saver with default configuration
saver = RedisSaver(redis_url)
⋮----
# Here we'll directly test the specific problem from issue #40
# In the real app, the version field is stored as a number in Redis
# Then when the code in _dump_blobs tries to pass that numeric version
# to the Tag filter, it causes a TypeError
# First create a fixed test with direct Tag usage to demonstrate the issue
tag_filter = Tag("version")
⋮----
# This will trigger the error because we're comparing Tag with integer
result = tag_filter == 1  # Integer instead of string
# Verify the specific error message related to Tag comparison
⋮----
# Another approach would be a direct test of our _dump_blobs method
# by creating a fake numeric version and then trying to create a Tag query
# based on it
channel_name = "test_channel"
numeric_version = 1  # This is the root issue - numeric version not string
# This mimics the code in _dump_blobs that would fail
versions = {channel_name: numeric_version}
# We can't directly patch the method, but we can verify the same type issue
# Here we simulate what happens when a numeric version is passed to Tag filter
⋮----
# This fails because we're comparing a Tag with a numeric value directly
result = tag_filter == versions[channel_name]  # Numeric version
# Check the error message
⋮----
# Clean up

================
File: tests/test_search_limit.py
================
"""Tests for RedisStore search limits."""
⋮----
@pytest.fixture(scope="function")
def store(redis_url) -> RedisStore
⋮----
"""Fixture to create a Redis store."""
⋮----
store.setup()  # Initialize indices
⋮----
def test_search_with_larger_limit(store: RedisStore) -> None
⋮----
"""Test search with limit > 10."""
# Create 15 test documents
⋮----
# Search with a limit of 15
results = store.search(("test_namespace",), limit=15)
# Should return all 15 results
⋮----
# Verify we have all the items
result_keys = {item.key for item in results}
expected_keys = {f"key{i}" for i in range(15)}
⋮----
def test_vector_search_with_larger_limit(redis_url) -> None
⋮----
"""Test vector search with limit > 10."""
⋮----
# Create vector store with embeddings
embeddings = CharacterEmbeddings(dims=4)
index_config = {
⋮----
# Create 15 test documents
⋮----
# Create documents with slightly different texts
⋮----
# Search with a limit of 15
results = store.search(("test_namespace",), query="sample", limit=15)
# Should return all 15 results
⋮----
# Verify we have all the items

================
File: tests/test_semantic_search_keys.py
================
"""Tests for Redis key parsing with semantic search.
This test verifies that the fix to the Redis key handling works correctly
with the semantic search functionality.
"""
⋮----
# Import the Redis store - we'll use mock when needed
⋮----
class Memory(TypedDict)
⋮----
content: str
metadata: Dict[str, Any]
embedding: List[float]
def create_dummy_embedding(size: int = 4) -> List[float]
⋮----
"""Create a dummy embedding for testing."""
⋮----
class TestSemanticSearchKeyHandling
⋮----
"""Test semantic search key handling without requiring RediSearch."""
def test_parse_complex_keys(self)
⋮----
"""Test that the _parse_redis_checkpoint_writes_key method handles complex keys."""
# This directly tests the fix we made
# Create a key that simulates what would be generated in semantic search
complex_key = f"{CHECKPOINT_WRITE_PREFIX}{REDIS_KEY_SEPARATOR}thread_123{REDIS_KEY_SEPARATOR}memory_ns{REDIS_KEY_SEPARATOR}user_memories{REDIS_KEY_SEPARATOR}task_id{REDIS_KEY_SEPARATOR}0{REDIS_KEY_SEPARATOR}extra_component{REDIS_KEY_SEPARATOR}another_component"
# Parse the key using the patched method
result = BaseRedisSaver._parse_redis_checkpoint_writes_key(complex_key)
# Verify the result contains the expected components
⋮----
# The extra components should be ignored by our fix
def test_semantic_search_key_simulation(self)
⋮----
"""Simulate semantic search operations and key handling."""
# Create a key pattern like those generated in semantic search
namespace = "user_123"
memory_id = "memory_456"
# Mock Redis client
mock_redis = mock.MagicMock()
⋮----
# Create a mock for RedisStore with a mocked Redis client
⋮----
# Mock the RedisStore for testing
store = RedisStore("redis://localhost")
# Create a test memory
memory = {
# Test with tuple key - simulate storing
⋮----
# Test retrieval
retrieved = store.get(namespace, memory_id)
# Verify the retrieved data
⋮----
def test_complex_semantic_search_keys(self)
⋮----
"""Test with more complex keys that would be used in semantic search."""
# Create complex keys with special characters and multiple components
namespace = "user/123:456"
memory_id = "memory/with:special.chars/456"
# Construct a checkpoint key like the ones that would be generated
# This simulates what would happen internally in the checkpointer
checkpoint_key = f"{CHECKPOINT_WRITE_PREFIX}{REDIS_KEY_SEPARATOR}{namespace}:{memory_id}{REDIS_KEY_SEPARATOR}memories{REDIS_KEY_SEPARATOR}search_results{REDIS_KEY_SEPARATOR}task_123{REDIS_KEY_SEPARATOR}0{REDIS_KEY_SEPARATOR}extra{REDIS_KEY_SEPARATOR}components"
# Parse with our fixed method
result = BaseRedisSaver._parse_redis_checkpoint_writes_key(checkpoint_key)
# Verify the components are extracted correctly
⋮----
# The key would have been successfully parsed with our fix
# which is what prevented the original notebooks from working

================
File: tests/test_semantic_search_notebook.py
================
"""Test for the semantic search notebook functionality.
This test makes sure that the key parsing fix works with the semantic search
notebook by simulating its exact workflow.
"""
⋮----
class TestSemanticSearchNotebook
⋮----
"""Tests simulating the semantic search notebook."""
def test_semantic_search_complex_key_parsing(self)
⋮----
"""Test that the key parsing fix works with complex keys from semantic search."""
# Create complex keys that would be generated in semantic search
test_keys = [
⋮----
# Simple key with exact number of parts
⋮----
# Complex key with extra components - this would have failed before our fix
⋮----
# Very complex key with multiple extra components
⋮----
# Key with special characters that would be used in tuple keys
⋮----
# Test parsing each key
⋮----
# This would have failed before our fix for keys with more than 6 components
result = BaseRedisSaver._parse_redis_checkpoint_writes_key(key)
# Verify we get back a proper result dict with all required keys
⋮----
# Verify the first key is parsed correctly (exact number of parts)
⋮----
# Verify the semantic search key parsing (extra components)
⋮----
def test_semantic_search_insufficient_key_parts(self)
⋮----
"""Test that we properly raise errors for keys with insufficient parts."""
# Key with insufficient parts
insufficient_key = f"{CHECKPOINT_WRITE_PREFIX}{REDIS_KEY_SEPARATOR}thread_123{REDIS_KEY_SEPARATOR}memory_ns{REDIS_KEY_SEPARATOR}checkpoint_id{REDIS_KEY_SEPARATOR}task_id"
# This should raise a ValueError
⋮----
# Verify the error message mentions the right number of parts
⋮----
def test_semantic_search_incorrect_prefix(self)
⋮----
"""Test that we properly raise errors for keys with incorrect prefix."""
# Key with incorrect prefix
incorrect_prefix_key = f"wrong_prefix{REDIS_KEY_SEPARATOR}thread_123{REDIS_KEY_SEPARATOR}memory_ns{REDIS_KEY_SEPARATOR}checkpoint_id{REDIS_KEY_SEPARATOR}task_id{REDIS_KEY_SEPARATOR}0"
⋮----
# Verify the error message mentions the prefix issue

================
File: tests/test_shallow_async.py
================
@pytest.fixture
async def test_data() -> Dict[str, Any]
⋮----
"""Test data fixture."""
config_1: RunnableConfig = RunnableConfig(
config_2: RunnableConfig = RunnableConfig(
config_3: RunnableConfig = RunnableConfig(
chkpnt_1: Checkpoint = empty_checkpoint()
chkpnt_2: Checkpoint = create_checkpoint(chkpnt_1, {}, 1)
chkpnt_3: Checkpoint = empty_checkpoint()
metadata_1: CheckpointMetadata = {
metadata_2: CheckpointMetadata = {
metadata_3: CheckpointMetadata = {}
⋮----
@pytest.fixture
async def saver(redis_url: str) -> AsyncGenerator[AsyncShallowRedisSaver, None]
⋮----
"""AsyncShallowRedisSaver fixture."""
saver = AsyncShallowRedisSaver(redis_url)
⋮----
"""Test that only the latest checkpoint is stored."""
thread_id = "test-thread"
checkpoint_ns = ""
# Create initial checkpoint
config_1 = RunnableConfig(
checkpoint_1 = test_data["checkpoints"][0]
⋮----
# Create second checkpoint
config_2 = RunnableConfig(
checkpoint_2 = test_data["checkpoints"][1]
⋮----
# Verify only latest checkpoint exists
results = [c async for c in saver.alist(None)]
⋮----
({"source": "input"}, 1),  # Matches metadata.source
({"step": 1}, 1),  # Matches metadata.step
({}, 3),  # Retrieve all checkpoints
({"source": "update"}, 0),  # No matches
⋮----
"""Test search functionality."""
configs = test_data["configs"]
checkpoints = test_data["checkpoints"]
metadata = test_data["metadata"]
⋮----
results = [c async for c in saver.alist(None, filter=query)]
⋮----
"""Test handling of null characters."""
config = await saver.aput(
result = await saver.aget_tuple(config)
⋮----
sanitized_value = "\x00value".replace("\x00", "")
⋮----
"""Test storing writes asynchronously."""
config = test_data["configs"][0]
checkpoint = test_data["checkpoints"][0]
metadata = test_data["metadata"][0]
saved_config = await saver.aput(config, checkpoint, metadata, {})
writes = [("channel1", "value1"), ("channel2", "value2")]
⋮----
result = await saver.aget_tuple(saved_config)
⋮----
found_writes = {(w[1], w[2]) for w in result.pending_writes or []}
⋮----
"""Test sequential writes for consistent overwrite behavior."""
⋮----
# Add initial writes
initial_writes = [("channel1", "value1")]
⋮----
# Add more writes
new_writes = [("channel2", "value2")]
⋮----
# Verify only latest writes exist
⋮----
@pytest.mark.asyncio
async def test_from_conn_string_errors(redis_url: str) -> None
⋮----
"""Test proper cleanup of Redis connections."""
⋮----
saver_redis = s._redis
⋮----
client = Redis.from_url(redis_url)
⋮----
"""Test error conditions for from_conn_string."""
# Test with neither URL nor client provided
⋮----
# Test with invalid connection URL
⋮----
# Test with non-responding client
client = Redis(host="nonexistent", port=6379)
⋮----
# Test with empty URL
⋮----
@pytest.mark.asyncio
async def test_async_shallow_client_info_setting(redis_url: str, monkeypatch) -> None
⋮----
"""Test that client_setinfo is called with correct library information in AsyncShallowRedisSaver."""
⋮----
# Expected client info format
expected_client_info = f"redis-py(redisvl_v{__redisvl_version__})"
# Track if client_setinfo was called with the right parameters
client_info_called = False
# Store the original method
original_client_setinfo = Redis.client_setinfo
# Create a mock function for client_setinfo
async def mock_client_setinfo(self, key, value)
⋮----
# Note: RedisVL might call this with its own lib name first
# We only track calls with our full lib name
⋮----
client_info_called = True
# Call original method to ensure normal function
⋮----
# Apply the mock
⋮----
# Test client info setting when creating a new async shallow saver
⋮----
# Verify client_setinfo was called with our library info
⋮----
@pytest.mark.asyncio
async def test_async_shallow_client_info_fallback(redis_url: str, monkeypatch) -> None
⋮----
"""Test that AsyncShallowRedisSaver falls back to echo when client_setinfo is not available."""
⋮----
# Create a Redis client directly first - this bypasses RedisVL validation
⋮----
# Remove client_setinfo to simulate older Redis version
⋮----
# Track if echo was called with our lib name
echo_called = False
echo_messages = []
original_echo = Redis.echo
# Create mock for echo
async def mock_echo(self, message)
⋮----
echo_called = True
⋮----
# Apply the mocks
⋮----
# Test direct fallback without RedisVL interference
⋮----
# Force another call to set_client_info
⋮----
# Print debug info
⋮----
# Verify echo was called as fallback with our library info
⋮----
@pytest.mark.asyncio
async def test_shallow_redis_saver_blob_cleanup(redis_url: str) -> None
⋮----
"""Test that the AsyncShallowRedisSaver properly cleans up old blobs and writes.
    This test verifies that the fix for the GitHub issue is working correctly.
    The issue was that AsyncShallowRedisSaver was not cleaning up old checkpoint_blob
    and checkpoint_writes entries, causing them to accumulate in Redis even though
    they were no longer referenced by the current checkpoint.
    After the fix, old blobs and writes should be automatically deleted when new
    versions are created, keeping only the necessary current objects in Redis.
    """
⋮----
# Set up test parameters
thread_id = "test-thread-blob-accumulation"
checkpoint_ns = "test-ns"
# Create a test config
test_config = {
# Test AsyncShallowRedisSaver to see if it accumulates blobs and writes
⋮----
# Create a client to check Redis directly
redis_client = Redis.from_url(redis_url)
⋮----
# We need to do a few updates to create multiple versions of blobs
⋮----
checkpoint_id = f"id-{i}"
# Create checkpoint
checkpoint = {
metadata = {
# Define new_versions to force blob creation
new_versions = {"messages": f"version-{i}"}
# Save the checkpoint
config = await shallow_saver.aput(
# Add write for this checkpoint
⋮----
# Let's dump the Redis database to see what's stored
# First count the number of entries for each data type
all_keys = await redis_client.keys("*")
# Explicitly print to stdout to ensure visibility
⋮----
# Count the number of blobs and writes in Redis
# For blobs
blob_keys_pattern = f"{CHECKPOINT_BLOB_PREFIX}:*"
blob_keys = await redis_client.keys(blob_keys_pattern)
blob_count = len(blob_keys)
# Get content of each blob key
blob_contents = []
⋮----
blob_data = await redis_client.json().get(key.decode())
⋮----
# For writes
writes_keys_pattern = f"{CHECKPOINT_WRITE_PREFIX}:*"
writes_keys = await redis_client.keys(writes_keys_pattern)
writes_count = len(writes_keys)
# Get content of each write key
write_contents = []
⋮----
write_data = await redis_client.json().get(key.decode())
⋮----
# Print debug info about the keys found
⋮----
# Look at stored checkpoint, which should have the latest values
latest_checkpoint = await shallow_saver.aget(test_config)
⋮----
# Verify the fix works:
# 1. We should only have one blob entry - the latest version
⋮----
# 2. We should only have one write entry - for the latest checkpoint
⋮----
# 3. The checkpoint should reference the latest version
⋮----
# 4. Check that the blob we have is for the latest version
⋮----
# Clean up test data
⋮----
# For comparison, test with regular AsyncRedisSaver
# The regular saver should also accumulate entries, but this is by design since it keeps history
⋮----
# Do the same operations as above
⋮----
# Update test_config with the proper checkpoint_id
config = {
⋮----
saved_config = await regular_saver.aput(
⋮----
# With regular saver, we expect it to retain all history (this is by design)

================
File: tests/test_shallow_sync.py
================
@pytest.fixture
def test_data() -> dict[str, list[Any]]
⋮----
"""Test data fixture."""
config_1: RunnableConfig = {
config_2: RunnableConfig = {
config_3: RunnableConfig = {
chkpnt_1: Checkpoint = empty_checkpoint()
chkpnt_2: Checkpoint = create_checkpoint(chkpnt_1, {}, 1)
chkpnt_3: Checkpoint = empty_checkpoint()
metadata_1: CheckpointMetadata = {
metadata_2: CheckpointMetadata = {
metadata_3: CheckpointMetadata = {}
⋮----
@pytest.fixture(autouse=True)
async def clear_test_redis(redis_url: str) -> None
⋮----
"""Clear Redis before each test."""
client = Redis.from_url(redis_url)
⋮----
@contextmanager
def _saver(redis_url: str) -> Any
⋮----
"""Fixture for shallow saver testing."""
saver = ShallowRedisSaver(redis_url)
⋮----
"""Test that only latest checkpoint is stored."""
⋮----
thread_id = "test-thread"
checkpoint_ns = ""
# Create initial checkpoint
config_1 = {
checkpoint_1 = test_data["checkpoints"][0]
⋮----
# Create second checkpoint
config_2 = {
checkpoint_2 = test_data["checkpoints"][1]
⋮----
# Verify only latest checkpoint exists
results = list(saver.list(None))
⋮----
({"source": "input"}, 1),  # Matches metadata.source
({"step": 1}, 1),  # Matches metadata.step
({}, 2),  # Retrieve latest checkpoints (one per thread)
({"source": "update", "step": 1}, 0),  # No matches
⋮----
"""Test search functionality."""
⋮----
configs = test_data["configs"]
checkpoints = test_data["checkpoints"]
metadata = test_data["metadata"]
# Store checkpoints with different thread IDs
⋮----
search_results = list(saver.list(None, filter=query))
⋮----
def test_overwrite_writes(test_data: dict[str, list[Any]], redis_url: str) -> None
⋮----
"""Test that writes are overwritten, not appended."""
⋮----
config = test_data["configs"][0]
checkpoint = test_data["checkpoints"][0]
metadata = test_data["metadata"][0]
# Store initial checkpoint
saved_config = saver.put(config, checkpoint, metadata, {})
# Add initial writes
initial_writes = [("channel1", "value1")]
⋮----
# Add more writes
new_writes = [("channel2", "value2")]
⋮----
# Verify only latest writes exist
result = saver.get_tuple(saved_config)
⋮----
("my_key", "\x00abc"),  # Null character in value
⋮----
"""Test handling of null characters."""
⋮----
config = saver.put(
result = saver.get_tuple(config)
⋮----
sanitized_key = key.replace("\x00", "")
sanitized_value = value.replace("\x00", "")
⋮----
def test_from_conn_string_with_url(redis_url: str) -> None
⋮----
"""Test creating ShallowRedisSaver with connection URL."""
⋮----
def test_from_conn_string_with_client(redis_url: str) -> None
⋮----
"""Test creating ShallowRedisSaver with existing client."""
⋮----
def test_from_conn_string_with_connection_args(redis_url: str) -> None
⋮----
"""Test creating ShallowRedisSaver with connection arguments."""
⋮----
value = saver._redis.get("test_key")
⋮----
def test_from_conn_string_errors(redis_url: str) -> None
⋮----
"""Test proper cleanup of Redis connections."""
⋮----
saver_redis = s._redis
⋮----
"""Test error conditions for from_conn_string."""
# Test with neither URL nor client provided
⋮----
# Test with invalid connection URL
⋮----
# Test with non-responding client
client = Redis(host="nonexistent", port=6379)
⋮----
# Test with empty URL
# Handle both old and new RedisVL error message formats
⋮----
def test_shallow_client_info_setting(redis_url: str, monkeypatch) -> None
⋮----
"""Test that ShallowRedisSaver sets client info correctly."""
⋮----
# Create a mock to track if client_setinfo was called with our library name
client_info_called = False
original_client_setinfo = Redis.client_setinfo
def mock_client_setinfo(self, key, value)
⋮----
# Note: RedisVL might call this with its own lib name first
# We only track calls with our full lib name
⋮----
client_info_called = True
⋮----
# Apply the mock
⋮----
# Test client info setting when creating a new shallow saver
⋮----
# Verify client_setinfo was called with our library info
⋮----
def test_shallow_client_info_fallback(redis_url: str, monkeypatch) -> None
⋮----
"""Test that ShallowRedisSaver falls back to echo when client_setinfo is not available."""
⋮----
# Create a Redis client directly first - this bypasses RedisVL validation
⋮----
# Remove client_setinfo to simulate older Redis version
⋮----
# Track if echo was called with our lib name
echo_called = False
echo_messages = []
original_echo = Redis.echo
def mock_echo(self, message)
⋮----
echo_called = True
⋮----
# Apply the mocks
⋮----
# Test direct fallback without RedisVL interference
⋮----
# Force another call to set_client_info
⋮----
# Print debug info
⋮----
# Verify echo was called as fallback with our library info
⋮----
def test_key_generation_inconsistency(redis_url: str) -> None
⋮----
"""Test for Key generation consistency between base and shallow savers.
    This test verifies that both the base class and shallow saver cleanup patterns
    use the same storage-safe transformations, ensuring cleanup works correctly.
    """
⋮----
thread_id = "test_thread"
checkpoint_ns = ""  # Empty namespace - the problematic case
channel = "test_channel"
version = "1"
# Test blob key generation
base_blob_key = BaseRedisSaver._make_redis_checkpoint_blob_key(
shallow_blob_pattern = (
# The base key uses storage-safe transformations
expected_base_key = f"{CHECKPOINT_BLOB_PREFIX}:test_thread:__empty__:test_channel:1"
⋮----
# The shallow pattern now uses storage-safe transformations (fixed!)
expected_pattern = f"{CHECKPOINT_BLOB_PREFIX}:test_thread:__empty__:*"
⋮----
# Both base key and pattern now consistently use "__empty__" (fix confirmed!)
⋮----
# Test writes key generation
checkpoint_id = "test_checkpoint"
task_id = "test_task"
base_writes_key = BaseRedisSaver._make_redis_checkpoint_writes_key(
shallow_writes_pattern = (
⋮----
expected_base_key = (
⋮----
expected_pattern = f"{CHECKPOINT_WRITE_PREFIX}:test_thread:__empty__:*"
⋮----
def test_incomplete_blob_cleanup(redis_url: str) -> None
⋮----
"""Test for Complete cleanup of blobs in ShallowRedisSaver.
    This test verifies that old blob versions are properly cleaned up
    when putting new checkpoints, now that key generation is consistent.
    """
⋮----
# Create test data
thread_id = f"test_thread_{uuid.uuid4()}"
checkpoint_ns = ""  # Empty namespace - problematic case
checkpoint_id1 = str(uuid.uuid4())
checkpoint_id2 = str(uuid.uuid4())
config1: RunnableConfig = {
config2: RunnableConfig = {
# Create first checkpoint
checkpoint1 = {
metadata1: CheckpointMetadata = {"source": "input", "step": 1}
versions1 = {"test_channel": "1", "another_channel": "2"}
⋮----
# Check keys after first checkpoint
redis_client = Redis.from_url(redis_url, decode_responses=True)
⋮----
all_keys = redis_client.keys("*")
test_keys = [k for k in all_keys if thread_id in k]
blob_keys_after_first = [
# Should have 2 blob keys
⋮----
# Create second checkpoint with different channel versions
checkpoint2 = {
metadata2: CheckpointMetadata = {"source": "loop", "step": 2}
versions2 = {
⋮----
}  # Different versions
⋮----
# Check keys after second checkpoint
⋮----
blob_keys_after_second = [
# This demonstrates the bug: we should only have 2 blob keys (latest versions)
# but we have 4 because cleanup didn't work due to key generation inconsistency
⋮----
# This should pass when the bug is fixed - we should only have latest blob versions
⋮----
def test_pr37_incomplete_writes_cleanup(redis_url: str) -> None
⋮----
"""Test for PR #37: Complete cleanup of writes in ShallowRedisSaver.
    This test verifies that old writes are properly cleaned up
    when putting new writes, now that key generation is consistent.
    """
⋮----
# Add writes for first checkpoint
writes1 = [("channel1", "value1"), ("channel2", "value2")]
⋮----
# Check writes after first checkpoint
⋮----
write_keys_after_first = [
# Should have 2 write keys
⋮----
# Create second checkpoint
⋮----
# Add writes for second checkpoint
writes2 = [("channel3", "value3"), ("channel4", "value4")]
⋮----
# Check writes after second checkpoint
⋮----
write_keys_after_second = [
⋮----
# In a proper shallow implementation, old writes for different checkpoints
# should be cleaned up. This test verifies the cleanup works correctly.
# We expect only the writes from the second checkpoint (2 writes)

================
File: tests/test_store.py
================
"""Tests for RedisStore."""
⋮----
TTL_SECONDS = 2
TTL_MINUTES = TTL_SECONDS / 60
⋮----
@pytest.fixture
def fake_embeddings() -> CharacterEmbeddings
⋮----
"""Create test embeddings for vector search."""
⋮----
@pytest.fixture(scope="function")
def store(redis_url) -> Iterator[RedisStore]
⋮----
"""Fixture to create a Redis store with TTL support."""
ttl_config = {
⋮----
store.setup()  # Initialize indices
⋮----
"""Fixture to create a Redis store with vector search capabilities."""
vector_type = request.param
distance_type = "cosine"  # Other options: "l2", "inner_product"
# Include fields parameter in index_config
index_config = {
⋮----
"fields": ["text"],  # Field to embed
⋮----
ttl_config = {"default_ttl": 2, "refresh_on_read": True}
# Create a unique index name for each test run
unique_id = str(uuid4())[:8]
# Use different Redis prefix for vector store tests to avoid conflicts
⋮----
def test_batch_order(store: RedisStore) -> None
⋮----
"""Test that operations are executed in the correct order."""
# Setup test data
⋮----
ops = [
results = store.batch(ops)
⋮----
assert results[1] is None  # Put operation returns None
⋮----
assert len(results[3]) > 0  # Should contain at least our test namespaces
assert results[4] is None  # Non-existent key returns None
# Test reordered operations
ops_reordered = [
results_reordered = store.batch(ops_reordered)
⋮----
assert len(results_reordered[0]) >= 2  # Should find at least our two test items
⋮----
assert results_reordered[3] is None  # Put operation returns None
⋮----
def test_batch_put_ops(store: RedisStore) -> None
⋮----
"""Test batch operations with multiple puts."""
⋮----
PutOp(namespace=("test",), key="key3", value=None),  # Delete operation
⋮----
# Verify the puts worked
item1 = store.get(("test",), "key1")
item2 = store.get(("test",), "key2")
item3 = store.get(("test",), "key3")
⋮----
def test_batch_search_ops(store: RedisStore) -> None
⋮----
"""Test batch operations with search operations."""
⋮----
test_data = [
⋮----
# First search should find items with tag "a"
⋮----
# Second search should return first 2 items (depends on sorting which could be arbitrary)
⋮----
# Third search should only find items in test/foo namespace
⋮----
def test_batch_list_namespaces_ops(store: RedisStore) -> None
⋮----
"""Test batch operations with list namespaces operations."""
# Setup test data with various namespaces
⋮----
# First operation should list all namespaces
⋮----
# Second operation should only return namespaces up to depth 2
⋮----
# Third operation should only return namespaces ending with "public"
⋮----
def test_list_namespaces(store: RedisStore) -> None
⋮----
"""Test listing namespaces with various filters."""
# Create test data with various namespaces
test_namespaces = [
# Insert test data
⋮----
# Test listing with various filters
all_namespaces = store.list_namespaces()
⋮----
# Test prefix filtering
test_prefix_namespaces = store.list_namespaces(prefix=["test"])
⋮----
# Test suffix filtering
public_namespaces = store.list_namespaces(suffix=["public"])
⋮----
# Test max depth
depth_2_namespaces = store.list_namespaces(max_depth=2)
⋮----
# Test pagination
paginated_namespaces = store.list_namespaces(limit=3)
⋮----
# Cleanup
⋮----
def test_vector_search(vector_store: RedisStore) -> None
⋮----
"""Test vector search functionality."""
# Insert documents with text that can be embedded
docs = [
⋮----
# Search with query
results = vector_store.search(("test",), query="longer text")
⋮----
# Doc2 and doc3 should be closer matches to "longer text"
doc_keys = [r.key for r in results]
⋮----
def test_vector_search_with_filters(vector_store: RedisStore) -> None
⋮----
"""Test vector search with additional filters."""
# Insert test documents
⋮----
# Search for "apple" within red items
results = vector_store.search(("test",), query="apple", filter={"color": "red"})
⋮----
# Doc1 should be the closest match for "apple" with color=red
⋮----
# Search for "car" within red items
results = vector_store.search(("test",), query="car", filter={"color": "red"})
⋮----
# Doc2 should be the closest match for "car" with color=red
⋮----
def test_vector_update_with_score_verification(vector_store: RedisStore) -> None
⋮----
"""Test that updating items properly updates their embeddings."""
⋮----
# Search for a term similar to doc1's content
results_initial = vector_store.search(("test",), query="zany xylophone")
⋮----
initial_score = results_initial[0].score
# Update doc1 to be about dogs instead
⋮----
# The original query should now match doc1 less strongly
results_after = vector_store.search(("test",), query="zany xylophone")
⋮----
after_score = next((r.score for r in results_after if r.key == "doc1"), None)
⋮----
# A dog-related query should now match doc1 more strongly
results_new = vector_store.search(("test",), query="dogs text")
doc1_score = next((r.score for r in results_new if r.key == "doc1"), None)
⋮----
def test_basic_ops(store: RedisStore) -> None
⋮----
"""Test basic CRUD operations."""
namespace = ("test", "documents")
item_id = "doc1"
item_value = {"title": "Test Document", "content": "Hello, World!"}
⋮----
item = store.get(namespace, item_id)
⋮----
# Test update
updated_value = {"title": "Updated Document", "content": "Hello, Updated!"}
⋮----
updated_item = store.get(namespace, item_id)
⋮----
# Test get from non-existent namespace
different_namespace = ("test", "other_documents")
item_in_different_namespace = store.get(different_namespace, item_id)
⋮----
# Test delete
⋮----
deleted_item = store.get(namespace, item_id)
⋮----
def test_search(store: RedisStore) -> None
⋮----
"""Test search functionality."""
# Create test data
⋮----
# Test basic search
all_items = store.search(["test"])
⋮----
# Test namespace filtering
docs_items = store.search(["test", "docs"])
⋮----
# Test value filtering
alice_items = store.search(["test"], filter={"author": "Alice"})
⋮----
paginated_items = store.search(["test"], limit=2)
⋮----
offset_items = store.search(["test"], offset=2)
⋮----
def test_large_batches(store: RedisStore) -> None
⋮----
"""Test handling large numbers of operations."""
# Reduce number of operations for stability
N = 20
ops = []
# Add many put operations
⋮----
# Execute puts first to make sure data exists before querying
put_results = store.batch(ops)
⋮----
# Create operations for gets, search, and list
get_ops = []
# Add get operations
⋮----
# Add search operations
⋮----
# Add list namespaces operations
⋮----
# Execute get, search, and list operations
get_results = store.batch(get_ops)
expected_results_len = N // 5 + N // 10 + 1
⋮----
# Verify gets (they should return Items)
⋮----
result = get_results[i]
⋮----
# Verify searches (they should return lists)
⋮----
# Verify list namespaces (it should return a list)
⋮----
def test_store_ttl(store: RedisStore) -> None
⋮----
"""Test TTL functionality in Redis store."""
# Assumes a TTL of TTL_MINUTES
ns = ("foo",)
# Store an item with TTL
⋮----
# Check item exists and refresh TTL
res = store.get(ns, key="item1", refresh_ttl=True)
⋮----
# Search for the item with refresh
results = store.search(ns, query="foo", refresh_ttl=True)
⋮----
# Do one more get without refreshing TTL
res = store.get(ns, key="item1", refresh_ttl=False)
⋮----
# Wait for the TTL to expire
⋮----
# Force a sweep to remove expired items
⋮----
# Verify item is gone due to TTL expiration
res = store.search(ns, query="bar", refresh_ttl=False)
⋮----
def test_redis_store_client_info(redis_url: str, monkeypatch) -> None
⋮----
"""Test that RedisStore sets client info correctly."""
⋮----
# Expected client info format
expected_client_info = f"redis-py(redisvl_v{__redisvl_version__})"
# Create a direct Redis client to bypass RedisVL validation
client = NativeRedis.from_url(redis_url)
⋮----
# Create a mock to track if client_setinfo was called with our library name
client_info_called = False
original_client_setinfo = NativeRedis.client_setinfo
def mock_client_setinfo(self, key, value)
⋮----
# We only track calls with our full lib name
⋮----
client_info_called = True
⋮----
# Apply the mock
⋮----
# Test client info setting by creating store directly
store = RedisStore(client)
⋮----
# Verify client_setinfo was called with our library info
⋮----
def test_redis_store_client_info_fallback(redis_url: str, monkeypatch) -> None
⋮----
"""Test that RedisStore falls back to echo when client_setinfo is not available."""
⋮----
# Track if echo was called
echo_called = False
original_echo = NativeRedis.echo
# Remove client_setinfo to simulate older Redis version
⋮----
def mock_echo(self, message)
⋮----
# We only want to track our library's echo calls
⋮----
echo_called = True
⋮----
# Apply the mocks
⋮----
# Verify echo was called as fallback
⋮----
def test_redis_store_graceful_failure(redis_url: str, monkeypatch) -> None
⋮----
"""Test graceful failure when both client_setinfo and echo fail."""
⋮----
# Simulate failures for both methods
⋮----
# Should not raise any exceptions when both methods fail
⋮----
# Test client info setting by creating store directly
⋮----
def test_vector_storage_json(redis_url, fake_embeddings: CharacterEmbeddings) -> None
⋮----
"""Test JSON vector storage (default behavior)."""
# Test data
⋮----
# vector_storage_type defaults to "json"
⋮----
# Insert documents
⋮----
# Test vector search functionality
results = store.search(("test_json",), query="hello")
⋮----
# Verify both hello documents are found
⋮----
# Test that scores are reasonable (should be > 0 for cosine similarity)
⋮----
# Test retrieval by key still works
item = store.get(("test_json",), "doc1")
⋮----
def test_vector_storage_hash(redis_url, fake_embeddings: CharacterEmbeddings) -> None
⋮----
"""Test hash vector storage for improved memory efficiency."""
⋮----
"vector_storage_type": "hash",  # Enable hash storage
⋮----
results = store.search(("test_hash",), query="hello")
⋮----
item = store.get(("test_hash",), "doc1")
⋮----
def test_vector_search_hash(redis_url, fake_embeddings: CharacterEmbeddings) -> None
⋮----
"""Test vector search functionality with hash storage."""
⋮----
# Insert documents with text that can be embedded
⋮----
# Search with query
results = store.search(("test",), query="longer text")
⋮----
# Doc2 and doc3 should be closer matches to "longer text"
⋮----
"""Test vector search with additional filters using hash storage."""
⋮----
# Insert test documents
⋮----
# Search for "apple" within red items
results = store.search(("test",), query="apple", filter={"color": "red"})
⋮----
# Doc1 should be the closest match for "apple" with color=red
⋮----
# Search for "car" within red items
results = store.search(("test",), query="car", filter={"color": "red"})
⋮----
# Doc2 should be the closest match for "car" with color=red
⋮----
"""Test that updating items properly updates their embeddings with hash storage."""
⋮----
# Search for a term similar to doc1's content
results_initial = store.search(("test",), query="zany xylophone")
⋮----
# Update doc1 to be about dogs instead
⋮----
# The original query should now match doc1 less strongly
results_after = store.search(("test",), query="zany xylophone")
⋮----
# A dog-related query should now match doc1 more strongly
results_new = store.search(("test",), query="dogs text")

================
File: tests/test_streaming_modes.py
================
"""Tests for streaming with different modes using Redis checkpointing.
This test verifies that the streaming functionality works correctly with
different streaming modes when using Redis checkpointing. This uses
mocking to ensure tests work with different API versions.
"""
⋮----
class ChatState(TypedDict)
⋮----
messages: List[Dict[str, str]]
current_response: Optional[str]
def add_user_message(state: ChatState, message: str) -> Dict[str, Any]
⋮----
"""Add a user message to the state."""
⋮----
def add_ai_message(state: ChatState) -> Dict[str, Any]
⋮----
"""Generate and add an AI message to the state."""
# Simple AI response generation for testing
response = f"Response to: {state['messages'][-1]['content']}"
⋮----
def stream_ai_response(state: ChatState) -> Dict[str, Any]
⋮----
"""Stream an AI response one word at a time."""
last_user_message = next(
response = f"Response to: {last_user_message}"
words = response.split()
current = state.get("current_response", "")
⋮----
# Start streaming with first word
⋮----
# Find current position
current_word_count = len(current.split())
⋮----
# Streaming complete, add message to history and clear current
⋮----
# Add next word
⋮----
def router(state: ChatState) -> Literal["stream_ai_response", "END"]
⋮----
"""Route based on current response status."""
⋮----
# Continue streaming
⋮----
class TestStreamingKeyHandling
⋮----
"""Test streaming functionality with Redis checkpointing.
    This class mocks the actual StateGraph to test our key handling.
    """
def test_key_parsing_with_streaming(self)
⋮----
"""Verify that our key parsing fix works with streaming operations."""
# Create a mock for the Redis client
mock_redis = mock.MagicMock()
# Simulate a checkpoint write key for a streaming operation
streaming_key = f"{CHECKPOINT_WRITE_PREFIX}{REDIS_KEY_SEPARATOR}thread_streaming{REDIS_KEY_SEPARATOR}messages{REDIS_KEY_SEPARATOR}stream_123{REDIS_KEY_SEPARATOR}task_456{REDIS_KEY_SEPARATOR}0{REDIS_KEY_SEPARATOR}update{REDIS_KEY_SEPARATOR}2"
# Parse using our fixed method
result = BaseRedisSaver._parse_redis_checkpoint_writes_key(streaming_key)
# Verify the result
⋮----
# The extra components (update, 2) should be ignored by our fix
def test_complex_streaming_keys(self)
⋮----
"""Test with more complex keys that contain additional components."""
# Create a key with many additional components
complex_key = f"{CHECKPOINT_WRITE_PREFIX}{REDIS_KEY_SEPARATOR}thread_complex{REDIS_KEY_SEPARATOR}messages{REDIS_KEY_SEPARATOR}stream_complex{REDIS_KEY_SEPARATOR}task_complex{REDIS_KEY_SEPARATOR}0{REDIS_KEY_SEPARATOR}update{REDIS_KEY_SEPARATOR}3{REDIS_KEY_SEPARATOR}values{REDIS_KEY_SEPARATOR}partial"
# Parse with our fixed method
result = BaseRedisSaver._parse_redis_checkpoint_writes_key(complex_key)
# Verify the components are extracted correctly
⋮----
# Our fix should handle this complex key correctly
def test_streaming_with_mocked_graph(self)
⋮----
"""Test streaming using a mocked StateGraph to avoid API incompatibilities."""
# Create a mock for the StateGraph
mock_graph = mock.MagicMock()
# Set up the mock to return stream chunks
⋮----
# Mock the RedisSaver
mock_saver = mock.MagicMock(spec=RedisSaver)
⋮----
# Run a streaming operation
thread_config = {"configurable": {"thread_id": "test_mock_stream"}}
input_data = {"message": "Hello"}
initial_state = {"messages": [], "current_response": None}
# Call the mocked stream method
results = list(
# Verify we got the expected number of chunks
⋮----
# Verify the final state has complete response
final_state = results[-1]
⋮----
@pytest.mark.asyncio
    async def test_async_streaming_with_mock(self)
⋮----
"""Test async streaming with a mocked async graph."""
# Create a mock for AsyncRedisSaver
mock_async_saver = mock.MagicMock(spec=AsyncRedisSaver)
⋮----
# Create a mock graph with async capability
class MockAsyncGraph
⋮----
async def astream(self, *args, **kwargs)
⋮----
"""Mock async streaming method."""
chunks = [
⋮----
await asyncio.sleep(0.01)  # Small delay to simulate async behavior
mock_async_graph = MockAsyncGraph()
# Run the async streaming operation
results = []
thread_config = {"configurable": {"thread_id": "test_async_mock_stream"}}
⋮----
# Simulate cancellation after 3 chunks
⋮----
# Verify the streaming was working correctly

================
File: tests/test_streaming.py
================
"""Tests for streaming with Redis checkpointing."""
⋮----
class State(TypedDict)
⋮----
counter: int
values: List[str]
def count_node(state: State) -> Dict[str, Any]
⋮----
"""Simple counting node."""
⋮----
def values_node(state: State) -> Dict[str, Any]
⋮----
"""Add a value to the list."""
⋮----
def conditional_router(state: State) -> Literal["count_node", "END"]
⋮----
"""Route based on counter value."""
⋮----
@pytest.fixture
def graph_with_redis_checkpointer(redis_url: str)
⋮----
"""Create a graph with Redis checkpointer."""
builder = StateGraph(State)
⋮----
graph = builder.compile(checkpointer=checkpointer)
⋮----
def test_streaming_values_with_redis_checkpointer(graph_with_redis_checkpointer)
⋮----
"""Test streaming with 'values' mode."""
# Create a thread config with a unique ID
thread_config = {"configurable": {"thread_id": "test_stream_values"}}
# Stream with values mode
results = []
⋮----
# Verify results
assert len(results) == 11  # 5 iterations x 2 nodes + initial state
# Check state history from the checkpointer
states = list(graph_with_redis_checkpointer.get_state_history(thread_config))
⋮----
final_state = states[-1]
⋮----
def test_streaming_updates_with_redis_checkpointer(graph_with_redis_checkpointer)
⋮----
"""Test streaming with 'updates' mode."""
⋮----
thread_config = {"configurable": {"thread_id": "test_stream_updates"}}
# Stream with updates mode
⋮----
# Verify results - we should get an update from each node
assert len(results) == 10  # 5 iterations x 2 nodes
# Check that each update contains the expected keys
⋮----
if i % 2 == 0:  # count_node
⋮----
else:  # values_node
⋮----
@pytest.mark.asyncio
async def test_streaming_with_cancellation(graph_with_redis_checkpointer)
⋮----
"""Test streaming with cancellation."""
⋮----
thread_config = {"configurable": {"thread_id": "test_stream_cancel"}}
# Create a task that streams with interruption
async def stream_with_cancel()
⋮----
# Simulate cancellation after 3 chunks
⋮----
# Expected - just pass
⋮----
# Run the task
task = asyncio.create_task(stream_with_cancel())
await asyncio.sleep(0.1)  # Let it run a bit
results = await task
# Verify results - we should have 3 chunks
⋮----
# We expect some state to be saved even after cancellation
⋮----
# Should be able to continue from the last saved state
last_state = graph_with_redis_checkpointer.get_state(thread_config)
continuation_results = []
⋮----
None, thread_config, stream_mode="values"  # No input, continue from last state
⋮----
# Verify we can continue after cancellation

================
File: tests/test_subgraph_key_parsing.py
================
"""Tests for Redis key parsing with subgraphs.
This test verifies that the fix to the _parse_redis_checkpoint_writes_key method
can handle keys formatted by subgraphs correctly.
"""
⋮----
class State(TypedDict)
⋮----
counter: int
message: str
class NestedState(TypedDict)
⋮----
user: str
history: List[str]
def increment_counter(state: State) -> Dict[str, Any]
⋮----
"""Simple increment function."""
⋮----
def add_message(state: State) -> Dict[str, Any]
⋮----
"""Add a message based on counter."""
⋮----
def build_subgraph()
⋮----
"""Build a simple subgraph to test."""
builder = StateGraph(State)
⋮----
def test_parse_subgraph_write_key()
⋮----
"""Test the key parsing with subgraph keys."""
# Create a complex key with subgraph components - similar to what would
# happen in a real scenario with nested subgraphs
key = REDIS_KEY_SEPARATOR.join(
# Parse the key
result = BaseRedisSaver._parse_redis_checkpoint_writes_key(key)
# Verify the result has the expected components
⋮----
# The extra components should be ignored
⋮----
@pytest.fixture
def redis_saver(redis_url: str)
def test_complex_thread_ids(redis_saver)
⋮----
"""Test key parsing with complex thread IDs."""
# Some thread IDs might contain special formatting
complex_thread_id = "parent/subgraph:nested.component-123"
# Create a key with this complex thread ID
⋮----
# Parse the key directly
parsed_key = BaseRedisSaver._parse_redis_checkpoint_writes_key(key)
# The thread_id would be processed by to_storage_safe_str
# which handles special characters
⋮----
def test_subgraph_state_history(redis_url: str)
⋮----
"""Test for state history with subgraphs."""
# Create main graph with a subgraph
main_builder = StateGraph(NestedState)
# Add the subgraph
subgraph = build_subgraph()
⋮----
# Add edges for the main graph
⋮----
# Create checkpointer
⋮----
# Compile the graph with the checkpointer
main_graph = main_builder.compile(checkpointer=checkpointer)
# Create thread config
thread_config = {
# Run the graph
result = main_graph.invoke(
# Get state history - this would have failed before the fix
⋮----
# Get state history
states = list(main_graph.get_state_history(thread_config))
⋮----
# The test passes if we don't get a "too many values to unpack" error
# which would have happened before our key parsing fix

================
File: tests/test_sync.py
================
@pytest.fixture
def test_data() -> dict[str, list[Any]]
⋮----
"""Test data fixture."""
config_1: RunnableConfig = {
config_2: RunnableConfig = {
config_3: RunnableConfig = {
chkpnt_1: Checkpoint = empty_checkpoint()
chkpnt_2: Checkpoint = create_checkpoint(chkpnt_1, {}, 1)
chkpnt_3: Checkpoint = empty_checkpoint()
metadata_1: CheckpointMetadata = {
metadata_2: CheckpointMetadata = {
metadata_3: CheckpointMetadata = {}
⋮----
@pytest.fixture(autouse=True)
async def clear_test_redis(redis_url: str) -> None
⋮----
"""Clear Redis before each test."""
client = Redis.from_url(redis_url)
⋮----
@contextmanager
def _saver(redis_url: str) -> Any
⋮----
"""Fixture for regular saver testing."""
saver = RedisSaver(redis_url)
⋮----
({"source": "input"}, 1),  # search by 1 key
({"step": 1}, 1),  # search by multiple keys - , "writes": {"foo": "bar"}
({}, 3),  # search by no keys, return all checkpoints
({"source": "update", "step": 1}, 0),  # no matches
⋮----
configs = test_data["configs"]
checkpoints = test_data["checkpoints"]
metadata = test_data["metadata"]
⋮----
search_results = list(saver.list(None, filter=query))
⋮----
("my_key", "\x00abc"),  # Null character in value
⋮----
config = saver.put(
result = saver.get_tuple(config)
⋮----
sanitized_key = key.replace("\x00", "")
sanitized_value = value.replace("\x00", "")
⋮----
def test_put_writes(test_data: dict[str, list[Any]], redis_url: str) -> None
⋮----
"""Test storing writes in Redis."""
⋮----
config = test_data["configs"][0]
checkpoint = test_data["checkpoints"][0]
metadata = test_data["metadata"][0]
# First store a checkpoint
saved_config = saver.put(config, checkpoint, metadata, {})
# Test regular writes
writes = [("channel1", "value1"), ("channel2", "value2")]
task_id = "task1"
⋮----
# Test special writes (using WRITES_IDX_MAP)
special_writes = [("__error__", "error_value"), ("channel3", "value3")]
task_id2 = "task2"
⋮----
# Verify writes through get_tuple
result = saver.get_tuple(saved_config)
⋮----
# Verify regular writes
found_writes = {(w[1], w[2]) for w in result.pending_writes}
⋮----
# Verify special writes
⋮----
"""Test that writes are properly stored in Redis JSON format."""
⋮----
# First store a checkpoint to get proper config
⋮----
writes = [("channel1", "value1")]
⋮----
# Store write
⋮----
# Verify JSON structure directly
thread_id = saved_config["configurable"]["thread_id"]
checkpoint_ns = saved_config["configurable"].get("checkpoint_ns", "")
checkpoint_id = saved_config["configurable"]["checkpoint_id"]
write_key = BaseRedisSaver._make_redis_checkpoint_writes_key(
# Get raw JSON
json_data = saver._redis.json().get(write_key)
# Verify structure
⋮----
def test_search_writes(redis_url: str) -> None
⋮----
"""Test searching writes using Redis Search."""
⋮----
# Set up some test data
# Create initial config with checkpoint and metadata
config = {"configurable": {"thread_id": "thread1", "checkpoint_ns": "ns1"}}
checkpoint = empty_checkpoint()  # Need to import this
metadata = {"source": "test", "step": 1, "writes": {}}
# Store checkpoint to get proper config
⋮----
# Add writes for multiple channels
writes1 = [("channel1", "value1"), ("channel2", "value2")]
⋮----
writes2 = [("channel1", "value3")]
⋮----
# Search by channel
query = "(@channel:{channel1})"
results = saver.checkpoint_writes_index.search(query)
assert len(results.docs) == 2  # One document per channel1 writes
doc1 = json.loads(results.docs[0].json)
doc2 = json.loads(results.docs[1].json)
⋮----
# Search by task
query = "(@task_id:{task1})"
⋮----
# Search by thread/namespace
query = "(@thread_id:{thread1} @checkpoint_ns:{ns1})"
⋮----
assert len(results.docs) == 3  # Contains all three writes
⋮----
doc3 = json.loads(results.docs[2].json)
⋮----
def test_from_conn_string_with_url(redis_url: str) -> None
⋮----
"""Test creating a RedisSaver with a connection URL."""
⋮----
# Verify connection works by creating and checking a key
⋮----
def test_from_conn_string_with_client(redis_url: str) -> None
⋮----
"""Test creating a RedisSaver with an existing Redis client."""
⋮----
# Verify connection works
⋮----
def test_from_conn_string_with_connection_args(redis_url: str) -> None
⋮----
"""Test creating a RedisSaver with connection arguments."""
# Test that decode_responses is propagated to Redis
⋮----
# Check the connection parameter was passed through
⋮----
# Functional test - we should get str not bytes back
⋮----
value = saver._redis.get("test_key")
assert isinstance(value, str)  # not bytes
def test_from_conn_string_cleanup(redis_url: str) -> None
⋮----
"""Test proper cleanup of Redis connections."""
# Test with auto-created client
⋮----
saver_redis = s._redis
# Verify it works during context
⋮----
# Test with provided client
⋮----
# Verify both use the same client
⋮----
# Verify client still works after context
⋮----
def test_client_info_setting(redis_url: str, monkeypatch) -> None
⋮----
"""Test that client_setinfo is called with correct library information."""
⋮----
# Create a mock to track if client_setinfo was called with our library name
client_info_called = False
lib_calls = []
original_client_setinfo = Redis.client_setinfo
def mock_client_setinfo(self, key, value)
⋮----
# Note: RedisVL might call this with its own lib name first
# We only track calls with our lib name
⋮----
client_info_called = True
⋮----
# Apply the mock
⋮----
# Test client info setting when creating a new saver
⋮----
# Call set_client_info directly to ensure it's called
⋮----
# Print debug info
⋮----
# Verify client_setinfo was called with our library info
⋮----
def test_client_info_fallback_to_echo(redis_url: str, monkeypatch) -> None
⋮----
"""Test that when client_setinfo is not available, fall back to echo."""
⋮----
# Create a Redis client directly first - this bypasses RedisVL validation
⋮----
# Remove client_setinfo to simulate older Redis version
⋮----
# Track if echo was called with our lib name
echo_called = False
echo_messages = []
original_echo = Redis.echo
def mock_echo(self, message)
⋮----
echo_called = True
⋮----
# Apply the mocks
⋮----
# Test direct fallback without RedisVL interference
⋮----
# Force another call to set_client_info
⋮----
# Print debug info
⋮----
# Verify echo was called as fallback with our library info
⋮----
def test_client_info_graceful_failure(redis_url: str, monkeypatch) -> None
⋮----
"""Test graceful failure when both client_setinfo and echo fail."""
⋮----
# Simulate failures for both methods
⋮----
# Should not raise any exceptions when both methods fail
⋮----
# Explicitly call set_client_info which should handle the errors
⋮----
def test_from_conn_string_errors() -> None
⋮----
"""Test error conditions for from_conn_string."""
# Test with neither URL nor client provided
⋮----
# Test with empty URL
# Handle both old and new RedisVL error message formats
⋮----
# Test with invalid connection URL
⋮----
# Test with non-responding client
client = Redis(host="nonexistent", port=6379)
⋮----
def test_large_batches(test_data: dict[str, Any], redis_url: str) -> None
⋮----
"""Test handling large numbers of operations with thread pool."""
⋮----
N = 10  # Number of operations per batch
M = 5  # Number of batches
⋮----
# Store configs and futures for debugging
stored_configs = []
futures = []
⋮----
test_config: RunnableConfig = {
⋮----
# Get results from puts
put_results = [future.result() for future in futures]
⋮----
# Verify using configs returned from put
verify_futures = []
⋮----
# Get verification results and add debug output
verify_results = [future.result() for future in verify_futures]
# Debug output for failures
⋮----
@tool
def get_weather(city: Literal["nyc", "sf"]) -> str
⋮----
"""Use this to get weather information."""
⋮----
@pytest.fixture
def tools() -> List[BaseTool]
⋮----
@pytest.fixture
def mock_llm() -> Any
⋮----
"""Create a mock LLM for testing without requiring API keys."""
⋮----
# Create a mock that can be used in place of a real LLM
mock = MagicMock()
⋮----
@pytest.fixture
def mock_agent() -> Any
⋮----
"""Create a mock agent that creates checkpoints without requiring a real LLM."""
⋮----
# Create a mock agent that returns a dummy response
⋮----
# Set the invoke method to also create a fake chat session
def mock_invoke(messages, config)
⋮----
# Return a dummy response that mimics a chat conversation
⋮----
"""Test RedisSaver checkpoint functionality using a mock agent."""
⋮----
# Use the mock agent instead of creating a real one
graph = mock_agent
# Use a unique thread_id
thread_id = f"test-{uuid4()}"
# Test initial query
config: RunnableConfig = {
# Create a checkpoint manually to simulate what would happen during agent execution
checkpoint = {
# Store the checkpoint
next_config = checkpointer.put(
# Verify next_config has the right structure
⋮----
# Test checkpoint retrieval
latest = checkpointer.get(config)
⋮----
# Test checkpoint tuple
tuple_result = checkpointer.get_tuple(config)
⋮----
# Test listing checkpoints
checkpoints = list(checkpointer.list(config))
⋮----
"""
    A regression test for a bug where queries for checkpoints from the
    root graph were failing to find valid checkpoints. When called from
    a root graph, the `checkpoint_id` and `checkpoint_ns` keys are not
    in the config object.
    """
⋮----
thread_id = f"root-graph-{uuid4()}"
# Create a config with checkpoint_id and checkpoint_ns
# For a root graph test, we need to add an empty checkpoint_ns
# since that's how real root graphs work
⋮----
"checkpoint_ns": "",  # Empty string is valid
⋮----
# Verify the checkpoint was stored
⋮----
# Test retrieving the checkpoint with a root graph config
# that doesn't have checkpoint_id or checkpoint_ns
⋮----
# This is the key test - verify we can retrieve checkpoints
# when called from a root graph configuration
⋮----
)  # Initial + LLM + Tool + Final

================
File: .gitignore
================
# Created by https://www.toptal.com/developers/gitignore/api/python,venv,macos
# Edit at https://www.toptal.com/developers/gitignore?templates=python,venv,macos

### macOS ###
# General
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon


# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

### macOS Patch ###
# iCloud generated files
*.icloud

### Python ###
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

### Python Patch ###
# Poetry local configuration file - https://python-poetry.org/docs/configuration/#local-configuration
poetry.toml

# ruff
.ruff_cache/

# LSP config files
pyrightconfig.json

### venv ###
# Virtualenv
# http://iamzed.com/2009/05/07/a-primer-on-virtualenv/
[Bb]in
[Ii]nclude
[Ll]ib
[Ll]ib64
[Ll]ocal
pyvenv.cfg
pip-selfcheck.json

libs/redis/docs/.Trash*
.python-version
.idea/*
examples/.Trash*
.claude

================
File: CLAUDE.md
================
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Development Commands

### Setup and Dependencies

```bash
poetry install --all-extras  # Install all dependencies with poetry (from README)
make redis-start             # Start Redis Stack container (includes RedisJSON and RediSearch)
make redis-stop              # Stop Redis container
```

### Testing

```bash
make test                    # Run tests with verbose output
make test-all               # Run all tests including API tests
pytest tests/test_specific.py  # Run specific test file
pytest tests/test_specific.py::test_function  # Run specific test
pytest --run-api-tests      # Include API integration tests
```

### Code Quality

```bash
make format          # Format code with black and isort
make lint            # Run formatting, type checking, and other linters
make check-types     # Run mypy type checking
make check           # Run both linting and tests
```

### Development

```bash
make clean           # Remove cache and build artifacts
```

## Architecture Overview

### Core Components

**Checkpoint Savers** (`langgraph/checkpoint/redis/`):

- `base.py`: `BaseRedisSaver` - Abstract base class with shared Redis operations, schemas, and TTL management
- `__init__.py`: `RedisSaver` - Standard sync implementation
- `aio.py`: `AsyncRedisSaver` - Async implementation
- `shallow.py` / `ashallow.py`: Shallow variants that store only latest checkpoint

**Stores** (`langgraph/store/redis/`):

- `base.py`: `BaseRedisStore` - Abstract base with Redis operations, vector search, and TTL support
- `__init__.py`: `RedisStore` - Sync store with key-value and vector search
- `aio.py`: `AsyncRedisStore` - Async store implementation

### Key Architecture Patterns

**Dual Implementation Strategy**: Each major component has both sync and async variants that share common base classes. The base classes (`BaseRedisSaver`, `BaseRedisStore`) contain the bulk of the business logic, while concrete implementations handle Redis client management and specific I/O patterns.

**Redis Module Dependencies**: The library requires RedisJSON and RediSearch modules. Redis 8.0+ includes these by default; earlier versions need Redis Stack. All operations use structured JSON storage with search indices for efficient querying.

**Schema-Driven Indexing**: Both checkpoints and stores use predefined schemas (`SCHEMAS` constants) that define Redis Search indices. Checkpoint indices track thread/namespace/version hierarchies; store indices support both key-value lookup and optional vector similarity search.

**TTL Integration**: Native Redis TTL support is integrated throughout, with configurable defaults and refresh-on-read capabilities. TTL applies to all related keys (main document, vectors, writes) atomically.

**Cluster Support**: Full Redis Cluster support with automatic detection and cluster-aware operations (individual key operations vs. pipelined operations).

**Type System**: Heavy use of generics (`BaseRedisSaver[RedisClientType, IndexType]`) to maintain type safety across sync/async variants while sharing implementation code.

### Redis Key Patterns

- Checkpoints: `checkpoint:{thread_id}:{namespace}:{checkpoint_id}`
- Checkpoint blobs: `checkpoint_blob:{thread_id}:{namespace}:{channel}:{version}`
- Checkpoint writes: `checkpoint_write:{thread_id}:{namespace}:{checkpoint_id}:{task_id}`
- Store items: `store:{uuid}`
- Store vectors: `store_vectors:{uuid}`

### Testing Strategy

Tests are organized by functionality:

- `test_sync.py` / `test_async.py`: Core checkpoint functionality
- `test_store.py` / `test_async_store.py`: Store operations
- `test_cluster_mode.py`: Redis Cluster specific tests
- `test_*_ttl.py`: TTL functionality
- `test_key_parsing.py`: Key generation and parsing logic
- `test_semantic_search_*.py`: Vector search capabilities

### Important Dependencies

- Requires Redis with RedisJSON and RediSearch modules
- Uses `redisvl` for vector operations and search index management
- Uses `python-ulid` for unique document IDs
- Integrates with LangGraph's checkpoint and store base classes

================
File: LICENSE
================
MIT License

Copyright (c) 2023 Redis, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: Makefile
================
.PHONY: install format lint test test-all clean redis-start redis-stop check-types check

install:
	poetry install --all-extras

redis-start:
	docker run -d --name redis-stack -p 6379:6379 -p 8001:8001 redis/redis-stack:latest

redis-stop:
	docker stop redis-stack

format:
	poetry run format
	poetry run sort-imports

check-types:
	poetry run check-mypy

lint: format check-types
	
test:
	poetry run test-verbose

test-all:
	poetry run test-verbose --run-api-tests

check: lint test

clean:
	find . -type d -name "__pycache__" -exec rm -rf {} +
	find . -type d -name ".pytest_cache" -exec rm -rf {} +
	find . -type d -name ".mypy_cache" -exec rm -rf {} +
	find . -type d -name ".coverage" -delete
	find . -type d -name "htmlcov" -exec rm -rf {} +
	find . -type d -name "dist" -exec rm -rf {} +
	find . -type d -name "build" -exec rm -rf {} +
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	find . -type d -name "_build" -exec rm -rf {} +

================
File: pyproject.toml
================
[tool.poetry]
name = "langgraph-checkpoint-redis"
version = "0.0.8"
description = "Redis implementation of the LangGraph agent checkpoint saver and store."
authors = ["Redis Inc. <applied.ai@redis.com>"]
license = "MIT"
readme = "README.md"
repository = "https://www.github.com/redis-developer/langgraph-redis"
keywords = ["ai", "redis", "redis-client", "vector-database", "agents", "langgraph", "langchain"]
classifiers = [
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "License :: OSI Approved :: MIT License",
]
packages = [{ include = "langgraph" }]

[tool.poetry.dependencies]
python = ">=3.9,<3.14"
langgraph-checkpoint = ">=2.0.26"
redisvl = ">=0.5.1,<1.0.0"

[tool.poetry.group.dev.dependencies]
langgraph = ">=0.3.0,<0.5.0"
black = "^25.1.0"
codespell = "^2.2.0"
pytest = "^7.2.1"
anyio = "^4.4.0"
pytest-asyncio = "^0.21.1"
pytest-xdist = {extras = ["psutil"], version = "^3.6.1"}
pytest-mock = "^3.11.1"
mypy = ">=1.11.0,<2"
aioconsole = "^0.8.1"
langchain-openai = "^0.3.2"
testcontainers = "^4.9.1"
isort = "^6.0.0"
cryptography = { version = ">=44.0.1", markers = "python_version > '3.9.1'" }

[tool.pytest.ini_options]
# --strict-markers will raise errors on unknown marks.
# https://docs.pytest.org/en/7.1.x/how-to/mark.html#raising-errors-on-unknown-marks
#
# https://docs.pytest.org/en/7.1.x/reference/reference.html
# --strict-config       any warnings encountered while parsing the `pytest`
#                       section of the configuration file raise errors.
addopts = "--strict-markers --strict-config --durations=5 -vv"
asyncio_mode = "auto"

[tool.poetry.scripts]
format = "scripts:format"
check-format = "scripts:check_format"
sort-imports = "scripts:sort_imports"
check-sort-imports = "scripts:check_sort_imports"
check-lint = "scripts:check_lint"
check-mypy = "scripts:check_mypy"
test = "scripts:test"
test-verbose = "scripts:test_verbose"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
target-version = ['py39', 'py310', 'py311', 'py312', 'py313']
exclude = '''
(
  | \.egg
  | \.git
  | \.hg
  | \.mypy_cache
  | \.nox
  | \.tox
  | \.venv
  | _build
  | build
  | dist
  | setup.py
)
'''

[tool.mypy]
# https://mypy.readthedocs.io/en/stable/config_file.html
disallow_untyped_defs = true
explicit_package_bases = true
warn_no_return = false
warn_unused_ignores = true
warn_redundant_casts = true
allow_redefinition = true
ignore_missing_imports = true
disable_error_code = "typeddict-item, return-value, union-attr, operator, assignment"

================
File: README.md
================
# LangGraph Redis

This repository contains Redis implementations for LangGraph, providing both Checkpoint Savers and Stores functionality.

## Overview

The project consists of two main components:

1. **Redis Checkpoint Savers**: Implementations for storing and managing checkpoints using Redis
2. **Redis Stores**: Redis-backed key-value stores with optional vector search capabilities

## Dependencies

### Python Dependencies

The project requires the following main Python dependencies:

- `redis>=5.2.1`
- `redisvl>=0.5.1`
- `langgraph-checkpoint>=2.0.24`

### Redis Modules Requirements

**IMPORTANT:** This library requires Redis with the following modules:

- **RedisJSON** - For storing and manipulating JSON data
- **RediSearch** - For search and indexing capabilities

#### Redis 8.0+

If you're using Redis 8.0 or higher, both RedisJSON and RediSearch modules are included by default as part of the core Redis distribution. No additional installation is required.

#### Redis < 8.0

If you're using a Redis version lower than 8.0, you'll need to ensure these modules are installed:

- Use [Redis Stack](https://redis.io/docs/stack/), which bundles Redis with these modules
- Or install the modules separately in your Redis instance

Failure to have these modules available will result in errors during index creation and checkpoint operations.

## Installation

Install the library using pip:

```bash
pip install langgraph-checkpoint-redis
```

## Redis Checkpoint Savers

### Important Notes

> [!IMPORTANT]
> When using Redis checkpointers for the first time, make sure to call `.setup()` method on them to create required indices. See examples below.

### Standard Implementation

```python
from langgraph.checkpoint.redis import RedisSaver

write_config = {"configurable": {"thread_id": "1", "checkpoint_ns": ""}}
read_config = {"configurable": {"thread_id": "1"}}

with RedisSaver.from_conn_string("redis://localhost:6379") as checkpointer:
    # Call setup to initialize indices
    checkpointer.setup()
    checkpoint = {
        "v": 1,
        "ts": "2024-07-31T20:14:19.804150+00:00",
        "id": "1ef4f797-8335-6428-8001-8a1503f9b875",
        "channel_values": {
            "my_key": "meow",
            "node": "node"
        },
        "channel_versions": {
            "__start__": 2,
            "my_key": 3,
            "start:node": 3,
            "node": 3
        },
        "versions_seen": {
            "__input__": {},
            "__start__": {
                "__start__": 1
            },
            "node": {
                "start:node": 2
            }
        },
        "pending_sends": [],
    }

    # Store checkpoint
    checkpointer.put(write_config, checkpoint, {}, {})

    # Retrieve checkpoint
    loaded_checkpoint = checkpointer.get(read_config)

    # List all checkpoints
    checkpoints = list(checkpointer.list(read_config))
```

### Async Implementation

```python
from langgraph.checkpoint.redis.aio import AsyncRedisSaver

async def main():
    write_config = {"configurable": {"thread_id": "1", "checkpoint_ns": ""}}
    read_config = {"configurable": {"thread_id": "1"}}

    async with AsyncRedisSaver.from_conn_string("redis://localhost:6379") as checkpointer:
        # Call setup to initialize indices
        await checkpointer.asetup()
        checkpoint = {
            "v": 1,
            "ts": "2024-07-31T20:14:19.804150+00:00",
            "id": "1ef4f797-8335-6428-8001-8a1503f9b875",
            "channel_values": {
                "my_key": "meow",
                "node": "node"
            },
            "channel_versions": {
                "__start__": 2,
                "my_key": 3,
                "start:node": 3,
                "node": 3
            },
            "versions_seen": {
                "__input__": {},
                "__start__": {
                    "__start__": 1
                },
                "node": {
                    "start:node": 2
                }
            },
            "pending_sends": [],
        }

        # Store checkpoint
        await checkpointer.aput(write_config, checkpoint, {}, {})

        # Retrieve checkpoint
        loaded_checkpoint = await checkpointer.aget(read_config)

        # List all checkpoints
        checkpoints = [c async for c in checkpointer.alist(read_config)]

# Run the async main function
import asyncio
asyncio.run(main())
```

### Shallow Implementations

Shallow Redis checkpoint savers store only the latest checkpoint in Redis. These implementations are useful when retaining a complete checkpoint history is unnecessary.

```python
from langgraph.checkpoint.redis.shallow import ShallowRedisSaver
# For async version: from langgraph.checkpoint.redis.ashallow import AsyncShallowRedisSaver

write_config = {"configurable": {"thread_id": "1", "checkpoint_ns": ""}}
read_config = {"configurable": {"thread_id": "1"}}

with ShallowRedisSaver.from_conn_string("redis://localhost:6379") as checkpointer:
    checkpointer.setup()
    # ... rest of the implementation follows similar pattern
```

## Redis Checkpoint TTL Support

Both Redis checkpoint savers and stores support Time-To-Live (TTL) functionality for automatic key expiration:

```python
# Configure TTL for checkpoint savers
ttl_config = {
    "default_ttl": 60,     # Default TTL in minutes
    "refresh_on_read": True,  # Refresh TTL when checkpoint is read
}

# Use with any checkpoint saver implementation
with RedisSaver.from_conn_string("redis://localhost:6379", ttl=ttl_config) as checkpointer:
    checkpointer.setup()
    # Use the checkpointer...
```

This makes it easy to manage storage and ensure ephemeral data is automatically cleaned up.

## Redis Stores

Redis Stores provide a persistent key-value store with optional vector search capabilities.

### Synchronous Implementation

```python
from langgraph.store.redis import RedisStore

# Basic usage
with RedisStore.from_conn_string("redis://localhost:6379") as store:
    store.setup()
    # Use the store...

# With vector search configuration
index_config = {
    "dims": 1536,  # Vector dimensions
    "distance_type": "cosine",  # Distance metric
    "fields": ["text"],  # Fields to index
}

# With TTL configuration
ttl_config = {
    "default_ttl": 60,     # Default TTL in minutes
    "refresh_on_read": True,  # Refresh TTL when store entries are read
}

with RedisStore.from_conn_string(
    "redis://localhost:6379", 
    index=index_config,
    ttl=ttl_config
) as store:
    store.setup()
    # Use the store with vector search and TTL capabilities...
```

### Async Implementation

```python
from langgraph.store.redis.aio import AsyncRedisStore

async def main():
    # TTL also works with async implementations
    ttl_config = {
        "default_ttl": 60,     # Default TTL in minutes
        "refresh_on_read": True,  # Refresh TTL when store entries are read
    }
    
    async with AsyncRedisStore.from_conn_string(
        "redis://localhost:6379", 
        ttl=ttl_config
    ) as store:
        await store.setup()
        # Use the store asynchronously...

asyncio.run(main())
```

## Examples

The `examples` directory contains Jupyter notebooks demonstrating the usage of Redis with LangGraph:

- `persistence_redis.ipynb`: Demonstrates the usage of Redis checkpoint savers with LangGraph
- `create-react-agent-memory.ipynb`: Shows how to create an agent with persistent memory using Redis
- `cross-thread-persistence.ipynb`: Demonstrates cross-thread persistence capabilities
- `persistence-functional.ipynb`: Shows functional persistence patterns with Redis

### Running Example Notebooks

To run the example notebooks with Docker:

1. Navigate to the examples directory:

   ```bash
   cd examples
   ```

2. Start the Docker containers:

   ```bash
   docker compose up
   ```

3. Open the URL shown in the console (typically <http://127.0.0.1:8888/tree>) in your browser to access Jupyter.

4. When finished, stop the containers:

   ```bash
   docker compose down
   ```

## Implementation Details

### Redis Module Usage

This implementation relies on specific Redis modules:

- **RedisJSON**: Used for storing structured JSON data as native Redis objects
- **RediSearch**: Used for creating and querying indices on JSON data

### Indexing

The Redis implementation creates these main indices using RediSearch:

1. **Checkpoints Index**: Stores checkpoint metadata and versioning
2. **Channel Values Index**: Stores channel-specific data
3. **Writes Index**: Tracks pending writes and intermediate states

For Redis Stores with vector search:

1. **Store Index**: Main key-value store
2. **Vector Index**: Optional vector embeddings for similarity search

### TTL Implementation

Both Redis checkpoint savers and stores leverage Redis's native key expiration:

- **Native Redis TTL**: Uses Redis's built-in `EXPIRE` command
- **Automatic Cleanup**: Redis automatically removes expired keys
- **Configurable Default TTL**: Set a default TTL for all keys in minutes
- **TTL Refresh on Read**: Optionally refresh TTL when keys are accessed
- **Applied to All Related Keys**: TTL is applied to all related keys (checkpoint, blobs, writes)

## Contributing

We welcome contributions! Here's how you can help:

### Development Setup

1. Clone the repository:

   ```bash
   git clone https://github.com/redis-developer/langgraph-redis
   cd langgraph-redis
   ```

2. Install dependencies:

   ```bash
   `poetry install --all-extras`
   ```

### Available Commands

The project includes several make commands for development:

- **Testing**:

  ```bash
  make test           # Run all tests
  make test-all       # Run all tests including API tests
  ```

- **Linting and Formatting**:

  ```bash
  make format        # Format all files with Black and isort
  make lint          # Run formatting, type checking, and other linters
  make check-types   # Run mypy type checking
  ```

- **Redis for Development/Testing**:

  ```bash
  make redis-start   # Start Redis Stack in Docker (includes RedisJSON and RediSearch modules)
  make redis-stop    # Stop Redis container
  ```

### Contribution Guidelines

1. Create a new branch for your changes
2. Write tests for new functionality
3. Ensure all tests pass: `make test`
4. Format your code: `make format`
5. Run linting checks: `make lint`
6. Submit a pull request with a clear description of your changes
7. Follow [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/) for commit messages

## License

This project is licensed under the MIT License.

================
File: scripts.py
================
def format()
def check_format()
def sort_imports()
def check_sort_imports()
def check_lint()
def check_mypy()
def test()
⋮----
test_cmd = ["python", "-m", "pytest", "-n", "auto", "--log-level=CRITICAL"]
# Get any extra arguments passed to the script
extra_args = sys.argv[1:]
⋮----
def test_verbose()
⋮----
test_cmd = ["python", "-m", "pytest", "-n", "auto", "-vv", "-s", "--log-level=CRITICAL"]

================
File: test_key_parsing_focus.py
================
"""Focused test for Redis key parsing fix.
This verifies only the key parsing changes that address the specific issue that was 
causing the "too many values to unpack (expected 6)" error in the notebooks.
"""
⋮----
def test_key_parsing_handles_extra_components()
⋮----
"""Test that the fixed key parsing method can handle keys with more than 6 components."""
# Create various Redis key patterns that would be seen in different scenarios
# Standard key with 6 components (the original expected format)
standard_key = REDIS_KEY_SEPARATOR.join([
# Key from subgraph state access with 8 components
subgraph_key = REDIS_KEY_SEPARATOR.join([
# Key from semantic search with 7 components
search_key = REDIS_KEY_SEPARATOR.join([
# Parse each key with the fixed method
standard_result = BaseRedisSaver._parse_redis_checkpoint_writes_key(standard_key)
subgraph_result = BaseRedisSaver._parse_redis_checkpoint_writes_key(subgraph_key)
search_result = BaseRedisSaver._parse_redis_checkpoint_writes_key(search_key)
# All results should contain exactly the same 5 keys
⋮----
# The values should match the first 6 components of each key
⋮----
parts = key.split(REDIS_KEY_SEPARATOR)
⋮----
# Verify that additional components are ignored
⋮----
# Key with fewer than 6 components should raise an error
invalid_key = REDIS_KEY_SEPARATOR.join([

================
File: test_key_parsing_suite.py
================
"""Comprehensive test suite for Redis key parsing fix.
This suite combines all tests into a single file to verify
our fix for the Redis key parsing issue works in all scenarios.
"""
⋮----
def test_standard_key_parsing()
⋮----
"""Test that standard Redis keys with exactly 6 components work correctly."""
# Create a standard key with exactly 6 components
key = REDIS_KEY_SEPARATOR.join([
# Parse the key
result = BaseRedisSaver._parse_redis_checkpoint_writes_key(key)
# Verify the result structure
⋮----
def test_key_with_extra_components()
⋮----
"""Test that keys with extra components are parsed correctly."""
# Create a key with extra components (8 parts)
⋮----
# Parse the key with the fixed method
⋮----
# Verify that only the first 6 components are used
⋮----
# Verify that extra components are ignored
⋮----
def test_subgraph_key_pattern()
⋮----
"""Test that keys with subgraph components are parsed correctly."""
# Create a key with a pattern seen in subgraph operations
⋮----
# Verify parsing works correctly
⋮----
def test_semantic_search_key_pattern()
⋮----
"""Test that keys with semantic search components are parsed correctly."""
# Create a key with a pattern seen in semantic search operations
⋮----
def test_insufficient_components()
⋮----
"""Test that keys with fewer than 6 components raise an error."""
# Create a key with only 5 components
⋮----
# Attempt to parse the key - should raise ValueError
⋮----
def test_incorrect_prefix()
⋮----
"""Test that keys with an incorrect prefix raise an error."""
# Create a key with an incorrect prefix




================================================================
End of Codebase
================================================================
